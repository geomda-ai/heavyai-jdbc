/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.omnisci.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TCopyParams implements org.apache.thrift.TBase<TCopyParams, TCopyParams._Fields>, java.io.Serializable, Cloneable, Comparable<TCopyParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCopyParams");

  private static final org.apache.thrift.protocol.TField DELIMITER_FIELD_DESC = new org.apache.thrift.protocol.TField("delimiter", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NULL_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("null_str", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HAS_HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("has_header", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField QUOTED_FIELD_DESC = new org.apache.thrift.protocol.TField("quoted", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField QUOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("quote", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ESCAPE_FIELD_DESC = new org.apache.thrift.protocol.TField("escape", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LINE_DELIM_FIELD_DESC = new org.apache.thrift.protocol.TField("line_delim", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ARRAY_DELIM_FIELD_DESC = new org.apache.thrift.protocol.TField("array_delim", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ARRAY_BEGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("array_begin", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ARRAY_END_FIELD_DESC = new org.apache.thrift.protocol.TField("array_end", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField THREADS_FIELD_DESC = new org.apache.thrift.protocol.TField("threads", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("file_type", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField S3_ACCESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("s3_access_key", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField S3_SECRET_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("s3_secret_key", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField S3_REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("s3_region", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField GEO_COORDS_ENCODING_FIELD_DESC = new org.apache.thrift.protocol.TField("geo_coords_encoding", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField GEO_COORDS_COMP_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("geo_coords_comp_param", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField GEO_COORDS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("geo_coords_type", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField GEO_COORDS_SRID_FIELD_DESC = new org.apache.thrift.protocol.TField("geo_coords_srid", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField SANITIZE_COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("sanitize_column_names", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField GEO_LAYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("geo_layer_name", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField S3_ENDPOINT_FIELD_DESC = new org.apache.thrift.protocol.TField("s3_endpoint", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField GEO_ASSIGN_RENDER_GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("geo_assign_render_groups", org.apache.thrift.protocol.TType.BOOL, (short)23);
  private static final org.apache.thrift.protocol.TField GEO_EXPLODE_COLLECTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("geo_explode_collections", org.apache.thrift.protocol.TType.BOOL, (short)24);
  private static final org.apache.thrift.protocol.TField SOURCE_SRID_FIELD_DESC = new org.apache.thrift.protocol.TField("source_srid", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField S3_SESSION_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("s3_session_token", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField RASTER_POINT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("raster_point_type", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField RASTER_IMPORT_BANDS_FIELD_DESC = new org.apache.thrift.protocol.TField("raster_import_bands", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField RASTER_SCANLINES_PER_THREAD_FIELD_DESC = new org.apache.thrift.protocol.TField("raster_scanlines_per_thread", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField RASTER_POINT_TRANSFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("raster_point_transform", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField RASTER_POINT_COMPUTE_ANGLE_FIELD_DESC = new org.apache.thrift.protocol.TField("raster_point_compute_angle", org.apache.thrift.protocol.TType.BOOL, (short)31);
  private static final org.apache.thrift.protocol.TField RASTER_IMPORT_DIMENSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("raster_import_dimensions", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField USE_SOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("use_source_type", org.apache.thrift.protocol.TType.BOOL, (short)33);
  private static final org.apache.thrift.protocol.TField SOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("source_type", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField ODBC_DSN_FIELD_DESC = new org.apache.thrift.protocol.TField("odbc_dsn", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField ODBC_CONNECTION_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("odbc_connection_string", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField ODBC_SQL_SELECT_FIELD_DESC = new org.apache.thrift.protocol.TField("odbc_sql_select", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField ODBC_USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("odbc_username", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField ODBC_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("odbc_password", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField ODBC_CREDENTIAL_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("odbc_credential_string", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField ADD_METADATA_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("add_metadata_columns", org.apache.thrift.protocol.TType.STRING, (short)41);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TCopyParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TCopyParamsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String delimiter; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String null_str; // required
  /**
   * 
   * @see TImportHeaderRow
   */
  public @org.apache.thrift.annotation.Nullable TImportHeaderRow has_header; // required
  public boolean quoted; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String quote; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String escape; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String line_delim; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String array_delim; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String array_begin; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String array_end; // required
  public int threads; // required
  /**
   * 
   * @see TFileType
   */
  public @org.apache.thrift.annotation.Nullable TFileType file_type; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String s3_access_key; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String s3_secret_key; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String s3_region; // required
  /**
   * 
   * @see com.omnisci.thrift.server.TEncodingType
   */
  public @org.apache.thrift.annotation.Nullable com.omnisci.thrift.server.TEncodingType geo_coords_encoding; // required
  public int geo_coords_comp_param; // required
  /**
   * 
   * @see com.omnisci.thrift.server.TDatumType
   */
  public @org.apache.thrift.annotation.Nullable com.omnisci.thrift.server.TDatumType geo_coords_type; // required
  public int geo_coords_srid; // required
  public boolean sanitize_column_names; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String geo_layer_name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String s3_endpoint; // required
  public boolean geo_assign_render_groups; // required
  public boolean geo_explode_collections; // required
  public int source_srid; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String s3_session_token; // required
  /**
   * 
   * @see TRasterPointType
   */
  public @org.apache.thrift.annotation.Nullable TRasterPointType raster_point_type; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String raster_import_bands; // required
  public int raster_scanlines_per_thread; // required
  /**
   * 
   * @see TRasterPointTransform
   */
  public @org.apache.thrift.annotation.Nullable TRasterPointTransform raster_point_transform; // required
  public boolean raster_point_compute_angle; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String raster_import_dimensions; // required
  public boolean use_source_type; // required
  /**
   * 
   * @see TSourceType
   */
  public @org.apache.thrift.annotation.Nullable TSourceType source_type; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String odbc_dsn; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String odbc_connection_string; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String odbc_sql_select; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String odbc_username; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String odbc_password; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String odbc_credential_string; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String add_metadata_columns; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DELIMITER((short)1, "delimiter"),
    NULL_STR((short)2, "null_str"),
    /**
     * 
     * @see TImportHeaderRow
     */
    HAS_HEADER((short)3, "has_header"),
    QUOTED((short)4, "quoted"),
    QUOTE((short)5, "quote"),
    ESCAPE((short)6, "escape"),
    LINE_DELIM((short)7, "line_delim"),
    ARRAY_DELIM((short)8, "array_delim"),
    ARRAY_BEGIN((short)9, "array_begin"),
    ARRAY_END((short)10, "array_end"),
    THREADS((short)11, "threads"),
    /**
     * 
     * @see TFileType
     */
    FILE_TYPE((short)12, "file_type"),
    S3_ACCESS_KEY((short)13, "s3_access_key"),
    S3_SECRET_KEY((short)14, "s3_secret_key"),
    S3_REGION((short)15, "s3_region"),
    /**
     * 
     * @see com.omnisci.thrift.server.TEncodingType
     */
    GEO_COORDS_ENCODING((short)16, "geo_coords_encoding"),
    GEO_COORDS_COMP_PARAM((short)17, "geo_coords_comp_param"),
    /**
     * 
     * @see com.omnisci.thrift.server.TDatumType
     */
    GEO_COORDS_TYPE((short)18, "geo_coords_type"),
    GEO_COORDS_SRID((short)19, "geo_coords_srid"),
    SANITIZE_COLUMN_NAMES((short)20, "sanitize_column_names"),
    GEO_LAYER_NAME((short)21, "geo_layer_name"),
    S3_ENDPOINT((short)22, "s3_endpoint"),
    GEO_ASSIGN_RENDER_GROUPS((short)23, "geo_assign_render_groups"),
    GEO_EXPLODE_COLLECTIONS((short)24, "geo_explode_collections"),
    SOURCE_SRID((short)25, "source_srid"),
    S3_SESSION_TOKEN((short)26, "s3_session_token"),
    /**
     * 
     * @see TRasterPointType
     */
    RASTER_POINT_TYPE((short)27, "raster_point_type"),
    RASTER_IMPORT_BANDS((short)28, "raster_import_bands"),
    RASTER_SCANLINES_PER_THREAD((short)29, "raster_scanlines_per_thread"),
    /**
     * 
     * @see TRasterPointTransform
     */
    RASTER_POINT_TRANSFORM((short)30, "raster_point_transform"),
    RASTER_POINT_COMPUTE_ANGLE((short)31, "raster_point_compute_angle"),
    RASTER_IMPORT_DIMENSIONS((short)32, "raster_import_dimensions"),
    USE_SOURCE_TYPE((short)33, "use_source_type"),
    /**
     * 
     * @see TSourceType
     */
    SOURCE_TYPE((short)34, "source_type"),
    ODBC_DSN((short)35, "odbc_dsn"),
    ODBC_CONNECTION_STRING((short)36, "odbc_connection_string"),
    ODBC_SQL_SELECT((short)37, "odbc_sql_select"),
    ODBC_USERNAME((short)38, "odbc_username"),
    ODBC_PASSWORD((short)39, "odbc_password"),
    ODBC_CREDENTIAL_STRING((short)40, "odbc_credential_string"),
    ADD_METADATA_COLUMNS((short)41, "add_metadata_columns");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DELIMITER
          return DELIMITER;
        case 2: // NULL_STR
          return NULL_STR;
        case 3: // HAS_HEADER
          return HAS_HEADER;
        case 4: // QUOTED
          return QUOTED;
        case 5: // QUOTE
          return QUOTE;
        case 6: // ESCAPE
          return ESCAPE;
        case 7: // LINE_DELIM
          return LINE_DELIM;
        case 8: // ARRAY_DELIM
          return ARRAY_DELIM;
        case 9: // ARRAY_BEGIN
          return ARRAY_BEGIN;
        case 10: // ARRAY_END
          return ARRAY_END;
        case 11: // THREADS
          return THREADS;
        case 12: // FILE_TYPE
          return FILE_TYPE;
        case 13: // S3_ACCESS_KEY
          return S3_ACCESS_KEY;
        case 14: // S3_SECRET_KEY
          return S3_SECRET_KEY;
        case 15: // S3_REGION
          return S3_REGION;
        case 16: // GEO_COORDS_ENCODING
          return GEO_COORDS_ENCODING;
        case 17: // GEO_COORDS_COMP_PARAM
          return GEO_COORDS_COMP_PARAM;
        case 18: // GEO_COORDS_TYPE
          return GEO_COORDS_TYPE;
        case 19: // GEO_COORDS_SRID
          return GEO_COORDS_SRID;
        case 20: // SANITIZE_COLUMN_NAMES
          return SANITIZE_COLUMN_NAMES;
        case 21: // GEO_LAYER_NAME
          return GEO_LAYER_NAME;
        case 22: // S3_ENDPOINT
          return S3_ENDPOINT;
        case 23: // GEO_ASSIGN_RENDER_GROUPS
          return GEO_ASSIGN_RENDER_GROUPS;
        case 24: // GEO_EXPLODE_COLLECTIONS
          return GEO_EXPLODE_COLLECTIONS;
        case 25: // SOURCE_SRID
          return SOURCE_SRID;
        case 26: // S3_SESSION_TOKEN
          return S3_SESSION_TOKEN;
        case 27: // RASTER_POINT_TYPE
          return RASTER_POINT_TYPE;
        case 28: // RASTER_IMPORT_BANDS
          return RASTER_IMPORT_BANDS;
        case 29: // RASTER_SCANLINES_PER_THREAD
          return RASTER_SCANLINES_PER_THREAD;
        case 30: // RASTER_POINT_TRANSFORM
          return RASTER_POINT_TRANSFORM;
        case 31: // RASTER_POINT_COMPUTE_ANGLE
          return RASTER_POINT_COMPUTE_ANGLE;
        case 32: // RASTER_IMPORT_DIMENSIONS
          return RASTER_IMPORT_DIMENSIONS;
        case 33: // USE_SOURCE_TYPE
          return USE_SOURCE_TYPE;
        case 34: // SOURCE_TYPE
          return SOURCE_TYPE;
        case 35: // ODBC_DSN
          return ODBC_DSN;
        case 36: // ODBC_CONNECTION_STRING
          return ODBC_CONNECTION_STRING;
        case 37: // ODBC_SQL_SELECT
          return ODBC_SQL_SELECT;
        case 38: // ODBC_USERNAME
          return ODBC_USERNAME;
        case 39: // ODBC_PASSWORD
          return ODBC_PASSWORD;
        case 40: // ODBC_CREDENTIAL_STRING
          return ODBC_CREDENTIAL_STRING;
        case 41: // ADD_METADATA_COLUMNS
          return ADD_METADATA_COLUMNS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUOTED_ISSET_ID = 0;
  private static final int __THREADS_ISSET_ID = 1;
  private static final int __GEO_COORDS_COMP_PARAM_ISSET_ID = 2;
  private static final int __GEO_COORDS_SRID_ISSET_ID = 3;
  private static final int __SANITIZE_COLUMN_NAMES_ISSET_ID = 4;
  private static final int __GEO_ASSIGN_RENDER_GROUPS_ISSET_ID = 5;
  private static final int __GEO_EXPLODE_COLLECTIONS_ISSET_ID = 6;
  private static final int __SOURCE_SRID_ISSET_ID = 7;
  private static final int __RASTER_SCANLINES_PER_THREAD_ISSET_ID = 8;
  private static final int __RASTER_POINT_COMPUTE_ANGLE_ISSET_ID = 9;
  private static final int __USE_SOURCE_TYPE_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DELIMITER, new org.apache.thrift.meta_data.FieldMetaData("delimiter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NULL_STR, new org.apache.thrift.meta_data.FieldMetaData("null_str", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HAS_HEADER, new org.apache.thrift.meta_data.FieldMetaData("has_header", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TImportHeaderRow.class)));
    tmpMap.put(_Fields.QUOTED, new org.apache.thrift.meta_data.FieldMetaData("quoted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.QUOTE, new org.apache.thrift.meta_data.FieldMetaData("quote", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ESCAPE, new org.apache.thrift.meta_data.FieldMetaData("escape", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINE_DELIM, new org.apache.thrift.meta_data.FieldMetaData("line_delim", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARRAY_DELIM, new org.apache.thrift.meta_data.FieldMetaData("array_delim", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARRAY_BEGIN, new org.apache.thrift.meta_data.FieldMetaData("array_begin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARRAY_END, new org.apache.thrift.meta_data.FieldMetaData("array_end", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THREADS, new org.apache.thrift.meta_data.FieldMetaData("threads", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("file_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TFileType.class)));
    tmpMap.put(_Fields.S3_ACCESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("s3_access_key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.S3_SECRET_KEY, new org.apache.thrift.meta_data.FieldMetaData("s3_secret_key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.S3_REGION, new org.apache.thrift.meta_data.FieldMetaData("s3_region", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEO_COORDS_ENCODING, new org.apache.thrift.meta_data.FieldMetaData("geo_coords_encoding", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.omnisci.thrift.server.TEncodingType.class)));
    tmpMap.put(_Fields.GEO_COORDS_COMP_PARAM, new org.apache.thrift.meta_data.FieldMetaData("geo_coords_comp_param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GEO_COORDS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("geo_coords_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.omnisci.thrift.server.TDatumType.class)));
    tmpMap.put(_Fields.GEO_COORDS_SRID, new org.apache.thrift.meta_data.FieldMetaData("geo_coords_srid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SANITIZE_COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("sanitize_column_names", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.GEO_LAYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("geo_layer_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.S3_ENDPOINT, new org.apache.thrift.meta_data.FieldMetaData("s3_endpoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEO_ASSIGN_RENDER_GROUPS, new org.apache.thrift.meta_data.FieldMetaData("geo_assign_render_groups", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.GEO_EXPLODE_COLLECTIONS, new org.apache.thrift.meta_data.FieldMetaData("geo_explode_collections", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SOURCE_SRID, new org.apache.thrift.meta_data.FieldMetaData("source_srid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.S3_SESSION_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("s3_session_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RASTER_POINT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("raster_point_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TRasterPointType.class)));
    tmpMap.put(_Fields.RASTER_IMPORT_BANDS, new org.apache.thrift.meta_data.FieldMetaData("raster_import_bands", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RASTER_SCANLINES_PER_THREAD, new org.apache.thrift.meta_data.FieldMetaData("raster_scanlines_per_thread", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RASTER_POINT_TRANSFORM, new org.apache.thrift.meta_data.FieldMetaData("raster_point_transform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TRasterPointTransform.class)));
    tmpMap.put(_Fields.RASTER_POINT_COMPUTE_ANGLE, new org.apache.thrift.meta_data.FieldMetaData("raster_point_compute_angle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RASTER_IMPORT_DIMENSIONS, new org.apache.thrift.meta_data.FieldMetaData("raster_import_dimensions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USE_SOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("use_source_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("source_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TSourceType.class)));
    tmpMap.put(_Fields.ODBC_DSN, new org.apache.thrift.meta_data.FieldMetaData("odbc_dsn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ODBC_CONNECTION_STRING, new org.apache.thrift.meta_data.FieldMetaData("odbc_connection_string", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ODBC_SQL_SELECT, new org.apache.thrift.meta_data.FieldMetaData("odbc_sql_select", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ODBC_USERNAME, new org.apache.thrift.meta_data.FieldMetaData("odbc_username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ODBC_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("odbc_password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ODBC_CREDENTIAL_STRING, new org.apache.thrift.meta_data.FieldMetaData("odbc_credential_string", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADD_METADATA_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("add_metadata_columns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCopyParams.class, metaDataMap);
  }

  public TCopyParams() {
    this.has_header = com.omnisci.thrift.server.TImportHeaderRow.AUTODETECT;

    this.file_type = com.omnisci.thrift.server.TFileType.DELIMITED;

    this.geo_coords_encoding = com.omnisci.thrift.server.TEncodingType.GEOINT;

    this.geo_coords_comp_param = 32;

    this.geo_coords_type = com.omnisci.thrift.server.TDatumType.GEOMETRY;

    this.geo_coords_srid = 4326;

    this.sanitize_column_names = true;

    this.geo_assign_render_groups = true;

    this.geo_explode_collections = false;

    this.source_srid = 0;

    this.raster_point_type = com.omnisci.thrift.server.TRasterPointType.AUTO;

    this.raster_point_transform = com.omnisci.thrift.server.TRasterPointTransform.AUTO;

    this.raster_point_compute_angle = false;

    this.use_source_type = false;

    this.source_type = com.omnisci.thrift.server.TSourceType.DELIMITED;

  }

  public TCopyParams(
    java.lang.String delimiter,
    java.lang.String null_str,
    TImportHeaderRow has_header,
    boolean quoted,
    java.lang.String quote,
    java.lang.String escape,
    java.lang.String line_delim,
    java.lang.String array_delim,
    java.lang.String array_begin,
    java.lang.String array_end,
    int threads,
    TFileType file_type,
    java.lang.String s3_access_key,
    java.lang.String s3_secret_key,
    java.lang.String s3_region,
    com.omnisci.thrift.server.TEncodingType geo_coords_encoding,
    int geo_coords_comp_param,
    com.omnisci.thrift.server.TDatumType geo_coords_type,
    int geo_coords_srid,
    boolean sanitize_column_names,
    java.lang.String geo_layer_name,
    java.lang.String s3_endpoint,
    boolean geo_assign_render_groups,
    boolean geo_explode_collections,
    int source_srid,
    java.lang.String s3_session_token,
    TRasterPointType raster_point_type,
    java.lang.String raster_import_bands,
    int raster_scanlines_per_thread,
    TRasterPointTransform raster_point_transform,
    boolean raster_point_compute_angle,
    java.lang.String raster_import_dimensions,
    boolean use_source_type,
    TSourceType source_type,
    java.lang.String odbc_dsn,
    java.lang.String odbc_connection_string,
    java.lang.String odbc_sql_select,
    java.lang.String odbc_username,
    java.lang.String odbc_password,
    java.lang.String odbc_credential_string,
    java.lang.String add_metadata_columns)
  {
    this();
    this.delimiter = delimiter;
    this.null_str = null_str;
    this.has_header = has_header;
    this.quoted = quoted;
    setQuotedIsSet(true);
    this.quote = quote;
    this.escape = escape;
    this.line_delim = line_delim;
    this.array_delim = array_delim;
    this.array_begin = array_begin;
    this.array_end = array_end;
    this.threads = threads;
    setThreadsIsSet(true);
    this.file_type = file_type;
    this.s3_access_key = s3_access_key;
    this.s3_secret_key = s3_secret_key;
    this.s3_region = s3_region;
    this.geo_coords_encoding = geo_coords_encoding;
    this.geo_coords_comp_param = geo_coords_comp_param;
    setGeo_coords_comp_paramIsSet(true);
    this.geo_coords_type = geo_coords_type;
    this.geo_coords_srid = geo_coords_srid;
    setGeo_coords_sridIsSet(true);
    this.sanitize_column_names = sanitize_column_names;
    setSanitize_column_namesIsSet(true);
    this.geo_layer_name = geo_layer_name;
    this.s3_endpoint = s3_endpoint;
    this.geo_assign_render_groups = geo_assign_render_groups;
    setGeo_assign_render_groupsIsSet(true);
    this.geo_explode_collections = geo_explode_collections;
    setGeo_explode_collectionsIsSet(true);
    this.source_srid = source_srid;
    setSource_sridIsSet(true);
    this.s3_session_token = s3_session_token;
    this.raster_point_type = raster_point_type;
    this.raster_import_bands = raster_import_bands;
    this.raster_scanlines_per_thread = raster_scanlines_per_thread;
    setRaster_scanlines_per_threadIsSet(true);
    this.raster_point_transform = raster_point_transform;
    this.raster_point_compute_angle = raster_point_compute_angle;
    setRaster_point_compute_angleIsSet(true);
    this.raster_import_dimensions = raster_import_dimensions;
    this.use_source_type = use_source_type;
    setUse_source_typeIsSet(true);
    this.source_type = source_type;
    this.odbc_dsn = odbc_dsn;
    this.odbc_connection_string = odbc_connection_string;
    this.odbc_sql_select = odbc_sql_select;
    this.odbc_username = odbc_username;
    this.odbc_password = odbc_password;
    this.odbc_credential_string = odbc_credential_string;
    this.add_metadata_columns = add_metadata_columns;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCopyParams(TCopyParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDelimiter()) {
      this.delimiter = other.delimiter;
    }
    if (other.isSetNull_str()) {
      this.null_str = other.null_str;
    }
    if (other.isSetHas_header()) {
      this.has_header = other.has_header;
    }
    this.quoted = other.quoted;
    if (other.isSetQuote()) {
      this.quote = other.quote;
    }
    if (other.isSetEscape()) {
      this.escape = other.escape;
    }
    if (other.isSetLine_delim()) {
      this.line_delim = other.line_delim;
    }
    if (other.isSetArray_delim()) {
      this.array_delim = other.array_delim;
    }
    if (other.isSetArray_begin()) {
      this.array_begin = other.array_begin;
    }
    if (other.isSetArray_end()) {
      this.array_end = other.array_end;
    }
    this.threads = other.threads;
    if (other.isSetFile_type()) {
      this.file_type = other.file_type;
    }
    if (other.isSetS3_access_key()) {
      this.s3_access_key = other.s3_access_key;
    }
    if (other.isSetS3_secret_key()) {
      this.s3_secret_key = other.s3_secret_key;
    }
    if (other.isSetS3_region()) {
      this.s3_region = other.s3_region;
    }
    if (other.isSetGeo_coords_encoding()) {
      this.geo_coords_encoding = other.geo_coords_encoding;
    }
    this.geo_coords_comp_param = other.geo_coords_comp_param;
    if (other.isSetGeo_coords_type()) {
      this.geo_coords_type = other.geo_coords_type;
    }
    this.geo_coords_srid = other.geo_coords_srid;
    this.sanitize_column_names = other.sanitize_column_names;
    if (other.isSetGeo_layer_name()) {
      this.geo_layer_name = other.geo_layer_name;
    }
    if (other.isSetS3_endpoint()) {
      this.s3_endpoint = other.s3_endpoint;
    }
    this.geo_assign_render_groups = other.geo_assign_render_groups;
    this.geo_explode_collections = other.geo_explode_collections;
    this.source_srid = other.source_srid;
    if (other.isSetS3_session_token()) {
      this.s3_session_token = other.s3_session_token;
    }
    if (other.isSetRaster_point_type()) {
      this.raster_point_type = other.raster_point_type;
    }
    if (other.isSetRaster_import_bands()) {
      this.raster_import_bands = other.raster_import_bands;
    }
    this.raster_scanlines_per_thread = other.raster_scanlines_per_thread;
    if (other.isSetRaster_point_transform()) {
      this.raster_point_transform = other.raster_point_transform;
    }
    this.raster_point_compute_angle = other.raster_point_compute_angle;
    if (other.isSetRaster_import_dimensions()) {
      this.raster_import_dimensions = other.raster_import_dimensions;
    }
    this.use_source_type = other.use_source_type;
    if (other.isSetSource_type()) {
      this.source_type = other.source_type;
    }
    if (other.isSetOdbc_dsn()) {
      this.odbc_dsn = other.odbc_dsn;
    }
    if (other.isSetOdbc_connection_string()) {
      this.odbc_connection_string = other.odbc_connection_string;
    }
    if (other.isSetOdbc_sql_select()) {
      this.odbc_sql_select = other.odbc_sql_select;
    }
    if (other.isSetOdbc_username()) {
      this.odbc_username = other.odbc_username;
    }
    if (other.isSetOdbc_password()) {
      this.odbc_password = other.odbc_password;
    }
    if (other.isSetOdbc_credential_string()) {
      this.odbc_credential_string = other.odbc_credential_string;
    }
    if (other.isSetAdd_metadata_columns()) {
      this.add_metadata_columns = other.add_metadata_columns;
    }
  }

  public TCopyParams deepCopy() {
    return new TCopyParams(this);
  }

  @Override
  public void clear() {
    this.delimiter = null;
    this.null_str = null;
    this.has_header = com.omnisci.thrift.server.TImportHeaderRow.AUTODETECT;

    setQuotedIsSet(false);
    this.quoted = false;
    this.quote = null;
    this.escape = null;
    this.line_delim = null;
    this.array_delim = null;
    this.array_begin = null;
    this.array_end = null;
    setThreadsIsSet(false);
    this.threads = 0;
    this.file_type = com.omnisci.thrift.server.TFileType.DELIMITED;

    this.s3_access_key = null;
    this.s3_secret_key = null;
    this.s3_region = null;
    this.geo_coords_encoding = com.omnisci.thrift.server.TEncodingType.GEOINT;

    this.geo_coords_comp_param = 32;

    this.geo_coords_type = com.omnisci.thrift.server.TDatumType.GEOMETRY;

    this.geo_coords_srid = 4326;

    this.sanitize_column_names = true;

    this.geo_layer_name = null;
    this.s3_endpoint = null;
    this.geo_assign_render_groups = true;

    this.geo_explode_collections = false;

    this.source_srid = 0;

    this.s3_session_token = null;
    this.raster_point_type = com.omnisci.thrift.server.TRasterPointType.AUTO;

    this.raster_import_bands = null;
    setRaster_scanlines_per_threadIsSet(false);
    this.raster_scanlines_per_thread = 0;
    this.raster_point_transform = com.omnisci.thrift.server.TRasterPointTransform.AUTO;

    this.raster_point_compute_angle = false;

    this.raster_import_dimensions = null;
    this.use_source_type = false;

    this.source_type = com.omnisci.thrift.server.TSourceType.DELIMITED;

    this.odbc_dsn = null;
    this.odbc_connection_string = null;
    this.odbc_sql_select = null;
    this.odbc_username = null;
    this.odbc_password = null;
    this.odbc_credential_string = null;
    this.add_metadata_columns = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDelimiter() {
    return this.delimiter;
  }

  public TCopyParams setDelimiter(@org.apache.thrift.annotation.Nullable java.lang.String delimiter) {
    this.delimiter = delimiter;
    return this;
  }

  public void unsetDelimiter() {
    this.delimiter = null;
  }

  /** Returns true if field delimiter is set (has been assigned a value) and false otherwise */
  public boolean isSetDelimiter() {
    return this.delimiter != null;
  }

  public void setDelimiterIsSet(boolean value) {
    if (!value) {
      this.delimiter = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNull_str() {
    return this.null_str;
  }

  public TCopyParams setNull_str(@org.apache.thrift.annotation.Nullable java.lang.String null_str) {
    this.null_str = null_str;
    return this;
  }

  public void unsetNull_str() {
    this.null_str = null;
  }

  /** Returns true if field null_str is set (has been assigned a value) and false otherwise */
  public boolean isSetNull_str() {
    return this.null_str != null;
  }

  public void setNull_strIsSet(boolean value) {
    if (!value) {
      this.null_str = null;
    }
  }

  /**
   * 
   * @see TImportHeaderRow
   */
  @org.apache.thrift.annotation.Nullable
  public TImportHeaderRow getHas_header() {
    return this.has_header;
  }

  /**
   * 
   * @see TImportHeaderRow
   */
  public TCopyParams setHas_header(@org.apache.thrift.annotation.Nullable TImportHeaderRow has_header) {
    this.has_header = has_header;
    return this;
  }

  public void unsetHas_header() {
    this.has_header = null;
  }

  /** Returns true if field has_header is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_header() {
    return this.has_header != null;
  }

  public void setHas_headerIsSet(boolean value) {
    if (!value) {
      this.has_header = null;
    }
  }

  public boolean isQuoted() {
    return this.quoted;
  }

  public TCopyParams setQuoted(boolean quoted) {
    this.quoted = quoted;
    setQuotedIsSet(true);
    return this;
  }

  public void unsetQuoted() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUOTED_ISSET_ID);
  }

  /** Returns true if field quoted is set (has been assigned a value) and false otherwise */
  public boolean isSetQuoted() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUOTED_ISSET_ID);
  }

  public void setQuotedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUOTED_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getQuote() {
    return this.quote;
  }

  public TCopyParams setQuote(@org.apache.thrift.annotation.Nullable java.lang.String quote) {
    this.quote = quote;
    return this;
  }

  public void unsetQuote() {
    this.quote = null;
  }

  /** Returns true if field quote is set (has been assigned a value) and false otherwise */
  public boolean isSetQuote() {
    return this.quote != null;
  }

  public void setQuoteIsSet(boolean value) {
    if (!value) {
      this.quote = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEscape() {
    return this.escape;
  }

  public TCopyParams setEscape(@org.apache.thrift.annotation.Nullable java.lang.String escape) {
    this.escape = escape;
    return this;
  }

  public void unsetEscape() {
    this.escape = null;
  }

  /** Returns true if field escape is set (has been assigned a value) and false otherwise */
  public boolean isSetEscape() {
    return this.escape != null;
  }

  public void setEscapeIsSet(boolean value) {
    if (!value) {
      this.escape = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLine_delim() {
    return this.line_delim;
  }

  public TCopyParams setLine_delim(@org.apache.thrift.annotation.Nullable java.lang.String line_delim) {
    this.line_delim = line_delim;
    return this;
  }

  public void unsetLine_delim() {
    this.line_delim = null;
  }

  /** Returns true if field line_delim is set (has been assigned a value) and false otherwise */
  public boolean isSetLine_delim() {
    return this.line_delim != null;
  }

  public void setLine_delimIsSet(boolean value) {
    if (!value) {
      this.line_delim = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getArray_delim() {
    return this.array_delim;
  }

  public TCopyParams setArray_delim(@org.apache.thrift.annotation.Nullable java.lang.String array_delim) {
    this.array_delim = array_delim;
    return this;
  }

  public void unsetArray_delim() {
    this.array_delim = null;
  }

  /** Returns true if field array_delim is set (has been assigned a value) and false otherwise */
  public boolean isSetArray_delim() {
    return this.array_delim != null;
  }

  public void setArray_delimIsSet(boolean value) {
    if (!value) {
      this.array_delim = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getArray_begin() {
    return this.array_begin;
  }

  public TCopyParams setArray_begin(@org.apache.thrift.annotation.Nullable java.lang.String array_begin) {
    this.array_begin = array_begin;
    return this;
  }

  public void unsetArray_begin() {
    this.array_begin = null;
  }

  /** Returns true if field array_begin is set (has been assigned a value) and false otherwise */
  public boolean isSetArray_begin() {
    return this.array_begin != null;
  }

  public void setArray_beginIsSet(boolean value) {
    if (!value) {
      this.array_begin = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getArray_end() {
    return this.array_end;
  }

  public TCopyParams setArray_end(@org.apache.thrift.annotation.Nullable java.lang.String array_end) {
    this.array_end = array_end;
    return this;
  }

  public void unsetArray_end() {
    this.array_end = null;
  }

  /** Returns true if field array_end is set (has been assigned a value) and false otherwise */
  public boolean isSetArray_end() {
    return this.array_end != null;
  }

  public void setArray_endIsSet(boolean value) {
    if (!value) {
      this.array_end = null;
    }
  }

  public int getThreads() {
    return this.threads;
  }

  public TCopyParams setThreads(int threads) {
    this.threads = threads;
    setThreadsIsSet(true);
    return this;
  }

  public void unsetThreads() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THREADS_ISSET_ID);
  }

  /** Returns true if field threads is set (has been assigned a value) and false otherwise */
  public boolean isSetThreads() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THREADS_ISSET_ID);
  }

  public void setThreadsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THREADS_ISSET_ID, value);
  }

  /**
   * 
   * @see TFileType
   */
  @org.apache.thrift.annotation.Nullable
  public TFileType getFile_type() {
    return this.file_type;
  }

  /**
   * 
   * @see TFileType
   */
  public TCopyParams setFile_type(@org.apache.thrift.annotation.Nullable TFileType file_type) {
    this.file_type = file_type;
    return this;
  }

  public void unsetFile_type() {
    this.file_type = null;
  }

  /** Returns true if field file_type is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_type() {
    return this.file_type != null;
  }

  public void setFile_typeIsSet(boolean value) {
    if (!value) {
      this.file_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getS3_access_key() {
    return this.s3_access_key;
  }

  public TCopyParams setS3_access_key(@org.apache.thrift.annotation.Nullable java.lang.String s3_access_key) {
    this.s3_access_key = s3_access_key;
    return this;
  }

  public void unsetS3_access_key() {
    this.s3_access_key = null;
  }

  /** Returns true if field s3_access_key is set (has been assigned a value) and false otherwise */
  public boolean isSetS3_access_key() {
    return this.s3_access_key != null;
  }

  public void setS3_access_keyIsSet(boolean value) {
    if (!value) {
      this.s3_access_key = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getS3_secret_key() {
    return this.s3_secret_key;
  }

  public TCopyParams setS3_secret_key(@org.apache.thrift.annotation.Nullable java.lang.String s3_secret_key) {
    this.s3_secret_key = s3_secret_key;
    return this;
  }

  public void unsetS3_secret_key() {
    this.s3_secret_key = null;
  }

  /** Returns true if field s3_secret_key is set (has been assigned a value) and false otherwise */
  public boolean isSetS3_secret_key() {
    return this.s3_secret_key != null;
  }

  public void setS3_secret_keyIsSet(boolean value) {
    if (!value) {
      this.s3_secret_key = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getS3_region() {
    return this.s3_region;
  }

  public TCopyParams setS3_region(@org.apache.thrift.annotation.Nullable java.lang.String s3_region) {
    this.s3_region = s3_region;
    return this;
  }

  public void unsetS3_region() {
    this.s3_region = null;
  }

  /** Returns true if field s3_region is set (has been assigned a value) and false otherwise */
  public boolean isSetS3_region() {
    return this.s3_region != null;
  }

  public void setS3_regionIsSet(boolean value) {
    if (!value) {
      this.s3_region = null;
    }
  }

  /**
   * 
   * @see com.omnisci.thrift.server.TEncodingType
   */
  @org.apache.thrift.annotation.Nullable
  public com.omnisci.thrift.server.TEncodingType getGeo_coords_encoding() {
    return this.geo_coords_encoding;
  }

  /**
   * 
   * @see com.omnisci.thrift.server.TEncodingType
   */
  public TCopyParams setGeo_coords_encoding(@org.apache.thrift.annotation.Nullable com.omnisci.thrift.server.TEncodingType geo_coords_encoding) {
    this.geo_coords_encoding = geo_coords_encoding;
    return this;
  }

  public void unsetGeo_coords_encoding() {
    this.geo_coords_encoding = null;
  }

  /** Returns true if field geo_coords_encoding is set (has been assigned a value) and false otherwise */
  public boolean isSetGeo_coords_encoding() {
    return this.geo_coords_encoding != null;
  }

  public void setGeo_coords_encodingIsSet(boolean value) {
    if (!value) {
      this.geo_coords_encoding = null;
    }
  }

  public int getGeo_coords_comp_param() {
    return this.geo_coords_comp_param;
  }

  public TCopyParams setGeo_coords_comp_param(int geo_coords_comp_param) {
    this.geo_coords_comp_param = geo_coords_comp_param;
    setGeo_coords_comp_paramIsSet(true);
    return this;
  }

  public void unsetGeo_coords_comp_param() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GEO_COORDS_COMP_PARAM_ISSET_ID);
  }

  /** Returns true if field geo_coords_comp_param is set (has been assigned a value) and false otherwise */
  public boolean isSetGeo_coords_comp_param() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GEO_COORDS_COMP_PARAM_ISSET_ID);
  }

  public void setGeo_coords_comp_paramIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GEO_COORDS_COMP_PARAM_ISSET_ID, value);
  }

  /**
   * 
   * @see com.omnisci.thrift.server.TDatumType
   */
  @org.apache.thrift.annotation.Nullable
  public com.omnisci.thrift.server.TDatumType getGeo_coords_type() {
    return this.geo_coords_type;
  }

  /**
   * 
   * @see com.omnisci.thrift.server.TDatumType
   */
  public TCopyParams setGeo_coords_type(@org.apache.thrift.annotation.Nullable com.omnisci.thrift.server.TDatumType geo_coords_type) {
    this.geo_coords_type = geo_coords_type;
    return this;
  }

  public void unsetGeo_coords_type() {
    this.geo_coords_type = null;
  }

  /** Returns true if field geo_coords_type is set (has been assigned a value) and false otherwise */
  public boolean isSetGeo_coords_type() {
    return this.geo_coords_type != null;
  }

  public void setGeo_coords_typeIsSet(boolean value) {
    if (!value) {
      this.geo_coords_type = null;
    }
  }

  public int getGeo_coords_srid() {
    return this.geo_coords_srid;
  }

  public TCopyParams setGeo_coords_srid(int geo_coords_srid) {
    this.geo_coords_srid = geo_coords_srid;
    setGeo_coords_sridIsSet(true);
    return this;
  }

  public void unsetGeo_coords_srid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GEO_COORDS_SRID_ISSET_ID);
  }

  /** Returns true if field geo_coords_srid is set (has been assigned a value) and false otherwise */
  public boolean isSetGeo_coords_srid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GEO_COORDS_SRID_ISSET_ID);
  }

  public void setGeo_coords_sridIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GEO_COORDS_SRID_ISSET_ID, value);
  }

  public boolean isSanitize_column_names() {
    return this.sanitize_column_names;
  }

  public TCopyParams setSanitize_column_names(boolean sanitize_column_names) {
    this.sanitize_column_names = sanitize_column_names;
    setSanitize_column_namesIsSet(true);
    return this;
  }

  public void unsetSanitize_column_names() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SANITIZE_COLUMN_NAMES_ISSET_ID);
  }

  /** Returns true if field sanitize_column_names is set (has been assigned a value) and false otherwise */
  public boolean isSetSanitize_column_names() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SANITIZE_COLUMN_NAMES_ISSET_ID);
  }

  public void setSanitize_column_namesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SANITIZE_COLUMN_NAMES_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getGeo_layer_name() {
    return this.geo_layer_name;
  }

  public TCopyParams setGeo_layer_name(@org.apache.thrift.annotation.Nullable java.lang.String geo_layer_name) {
    this.geo_layer_name = geo_layer_name;
    return this;
  }

  public void unsetGeo_layer_name() {
    this.geo_layer_name = null;
  }

  /** Returns true if field geo_layer_name is set (has been assigned a value) and false otherwise */
  public boolean isSetGeo_layer_name() {
    return this.geo_layer_name != null;
  }

  public void setGeo_layer_nameIsSet(boolean value) {
    if (!value) {
      this.geo_layer_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getS3_endpoint() {
    return this.s3_endpoint;
  }

  public TCopyParams setS3_endpoint(@org.apache.thrift.annotation.Nullable java.lang.String s3_endpoint) {
    this.s3_endpoint = s3_endpoint;
    return this;
  }

  public void unsetS3_endpoint() {
    this.s3_endpoint = null;
  }

  /** Returns true if field s3_endpoint is set (has been assigned a value) and false otherwise */
  public boolean isSetS3_endpoint() {
    return this.s3_endpoint != null;
  }

  public void setS3_endpointIsSet(boolean value) {
    if (!value) {
      this.s3_endpoint = null;
    }
  }

  public boolean isGeo_assign_render_groups() {
    return this.geo_assign_render_groups;
  }

  public TCopyParams setGeo_assign_render_groups(boolean geo_assign_render_groups) {
    this.geo_assign_render_groups = geo_assign_render_groups;
    setGeo_assign_render_groupsIsSet(true);
    return this;
  }

  public void unsetGeo_assign_render_groups() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GEO_ASSIGN_RENDER_GROUPS_ISSET_ID);
  }

  /** Returns true if field geo_assign_render_groups is set (has been assigned a value) and false otherwise */
  public boolean isSetGeo_assign_render_groups() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GEO_ASSIGN_RENDER_GROUPS_ISSET_ID);
  }

  public void setGeo_assign_render_groupsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GEO_ASSIGN_RENDER_GROUPS_ISSET_ID, value);
  }

  public boolean isGeo_explode_collections() {
    return this.geo_explode_collections;
  }

  public TCopyParams setGeo_explode_collections(boolean geo_explode_collections) {
    this.geo_explode_collections = geo_explode_collections;
    setGeo_explode_collectionsIsSet(true);
    return this;
  }

  public void unsetGeo_explode_collections() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GEO_EXPLODE_COLLECTIONS_ISSET_ID);
  }

  /** Returns true if field geo_explode_collections is set (has been assigned a value) and false otherwise */
  public boolean isSetGeo_explode_collections() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GEO_EXPLODE_COLLECTIONS_ISSET_ID);
  }

  public void setGeo_explode_collectionsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GEO_EXPLODE_COLLECTIONS_ISSET_ID, value);
  }

  public int getSource_srid() {
    return this.source_srid;
  }

  public TCopyParams setSource_srid(int source_srid) {
    this.source_srid = source_srid;
    setSource_sridIsSet(true);
    return this;
  }

  public void unsetSource_srid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOURCE_SRID_ISSET_ID);
  }

  /** Returns true if field source_srid is set (has been assigned a value) and false otherwise */
  public boolean isSetSource_srid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOURCE_SRID_ISSET_ID);
  }

  public void setSource_sridIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOURCE_SRID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getS3_session_token() {
    return this.s3_session_token;
  }

  public TCopyParams setS3_session_token(@org.apache.thrift.annotation.Nullable java.lang.String s3_session_token) {
    this.s3_session_token = s3_session_token;
    return this;
  }

  public void unsetS3_session_token() {
    this.s3_session_token = null;
  }

  /** Returns true if field s3_session_token is set (has been assigned a value) and false otherwise */
  public boolean isSetS3_session_token() {
    return this.s3_session_token != null;
  }

  public void setS3_session_tokenIsSet(boolean value) {
    if (!value) {
      this.s3_session_token = null;
    }
  }

  /**
   * 
   * @see TRasterPointType
   */
  @org.apache.thrift.annotation.Nullable
  public TRasterPointType getRaster_point_type() {
    return this.raster_point_type;
  }

  /**
   * 
   * @see TRasterPointType
   */
  public TCopyParams setRaster_point_type(@org.apache.thrift.annotation.Nullable TRasterPointType raster_point_type) {
    this.raster_point_type = raster_point_type;
    return this;
  }

  public void unsetRaster_point_type() {
    this.raster_point_type = null;
  }

  /** Returns true if field raster_point_type is set (has been assigned a value) and false otherwise */
  public boolean isSetRaster_point_type() {
    return this.raster_point_type != null;
  }

  public void setRaster_point_typeIsSet(boolean value) {
    if (!value) {
      this.raster_point_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRaster_import_bands() {
    return this.raster_import_bands;
  }

  public TCopyParams setRaster_import_bands(@org.apache.thrift.annotation.Nullable java.lang.String raster_import_bands) {
    this.raster_import_bands = raster_import_bands;
    return this;
  }

  public void unsetRaster_import_bands() {
    this.raster_import_bands = null;
  }

  /** Returns true if field raster_import_bands is set (has been assigned a value) and false otherwise */
  public boolean isSetRaster_import_bands() {
    return this.raster_import_bands != null;
  }

  public void setRaster_import_bandsIsSet(boolean value) {
    if (!value) {
      this.raster_import_bands = null;
    }
  }

  public int getRaster_scanlines_per_thread() {
    return this.raster_scanlines_per_thread;
  }

  public TCopyParams setRaster_scanlines_per_thread(int raster_scanlines_per_thread) {
    this.raster_scanlines_per_thread = raster_scanlines_per_thread;
    setRaster_scanlines_per_threadIsSet(true);
    return this;
  }

  public void unsetRaster_scanlines_per_thread() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RASTER_SCANLINES_PER_THREAD_ISSET_ID);
  }

  /** Returns true if field raster_scanlines_per_thread is set (has been assigned a value) and false otherwise */
  public boolean isSetRaster_scanlines_per_thread() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RASTER_SCANLINES_PER_THREAD_ISSET_ID);
  }

  public void setRaster_scanlines_per_threadIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RASTER_SCANLINES_PER_THREAD_ISSET_ID, value);
  }

  /**
   * 
   * @see TRasterPointTransform
   */
  @org.apache.thrift.annotation.Nullable
  public TRasterPointTransform getRaster_point_transform() {
    return this.raster_point_transform;
  }

  /**
   * 
   * @see TRasterPointTransform
   */
  public TCopyParams setRaster_point_transform(@org.apache.thrift.annotation.Nullable TRasterPointTransform raster_point_transform) {
    this.raster_point_transform = raster_point_transform;
    return this;
  }

  public void unsetRaster_point_transform() {
    this.raster_point_transform = null;
  }

  /** Returns true if field raster_point_transform is set (has been assigned a value) and false otherwise */
  public boolean isSetRaster_point_transform() {
    return this.raster_point_transform != null;
  }

  public void setRaster_point_transformIsSet(boolean value) {
    if (!value) {
      this.raster_point_transform = null;
    }
  }

  public boolean isRaster_point_compute_angle() {
    return this.raster_point_compute_angle;
  }

  public TCopyParams setRaster_point_compute_angle(boolean raster_point_compute_angle) {
    this.raster_point_compute_angle = raster_point_compute_angle;
    setRaster_point_compute_angleIsSet(true);
    return this;
  }

  public void unsetRaster_point_compute_angle() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RASTER_POINT_COMPUTE_ANGLE_ISSET_ID);
  }

  /** Returns true if field raster_point_compute_angle is set (has been assigned a value) and false otherwise */
  public boolean isSetRaster_point_compute_angle() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RASTER_POINT_COMPUTE_ANGLE_ISSET_ID);
  }

  public void setRaster_point_compute_angleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RASTER_POINT_COMPUTE_ANGLE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRaster_import_dimensions() {
    return this.raster_import_dimensions;
  }

  public TCopyParams setRaster_import_dimensions(@org.apache.thrift.annotation.Nullable java.lang.String raster_import_dimensions) {
    this.raster_import_dimensions = raster_import_dimensions;
    return this;
  }

  public void unsetRaster_import_dimensions() {
    this.raster_import_dimensions = null;
  }

  /** Returns true if field raster_import_dimensions is set (has been assigned a value) and false otherwise */
  public boolean isSetRaster_import_dimensions() {
    return this.raster_import_dimensions != null;
  }

  public void setRaster_import_dimensionsIsSet(boolean value) {
    if (!value) {
      this.raster_import_dimensions = null;
    }
  }

  public boolean isUse_source_type() {
    return this.use_source_type;
  }

  public TCopyParams setUse_source_type(boolean use_source_type) {
    this.use_source_type = use_source_type;
    setUse_source_typeIsSet(true);
    return this;
  }

  public void unsetUse_source_type() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_SOURCE_TYPE_ISSET_ID);
  }

  /** Returns true if field use_source_type is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_source_type() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_SOURCE_TYPE_ISSET_ID);
  }

  public void setUse_source_typeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_SOURCE_TYPE_ISSET_ID, value);
  }

  /**
   * 
   * @see TSourceType
   */
  @org.apache.thrift.annotation.Nullable
  public TSourceType getSource_type() {
    return this.source_type;
  }

  /**
   * 
   * @see TSourceType
   */
  public TCopyParams setSource_type(@org.apache.thrift.annotation.Nullable TSourceType source_type) {
    this.source_type = source_type;
    return this;
  }

  public void unsetSource_type() {
    this.source_type = null;
  }

  /** Returns true if field source_type is set (has been assigned a value) and false otherwise */
  public boolean isSetSource_type() {
    return this.source_type != null;
  }

  public void setSource_typeIsSet(boolean value) {
    if (!value) {
      this.source_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOdbc_dsn() {
    return this.odbc_dsn;
  }

  public TCopyParams setOdbc_dsn(@org.apache.thrift.annotation.Nullable java.lang.String odbc_dsn) {
    this.odbc_dsn = odbc_dsn;
    return this;
  }

  public void unsetOdbc_dsn() {
    this.odbc_dsn = null;
  }

  /** Returns true if field odbc_dsn is set (has been assigned a value) and false otherwise */
  public boolean isSetOdbc_dsn() {
    return this.odbc_dsn != null;
  }

  public void setOdbc_dsnIsSet(boolean value) {
    if (!value) {
      this.odbc_dsn = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOdbc_connection_string() {
    return this.odbc_connection_string;
  }

  public TCopyParams setOdbc_connection_string(@org.apache.thrift.annotation.Nullable java.lang.String odbc_connection_string) {
    this.odbc_connection_string = odbc_connection_string;
    return this;
  }

  public void unsetOdbc_connection_string() {
    this.odbc_connection_string = null;
  }

  /** Returns true if field odbc_connection_string is set (has been assigned a value) and false otherwise */
  public boolean isSetOdbc_connection_string() {
    return this.odbc_connection_string != null;
  }

  public void setOdbc_connection_stringIsSet(boolean value) {
    if (!value) {
      this.odbc_connection_string = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOdbc_sql_select() {
    return this.odbc_sql_select;
  }

  public TCopyParams setOdbc_sql_select(@org.apache.thrift.annotation.Nullable java.lang.String odbc_sql_select) {
    this.odbc_sql_select = odbc_sql_select;
    return this;
  }

  public void unsetOdbc_sql_select() {
    this.odbc_sql_select = null;
  }

  /** Returns true if field odbc_sql_select is set (has been assigned a value) and false otherwise */
  public boolean isSetOdbc_sql_select() {
    return this.odbc_sql_select != null;
  }

  public void setOdbc_sql_selectIsSet(boolean value) {
    if (!value) {
      this.odbc_sql_select = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOdbc_username() {
    return this.odbc_username;
  }

  public TCopyParams setOdbc_username(@org.apache.thrift.annotation.Nullable java.lang.String odbc_username) {
    this.odbc_username = odbc_username;
    return this;
  }

  public void unsetOdbc_username() {
    this.odbc_username = null;
  }

  /** Returns true if field odbc_username is set (has been assigned a value) and false otherwise */
  public boolean isSetOdbc_username() {
    return this.odbc_username != null;
  }

  public void setOdbc_usernameIsSet(boolean value) {
    if (!value) {
      this.odbc_username = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOdbc_password() {
    return this.odbc_password;
  }

  public TCopyParams setOdbc_password(@org.apache.thrift.annotation.Nullable java.lang.String odbc_password) {
    this.odbc_password = odbc_password;
    return this;
  }

  public void unsetOdbc_password() {
    this.odbc_password = null;
  }

  /** Returns true if field odbc_password is set (has been assigned a value) and false otherwise */
  public boolean isSetOdbc_password() {
    return this.odbc_password != null;
  }

  public void setOdbc_passwordIsSet(boolean value) {
    if (!value) {
      this.odbc_password = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOdbc_credential_string() {
    return this.odbc_credential_string;
  }

  public TCopyParams setOdbc_credential_string(@org.apache.thrift.annotation.Nullable java.lang.String odbc_credential_string) {
    this.odbc_credential_string = odbc_credential_string;
    return this;
  }

  public void unsetOdbc_credential_string() {
    this.odbc_credential_string = null;
  }

  /** Returns true if field odbc_credential_string is set (has been assigned a value) and false otherwise */
  public boolean isSetOdbc_credential_string() {
    return this.odbc_credential_string != null;
  }

  public void setOdbc_credential_stringIsSet(boolean value) {
    if (!value) {
      this.odbc_credential_string = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAdd_metadata_columns() {
    return this.add_metadata_columns;
  }

  public TCopyParams setAdd_metadata_columns(@org.apache.thrift.annotation.Nullable java.lang.String add_metadata_columns) {
    this.add_metadata_columns = add_metadata_columns;
    return this;
  }

  public void unsetAdd_metadata_columns() {
    this.add_metadata_columns = null;
  }

  /** Returns true if field add_metadata_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetAdd_metadata_columns() {
    return this.add_metadata_columns != null;
  }

  public void setAdd_metadata_columnsIsSet(boolean value) {
    if (!value) {
      this.add_metadata_columns = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DELIMITER:
      if (value == null) {
        unsetDelimiter();
      } else {
        setDelimiter((java.lang.String)value);
      }
      break;

    case NULL_STR:
      if (value == null) {
        unsetNull_str();
      } else {
        setNull_str((java.lang.String)value);
      }
      break;

    case HAS_HEADER:
      if (value == null) {
        unsetHas_header();
      } else {
        setHas_header((TImportHeaderRow)value);
      }
      break;

    case QUOTED:
      if (value == null) {
        unsetQuoted();
      } else {
        setQuoted((java.lang.Boolean)value);
      }
      break;

    case QUOTE:
      if (value == null) {
        unsetQuote();
      } else {
        setQuote((java.lang.String)value);
      }
      break;

    case ESCAPE:
      if (value == null) {
        unsetEscape();
      } else {
        setEscape((java.lang.String)value);
      }
      break;

    case LINE_DELIM:
      if (value == null) {
        unsetLine_delim();
      } else {
        setLine_delim((java.lang.String)value);
      }
      break;

    case ARRAY_DELIM:
      if (value == null) {
        unsetArray_delim();
      } else {
        setArray_delim((java.lang.String)value);
      }
      break;

    case ARRAY_BEGIN:
      if (value == null) {
        unsetArray_begin();
      } else {
        setArray_begin((java.lang.String)value);
      }
      break;

    case ARRAY_END:
      if (value == null) {
        unsetArray_end();
      } else {
        setArray_end((java.lang.String)value);
      }
      break;

    case THREADS:
      if (value == null) {
        unsetThreads();
      } else {
        setThreads((java.lang.Integer)value);
      }
      break;

    case FILE_TYPE:
      if (value == null) {
        unsetFile_type();
      } else {
        setFile_type((TFileType)value);
      }
      break;

    case S3_ACCESS_KEY:
      if (value == null) {
        unsetS3_access_key();
      } else {
        setS3_access_key((java.lang.String)value);
      }
      break;

    case S3_SECRET_KEY:
      if (value == null) {
        unsetS3_secret_key();
      } else {
        setS3_secret_key((java.lang.String)value);
      }
      break;

    case S3_REGION:
      if (value == null) {
        unsetS3_region();
      } else {
        setS3_region((java.lang.String)value);
      }
      break;

    case GEO_COORDS_ENCODING:
      if (value == null) {
        unsetGeo_coords_encoding();
      } else {
        setGeo_coords_encoding((com.omnisci.thrift.server.TEncodingType)value);
      }
      break;

    case GEO_COORDS_COMP_PARAM:
      if (value == null) {
        unsetGeo_coords_comp_param();
      } else {
        setGeo_coords_comp_param((java.lang.Integer)value);
      }
      break;

    case GEO_COORDS_TYPE:
      if (value == null) {
        unsetGeo_coords_type();
      } else {
        setGeo_coords_type((com.omnisci.thrift.server.TDatumType)value);
      }
      break;

    case GEO_COORDS_SRID:
      if (value == null) {
        unsetGeo_coords_srid();
      } else {
        setGeo_coords_srid((java.lang.Integer)value);
      }
      break;

    case SANITIZE_COLUMN_NAMES:
      if (value == null) {
        unsetSanitize_column_names();
      } else {
        setSanitize_column_names((java.lang.Boolean)value);
      }
      break;

    case GEO_LAYER_NAME:
      if (value == null) {
        unsetGeo_layer_name();
      } else {
        setGeo_layer_name((java.lang.String)value);
      }
      break;

    case S3_ENDPOINT:
      if (value == null) {
        unsetS3_endpoint();
      } else {
        setS3_endpoint((java.lang.String)value);
      }
      break;

    case GEO_ASSIGN_RENDER_GROUPS:
      if (value == null) {
        unsetGeo_assign_render_groups();
      } else {
        setGeo_assign_render_groups((java.lang.Boolean)value);
      }
      break;

    case GEO_EXPLODE_COLLECTIONS:
      if (value == null) {
        unsetGeo_explode_collections();
      } else {
        setGeo_explode_collections((java.lang.Boolean)value);
      }
      break;

    case SOURCE_SRID:
      if (value == null) {
        unsetSource_srid();
      } else {
        setSource_srid((java.lang.Integer)value);
      }
      break;

    case S3_SESSION_TOKEN:
      if (value == null) {
        unsetS3_session_token();
      } else {
        setS3_session_token((java.lang.String)value);
      }
      break;

    case RASTER_POINT_TYPE:
      if (value == null) {
        unsetRaster_point_type();
      } else {
        setRaster_point_type((TRasterPointType)value);
      }
      break;

    case RASTER_IMPORT_BANDS:
      if (value == null) {
        unsetRaster_import_bands();
      } else {
        setRaster_import_bands((java.lang.String)value);
      }
      break;

    case RASTER_SCANLINES_PER_THREAD:
      if (value == null) {
        unsetRaster_scanlines_per_thread();
      } else {
        setRaster_scanlines_per_thread((java.lang.Integer)value);
      }
      break;

    case RASTER_POINT_TRANSFORM:
      if (value == null) {
        unsetRaster_point_transform();
      } else {
        setRaster_point_transform((TRasterPointTransform)value);
      }
      break;

    case RASTER_POINT_COMPUTE_ANGLE:
      if (value == null) {
        unsetRaster_point_compute_angle();
      } else {
        setRaster_point_compute_angle((java.lang.Boolean)value);
      }
      break;

    case RASTER_IMPORT_DIMENSIONS:
      if (value == null) {
        unsetRaster_import_dimensions();
      } else {
        setRaster_import_dimensions((java.lang.String)value);
      }
      break;

    case USE_SOURCE_TYPE:
      if (value == null) {
        unsetUse_source_type();
      } else {
        setUse_source_type((java.lang.Boolean)value);
      }
      break;

    case SOURCE_TYPE:
      if (value == null) {
        unsetSource_type();
      } else {
        setSource_type((TSourceType)value);
      }
      break;

    case ODBC_DSN:
      if (value == null) {
        unsetOdbc_dsn();
      } else {
        setOdbc_dsn((java.lang.String)value);
      }
      break;

    case ODBC_CONNECTION_STRING:
      if (value == null) {
        unsetOdbc_connection_string();
      } else {
        setOdbc_connection_string((java.lang.String)value);
      }
      break;

    case ODBC_SQL_SELECT:
      if (value == null) {
        unsetOdbc_sql_select();
      } else {
        setOdbc_sql_select((java.lang.String)value);
      }
      break;

    case ODBC_USERNAME:
      if (value == null) {
        unsetOdbc_username();
      } else {
        setOdbc_username((java.lang.String)value);
      }
      break;

    case ODBC_PASSWORD:
      if (value == null) {
        unsetOdbc_password();
      } else {
        setOdbc_password((java.lang.String)value);
      }
      break;

    case ODBC_CREDENTIAL_STRING:
      if (value == null) {
        unsetOdbc_credential_string();
      } else {
        setOdbc_credential_string((java.lang.String)value);
      }
      break;

    case ADD_METADATA_COLUMNS:
      if (value == null) {
        unsetAdd_metadata_columns();
      } else {
        setAdd_metadata_columns((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DELIMITER:
      return getDelimiter();

    case NULL_STR:
      return getNull_str();

    case HAS_HEADER:
      return getHas_header();

    case QUOTED:
      return isQuoted();

    case QUOTE:
      return getQuote();

    case ESCAPE:
      return getEscape();

    case LINE_DELIM:
      return getLine_delim();

    case ARRAY_DELIM:
      return getArray_delim();

    case ARRAY_BEGIN:
      return getArray_begin();

    case ARRAY_END:
      return getArray_end();

    case THREADS:
      return getThreads();

    case FILE_TYPE:
      return getFile_type();

    case S3_ACCESS_KEY:
      return getS3_access_key();

    case S3_SECRET_KEY:
      return getS3_secret_key();

    case S3_REGION:
      return getS3_region();

    case GEO_COORDS_ENCODING:
      return getGeo_coords_encoding();

    case GEO_COORDS_COMP_PARAM:
      return getGeo_coords_comp_param();

    case GEO_COORDS_TYPE:
      return getGeo_coords_type();

    case GEO_COORDS_SRID:
      return getGeo_coords_srid();

    case SANITIZE_COLUMN_NAMES:
      return isSanitize_column_names();

    case GEO_LAYER_NAME:
      return getGeo_layer_name();

    case S3_ENDPOINT:
      return getS3_endpoint();

    case GEO_ASSIGN_RENDER_GROUPS:
      return isGeo_assign_render_groups();

    case GEO_EXPLODE_COLLECTIONS:
      return isGeo_explode_collections();

    case SOURCE_SRID:
      return getSource_srid();

    case S3_SESSION_TOKEN:
      return getS3_session_token();

    case RASTER_POINT_TYPE:
      return getRaster_point_type();

    case RASTER_IMPORT_BANDS:
      return getRaster_import_bands();

    case RASTER_SCANLINES_PER_THREAD:
      return getRaster_scanlines_per_thread();

    case RASTER_POINT_TRANSFORM:
      return getRaster_point_transform();

    case RASTER_POINT_COMPUTE_ANGLE:
      return isRaster_point_compute_angle();

    case RASTER_IMPORT_DIMENSIONS:
      return getRaster_import_dimensions();

    case USE_SOURCE_TYPE:
      return isUse_source_type();

    case SOURCE_TYPE:
      return getSource_type();

    case ODBC_DSN:
      return getOdbc_dsn();

    case ODBC_CONNECTION_STRING:
      return getOdbc_connection_string();

    case ODBC_SQL_SELECT:
      return getOdbc_sql_select();

    case ODBC_USERNAME:
      return getOdbc_username();

    case ODBC_PASSWORD:
      return getOdbc_password();

    case ODBC_CREDENTIAL_STRING:
      return getOdbc_credential_string();

    case ADD_METADATA_COLUMNS:
      return getAdd_metadata_columns();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DELIMITER:
      return isSetDelimiter();
    case NULL_STR:
      return isSetNull_str();
    case HAS_HEADER:
      return isSetHas_header();
    case QUOTED:
      return isSetQuoted();
    case QUOTE:
      return isSetQuote();
    case ESCAPE:
      return isSetEscape();
    case LINE_DELIM:
      return isSetLine_delim();
    case ARRAY_DELIM:
      return isSetArray_delim();
    case ARRAY_BEGIN:
      return isSetArray_begin();
    case ARRAY_END:
      return isSetArray_end();
    case THREADS:
      return isSetThreads();
    case FILE_TYPE:
      return isSetFile_type();
    case S3_ACCESS_KEY:
      return isSetS3_access_key();
    case S3_SECRET_KEY:
      return isSetS3_secret_key();
    case S3_REGION:
      return isSetS3_region();
    case GEO_COORDS_ENCODING:
      return isSetGeo_coords_encoding();
    case GEO_COORDS_COMP_PARAM:
      return isSetGeo_coords_comp_param();
    case GEO_COORDS_TYPE:
      return isSetGeo_coords_type();
    case GEO_COORDS_SRID:
      return isSetGeo_coords_srid();
    case SANITIZE_COLUMN_NAMES:
      return isSetSanitize_column_names();
    case GEO_LAYER_NAME:
      return isSetGeo_layer_name();
    case S3_ENDPOINT:
      return isSetS3_endpoint();
    case GEO_ASSIGN_RENDER_GROUPS:
      return isSetGeo_assign_render_groups();
    case GEO_EXPLODE_COLLECTIONS:
      return isSetGeo_explode_collections();
    case SOURCE_SRID:
      return isSetSource_srid();
    case S3_SESSION_TOKEN:
      return isSetS3_session_token();
    case RASTER_POINT_TYPE:
      return isSetRaster_point_type();
    case RASTER_IMPORT_BANDS:
      return isSetRaster_import_bands();
    case RASTER_SCANLINES_PER_THREAD:
      return isSetRaster_scanlines_per_thread();
    case RASTER_POINT_TRANSFORM:
      return isSetRaster_point_transform();
    case RASTER_POINT_COMPUTE_ANGLE:
      return isSetRaster_point_compute_angle();
    case RASTER_IMPORT_DIMENSIONS:
      return isSetRaster_import_dimensions();
    case USE_SOURCE_TYPE:
      return isSetUse_source_type();
    case SOURCE_TYPE:
      return isSetSource_type();
    case ODBC_DSN:
      return isSetOdbc_dsn();
    case ODBC_CONNECTION_STRING:
      return isSetOdbc_connection_string();
    case ODBC_SQL_SELECT:
      return isSetOdbc_sql_select();
    case ODBC_USERNAME:
      return isSetOdbc_username();
    case ODBC_PASSWORD:
      return isSetOdbc_password();
    case ODBC_CREDENTIAL_STRING:
      return isSetOdbc_credential_string();
    case ADD_METADATA_COLUMNS:
      return isSetAdd_metadata_columns();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TCopyParams)
      return this.equals((TCopyParams)that);
    return false;
  }

  public boolean equals(TCopyParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_delimiter = true && this.isSetDelimiter();
    boolean that_present_delimiter = true && that.isSetDelimiter();
    if (this_present_delimiter || that_present_delimiter) {
      if (!(this_present_delimiter && that_present_delimiter))
        return false;
      if (!this.delimiter.equals(that.delimiter))
        return false;
    }

    boolean this_present_null_str = true && this.isSetNull_str();
    boolean that_present_null_str = true && that.isSetNull_str();
    if (this_present_null_str || that_present_null_str) {
      if (!(this_present_null_str && that_present_null_str))
        return false;
      if (!this.null_str.equals(that.null_str))
        return false;
    }

    boolean this_present_has_header = true && this.isSetHas_header();
    boolean that_present_has_header = true && that.isSetHas_header();
    if (this_present_has_header || that_present_has_header) {
      if (!(this_present_has_header && that_present_has_header))
        return false;
      if (!this.has_header.equals(that.has_header))
        return false;
    }

    boolean this_present_quoted = true;
    boolean that_present_quoted = true;
    if (this_present_quoted || that_present_quoted) {
      if (!(this_present_quoted && that_present_quoted))
        return false;
      if (this.quoted != that.quoted)
        return false;
    }

    boolean this_present_quote = true && this.isSetQuote();
    boolean that_present_quote = true && that.isSetQuote();
    if (this_present_quote || that_present_quote) {
      if (!(this_present_quote && that_present_quote))
        return false;
      if (!this.quote.equals(that.quote))
        return false;
    }

    boolean this_present_escape = true && this.isSetEscape();
    boolean that_present_escape = true && that.isSetEscape();
    if (this_present_escape || that_present_escape) {
      if (!(this_present_escape && that_present_escape))
        return false;
      if (!this.escape.equals(that.escape))
        return false;
    }

    boolean this_present_line_delim = true && this.isSetLine_delim();
    boolean that_present_line_delim = true && that.isSetLine_delim();
    if (this_present_line_delim || that_present_line_delim) {
      if (!(this_present_line_delim && that_present_line_delim))
        return false;
      if (!this.line_delim.equals(that.line_delim))
        return false;
    }

    boolean this_present_array_delim = true && this.isSetArray_delim();
    boolean that_present_array_delim = true && that.isSetArray_delim();
    if (this_present_array_delim || that_present_array_delim) {
      if (!(this_present_array_delim && that_present_array_delim))
        return false;
      if (!this.array_delim.equals(that.array_delim))
        return false;
    }

    boolean this_present_array_begin = true && this.isSetArray_begin();
    boolean that_present_array_begin = true && that.isSetArray_begin();
    if (this_present_array_begin || that_present_array_begin) {
      if (!(this_present_array_begin && that_present_array_begin))
        return false;
      if (!this.array_begin.equals(that.array_begin))
        return false;
    }

    boolean this_present_array_end = true && this.isSetArray_end();
    boolean that_present_array_end = true && that.isSetArray_end();
    if (this_present_array_end || that_present_array_end) {
      if (!(this_present_array_end && that_present_array_end))
        return false;
      if (!this.array_end.equals(that.array_end))
        return false;
    }

    boolean this_present_threads = true;
    boolean that_present_threads = true;
    if (this_present_threads || that_present_threads) {
      if (!(this_present_threads && that_present_threads))
        return false;
      if (this.threads != that.threads)
        return false;
    }

    boolean this_present_file_type = true && this.isSetFile_type();
    boolean that_present_file_type = true && that.isSetFile_type();
    if (this_present_file_type || that_present_file_type) {
      if (!(this_present_file_type && that_present_file_type))
        return false;
      if (!this.file_type.equals(that.file_type))
        return false;
    }

    boolean this_present_s3_access_key = true && this.isSetS3_access_key();
    boolean that_present_s3_access_key = true && that.isSetS3_access_key();
    if (this_present_s3_access_key || that_present_s3_access_key) {
      if (!(this_present_s3_access_key && that_present_s3_access_key))
        return false;
      if (!this.s3_access_key.equals(that.s3_access_key))
        return false;
    }

    boolean this_present_s3_secret_key = true && this.isSetS3_secret_key();
    boolean that_present_s3_secret_key = true && that.isSetS3_secret_key();
    if (this_present_s3_secret_key || that_present_s3_secret_key) {
      if (!(this_present_s3_secret_key && that_present_s3_secret_key))
        return false;
      if (!this.s3_secret_key.equals(that.s3_secret_key))
        return false;
    }

    boolean this_present_s3_region = true && this.isSetS3_region();
    boolean that_present_s3_region = true && that.isSetS3_region();
    if (this_present_s3_region || that_present_s3_region) {
      if (!(this_present_s3_region && that_present_s3_region))
        return false;
      if (!this.s3_region.equals(that.s3_region))
        return false;
    }

    boolean this_present_geo_coords_encoding = true && this.isSetGeo_coords_encoding();
    boolean that_present_geo_coords_encoding = true && that.isSetGeo_coords_encoding();
    if (this_present_geo_coords_encoding || that_present_geo_coords_encoding) {
      if (!(this_present_geo_coords_encoding && that_present_geo_coords_encoding))
        return false;
      if (!this.geo_coords_encoding.equals(that.geo_coords_encoding))
        return false;
    }

    boolean this_present_geo_coords_comp_param = true;
    boolean that_present_geo_coords_comp_param = true;
    if (this_present_geo_coords_comp_param || that_present_geo_coords_comp_param) {
      if (!(this_present_geo_coords_comp_param && that_present_geo_coords_comp_param))
        return false;
      if (this.geo_coords_comp_param != that.geo_coords_comp_param)
        return false;
    }

    boolean this_present_geo_coords_type = true && this.isSetGeo_coords_type();
    boolean that_present_geo_coords_type = true && that.isSetGeo_coords_type();
    if (this_present_geo_coords_type || that_present_geo_coords_type) {
      if (!(this_present_geo_coords_type && that_present_geo_coords_type))
        return false;
      if (!this.geo_coords_type.equals(that.geo_coords_type))
        return false;
    }

    boolean this_present_geo_coords_srid = true;
    boolean that_present_geo_coords_srid = true;
    if (this_present_geo_coords_srid || that_present_geo_coords_srid) {
      if (!(this_present_geo_coords_srid && that_present_geo_coords_srid))
        return false;
      if (this.geo_coords_srid != that.geo_coords_srid)
        return false;
    }

    boolean this_present_sanitize_column_names = true;
    boolean that_present_sanitize_column_names = true;
    if (this_present_sanitize_column_names || that_present_sanitize_column_names) {
      if (!(this_present_sanitize_column_names && that_present_sanitize_column_names))
        return false;
      if (this.sanitize_column_names != that.sanitize_column_names)
        return false;
    }

    boolean this_present_geo_layer_name = true && this.isSetGeo_layer_name();
    boolean that_present_geo_layer_name = true && that.isSetGeo_layer_name();
    if (this_present_geo_layer_name || that_present_geo_layer_name) {
      if (!(this_present_geo_layer_name && that_present_geo_layer_name))
        return false;
      if (!this.geo_layer_name.equals(that.geo_layer_name))
        return false;
    }

    boolean this_present_s3_endpoint = true && this.isSetS3_endpoint();
    boolean that_present_s3_endpoint = true && that.isSetS3_endpoint();
    if (this_present_s3_endpoint || that_present_s3_endpoint) {
      if (!(this_present_s3_endpoint && that_present_s3_endpoint))
        return false;
      if (!this.s3_endpoint.equals(that.s3_endpoint))
        return false;
    }

    boolean this_present_geo_assign_render_groups = true;
    boolean that_present_geo_assign_render_groups = true;
    if (this_present_geo_assign_render_groups || that_present_geo_assign_render_groups) {
      if (!(this_present_geo_assign_render_groups && that_present_geo_assign_render_groups))
        return false;
      if (this.geo_assign_render_groups != that.geo_assign_render_groups)
        return false;
    }

    boolean this_present_geo_explode_collections = true;
    boolean that_present_geo_explode_collections = true;
    if (this_present_geo_explode_collections || that_present_geo_explode_collections) {
      if (!(this_present_geo_explode_collections && that_present_geo_explode_collections))
        return false;
      if (this.geo_explode_collections != that.geo_explode_collections)
        return false;
    }

    boolean this_present_source_srid = true;
    boolean that_present_source_srid = true;
    if (this_present_source_srid || that_present_source_srid) {
      if (!(this_present_source_srid && that_present_source_srid))
        return false;
      if (this.source_srid != that.source_srid)
        return false;
    }

    boolean this_present_s3_session_token = true && this.isSetS3_session_token();
    boolean that_present_s3_session_token = true && that.isSetS3_session_token();
    if (this_present_s3_session_token || that_present_s3_session_token) {
      if (!(this_present_s3_session_token && that_present_s3_session_token))
        return false;
      if (!this.s3_session_token.equals(that.s3_session_token))
        return false;
    }

    boolean this_present_raster_point_type = true && this.isSetRaster_point_type();
    boolean that_present_raster_point_type = true && that.isSetRaster_point_type();
    if (this_present_raster_point_type || that_present_raster_point_type) {
      if (!(this_present_raster_point_type && that_present_raster_point_type))
        return false;
      if (!this.raster_point_type.equals(that.raster_point_type))
        return false;
    }

    boolean this_present_raster_import_bands = true && this.isSetRaster_import_bands();
    boolean that_present_raster_import_bands = true && that.isSetRaster_import_bands();
    if (this_present_raster_import_bands || that_present_raster_import_bands) {
      if (!(this_present_raster_import_bands && that_present_raster_import_bands))
        return false;
      if (!this.raster_import_bands.equals(that.raster_import_bands))
        return false;
    }

    boolean this_present_raster_scanlines_per_thread = true;
    boolean that_present_raster_scanlines_per_thread = true;
    if (this_present_raster_scanlines_per_thread || that_present_raster_scanlines_per_thread) {
      if (!(this_present_raster_scanlines_per_thread && that_present_raster_scanlines_per_thread))
        return false;
      if (this.raster_scanlines_per_thread != that.raster_scanlines_per_thread)
        return false;
    }

    boolean this_present_raster_point_transform = true && this.isSetRaster_point_transform();
    boolean that_present_raster_point_transform = true && that.isSetRaster_point_transform();
    if (this_present_raster_point_transform || that_present_raster_point_transform) {
      if (!(this_present_raster_point_transform && that_present_raster_point_transform))
        return false;
      if (!this.raster_point_transform.equals(that.raster_point_transform))
        return false;
    }

    boolean this_present_raster_point_compute_angle = true;
    boolean that_present_raster_point_compute_angle = true;
    if (this_present_raster_point_compute_angle || that_present_raster_point_compute_angle) {
      if (!(this_present_raster_point_compute_angle && that_present_raster_point_compute_angle))
        return false;
      if (this.raster_point_compute_angle != that.raster_point_compute_angle)
        return false;
    }

    boolean this_present_raster_import_dimensions = true && this.isSetRaster_import_dimensions();
    boolean that_present_raster_import_dimensions = true && that.isSetRaster_import_dimensions();
    if (this_present_raster_import_dimensions || that_present_raster_import_dimensions) {
      if (!(this_present_raster_import_dimensions && that_present_raster_import_dimensions))
        return false;
      if (!this.raster_import_dimensions.equals(that.raster_import_dimensions))
        return false;
    }

    boolean this_present_use_source_type = true;
    boolean that_present_use_source_type = true;
    if (this_present_use_source_type || that_present_use_source_type) {
      if (!(this_present_use_source_type && that_present_use_source_type))
        return false;
      if (this.use_source_type != that.use_source_type)
        return false;
    }

    boolean this_present_source_type = true && this.isSetSource_type();
    boolean that_present_source_type = true && that.isSetSource_type();
    if (this_present_source_type || that_present_source_type) {
      if (!(this_present_source_type && that_present_source_type))
        return false;
      if (!this.source_type.equals(that.source_type))
        return false;
    }

    boolean this_present_odbc_dsn = true && this.isSetOdbc_dsn();
    boolean that_present_odbc_dsn = true && that.isSetOdbc_dsn();
    if (this_present_odbc_dsn || that_present_odbc_dsn) {
      if (!(this_present_odbc_dsn && that_present_odbc_dsn))
        return false;
      if (!this.odbc_dsn.equals(that.odbc_dsn))
        return false;
    }

    boolean this_present_odbc_connection_string = true && this.isSetOdbc_connection_string();
    boolean that_present_odbc_connection_string = true && that.isSetOdbc_connection_string();
    if (this_present_odbc_connection_string || that_present_odbc_connection_string) {
      if (!(this_present_odbc_connection_string && that_present_odbc_connection_string))
        return false;
      if (!this.odbc_connection_string.equals(that.odbc_connection_string))
        return false;
    }

    boolean this_present_odbc_sql_select = true && this.isSetOdbc_sql_select();
    boolean that_present_odbc_sql_select = true && that.isSetOdbc_sql_select();
    if (this_present_odbc_sql_select || that_present_odbc_sql_select) {
      if (!(this_present_odbc_sql_select && that_present_odbc_sql_select))
        return false;
      if (!this.odbc_sql_select.equals(that.odbc_sql_select))
        return false;
    }

    boolean this_present_odbc_username = true && this.isSetOdbc_username();
    boolean that_present_odbc_username = true && that.isSetOdbc_username();
    if (this_present_odbc_username || that_present_odbc_username) {
      if (!(this_present_odbc_username && that_present_odbc_username))
        return false;
      if (!this.odbc_username.equals(that.odbc_username))
        return false;
    }

    boolean this_present_odbc_password = true && this.isSetOdbc_password();
    boolean that_present_odbc_password = true && that.isSetOdbc_password();
    if (this_present_odbc_password || that_present_odbc_password) {
      if (!(this_present_odbc_password && that_present_odbc_password))
        return false;
      if (!this.odbc_password.equals(that.odbc_password))
        return false;
    }

    boolean this_present_odbc_credential_string = true && this.isSetOdbc_credential_string();
    boolean that_present_odbc_credential_string = true && that.isSetOdbc_credential_string();
    if (this_present_odbc_credential_string || that_present_odbc_credential_string) {
      if (!(this_present_odbc_credential_string && that_present_odbc_credential_string))
        return false;
      if (!this.odbc_credential_string.equals(that.odbc_credential_string))
        return false;
    }

    boolean this_present_add_metadata_columns = true && this.isSetAdd_metadata_columns();
    boolean that_present_add_metadata_columns = true && that.isSetAdd_metadata_columns();
    if (this_present_add_metadata_columns || that_present_add_metadata_columns) {
      if (!(this_present_add_metadata_columns && that_present_add_metadata_columns))
        return false;
      if (!this.add_metadata_columns.equals(that.add_metadata_columns))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDelimiter()) ? 131071 : 524287);
    if (isSetDelimiter())
      hashCode = hashCode * 8191 + delimiter.hashCode();

    hashCode = hashCode * 8191 + ((isSetNull_str()) ? 131071 : 524287);
    if (isSetNull_str())
      hashCode = hashCode * 8191 + null_str.hashCode();

    hashCode = hashCode * 8191 + ((isSetHas_header()) ? 131071 : 524287);
    if (isSetHas_header())
      hashCode = hashCode * 8191 + has_header.getValue();

    hashCode = hashCode * 8191 + ((quoted) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetQuote()) ? 131071 : 524287);
    if (isSetQuote())
      hashCode = hashCode * 8191 + quote.hashCode();

    hashCode = hashCode * 8191 + ((isSetEscape()) ? 131071 : 524287);
    if (isSetEscape())
      hashCode = hashCode * 8191 + escape.hashCode();

    hashCode = hashCode * 8191 + ((isSetLine_delim()) ? 131071 : 524287);
    if (isSetLine_delim())
      hashCode = hashCode * 8191 + line_delim.hashCode();

    hashCode = hashCode * 8191 + ((isSetArray_delim()) ? 131071 : 524287);
    if (isSetArray_delim())
      hashCode = hashCode * 8191 + array_delim.hashCode();

    hashCode = hashCode * 8191 + ((isSetArray_begin()) ? 131071 : 524287);
    if (isSetArray_begin())
      hashCode = hashCode * 8191 + array_begin.hashCode();

    hashCode = hashCode * 8191 + ((isSetArray_end()) ? 131071 : 524287);
    if (isSetArray_end())
      hashCode = hashCode * 8191 + array_end.hashCode();

    hashCode = hashCode * 8191 + threads;

    hashCode = hashCode * 8191 + ((isSetFile_type()) ? 131071 : 524287);
    if (isSetFile_type())
      hashCode = hashCode * 8191 + file_type.getValue();

    hashCode = hashCode * 8191 + ((isSetS3_access_key()) ? 131071 : 524287);
    if (isSetS3_access_key())
      hashCode = hashCode * 8191 + s3_access_key.hashCode();

    hashCode = hashCode * 8191 + ((isSetS3_secret_key()) ? 131071 : 524287);
    if (isSetS3_secret_key())
      hashCode = hashCode * 8191 + s3_secret_key.hashCode();

    hashCode = hashCode * 8191 + ((isSetS3_region()) ? 131071 : 524287);
    if (isSetS3_region())
      hashCode = hashCode * 8191 + s3_region.hashCode();

    hashCode = hashCode * 8191 + ((isSetGeo_coords_encoding()) ? 131071 : 524287);
    if (isSetGeo_coords_encoding())
      hashCode = hashCode * 8191 + geo_coords_encoding.getValue();

    hashCode = hashCode * 8191 + geo_coords_comp_param;

    hashCode = hashCode * 8191 + ((isSetGeo_coords_type()) ? 131071 : 524287);
    if (isSetGeo_coords_type())
      hashCode = hashCode * 8191 + geo_coords_type.getValue();

    hashCode = hashCode * 8191 + geo_coords_srid;

    hashCode = hashCode * 8191 + ((sanitize_column_names) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetGeo_layer_name()) ? 131071 : 524287);
    if (isSetGeo_layer_name())
      hashCode = hashCode * 8191 + geo_layer_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetS3_endpoint()) ? 131071 : 524287);
    if (isSetS3_endpoint())
      hashCode = hashCode * 8191 + s3_endpoint.hashCode();

    hashCode = hashCode * 8191 + ((geo_assign_render_groups) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((geo_explode_collections) ? 131071 : 524287);

    hashCode = hashCode * 8191 + source_srid;

    hashCode = hashCode * 8191 + ((isSetS3_session_token()) ? 131071 : 524287);
    if (isSetS3_session_token())
      hashCode = hashCode * 8191 + s3_session_token.hashCode();

    hashCode = hashCode * 8191 + ((isSetRaster_point_type()) ? 131071 : 524287);
    if (isSetRaster_point_type())
      hashCode = hashCode * 8191 + raster_point_type.getValue();

    hashCode = hashCode * 8191 + ((isSetRaster_import_bands()) ? 131071 : 524287);
    if (isSetRaster_import_bands())
      hashCode = hashCode * 8191 + raster_import_bands.hashCode();

    hashCode = hashCode * 8191 + raster_scanlines_per_thread;

    hashCode = hashCode * 8191 + ((isSetRaster_point_transform()) ? 131071 : 524287);
    if (isSetRaster_point_transform())
      hashCode = hashCode * 8191 + raster_point_transform.getValue();

    hashCode = hashCode * 8191 + ((raster_point_compute_angle) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetRaster_import_dimensions()) ? 131071 : 524287);
    if (isSetRaster_import_dimensions())
      hashCode = hashCode * 8191 + raster_import_dimensions.hashCode();

    hashCode = hashCode * 8191 + ((use_source_type) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSource_type()) ? 131071 : 524287);
    if (isSetSource_type())
      hashCode = hashCode * 8191 + source_type.getValue();

    hashCode = hashCode * 8191 + ((isSetOdbc_dsn()) ? 131071 : 524287);
    if (isSetOdbc_dsn())
      hashCode = hashCode * 8191 + odbc_dsn.hashCode();

    hashCode = hashCode * 8191 + ((isSetOdbc_connection_string()) ? 131071 : 524287);
    if (isSetOdbc_connection_string())
      hashCode = hashCode * 8191 + odbc_connection_string.hashCode();

    hashCode = hashCode * 8191 + ((isSetOdbc_sql_select()) ? 131071 : 524287);
    if (isSetOdbc_sql_select())
      hashCode = hashCode * 8191 + odbc_sql_select.hashCode();

    hashCode = hashCode * 8191 + ((isSetOdbc_username()) ? 131071 : 524287);
    if (isSetOdbc_username())
      hashCode = hashCode * 8191 + odbc_username.hashCode();

    hashCode = hashCode * 8191 + ((isSetOdbc_password()) ? 131071 : 524287);
    if (isSetOdbc_password())
      hashCode = hashCode * 8191 + odbc_password.hashCode();

    hashCode = hashCode * 8191 + ((isSetOdbc_credential_string()) ? 131071 : 524287);
    if (isSetOdbc_credential_string())
      hashCode = hashCode * 8191 + odbc_credential_string.hashCode();

    hashCode = hashCode * 8191 + ((isSetAdd_metadata_columns()) ? 131071 : 524287);
    if (isSetAdd_metadata_columns())
      hashCode = hashCode * 8191 + add_metadata_columns.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TCopyParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetDelimiter(), other.isSetDelimiter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelimiter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delimiter, other.delimiter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNull_str(), other.isSetNull_str());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNull_str()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.null_str, other.null_str);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHas_header(), other.isSetHas_header());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_header()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_header, other.has_header);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuoted(), other.isSetQuoted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuoted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quoted, other.quoted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuote(), other.isSetQuote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quote, other.quote);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEscape(), other.isSetEscape());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEscape()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.escape, other.escape);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLine_delim(), other.isSetLine_delim());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLine_delim()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.line_delim, other.line_delim);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetArray_delim(), other.isSetArray_delim());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArray_delim()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.array_delim, other.array_delim);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetArray_begin(), other.isSetArray_begin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArray_begin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.array_begin, other.array_begin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetArray_end(), other.isSetArray_end());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArray_end()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.array_end, other.array_end);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetThreads(), other.isSetThreads());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThreads()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threads, other.threads);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFile_type(), other.isSetFile_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_type, other.file_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetS3_access_key(), other.isSetS3_access_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS3_access_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s3_access_key, other.s3_access_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetS3_secret_key(), other.isSetS3_secret_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS3_secret_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s3_secret_key, other.s3_secret_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetS3_region(), other.isSetS3_region());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS3_region()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s3_region, other.s3_region);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGeo_coords_encoding(), other.isSetGeo_coords_encoding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeo_coords_encoding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geo_coords_encoding, other.geo_coords_encoding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGeo_coords_comp_param(), other.isSetGeo_coords_comp_param());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeo_coords_comp_param()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geo_coords_comp_param, other.geo_coords_comp_param);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGeo_coords_type(), other.isSetGeo_coords_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeo_coords_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geo_coords_type, other.geo_coords_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGeo_coords_srid(), other.isSetGeo_coords_srid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeo_coords_srid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geo_coords_srid, other.geo_coords_srid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSanitize_column_names(), other.isSetSanitize_column_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSanitize_column_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sanitize_column_names, other.sanitize_column_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGeo_layer_name(), other.isSetGeo_layer_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeo_layer_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geo_layer_name, other.geo_layer_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetS3_endpoint(), other.isSetS3_endpoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS3_endpoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s3_endpoint, other.s3_endpoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGeo_assign_render_groups(), other.isSetGeo_assign_render_groups());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeo_assign_render_groups()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geo_assign_render_groups, other.geo_assign_render_groups);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGeo_explode_collections(), other.isSetGeo_explode_collections());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeo_explode_collections()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geo_explode_collections, other.geo_explode_collections);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSource_srid(), other.isSetSource_srid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource_srid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source_srid, other.source_srid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetS3_session_token(), other.isSetS3_session_token());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS3_session_token()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s3_session_token, other.s3_session_token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRaster_point_type(), other.isSetRaster_point_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaster_point_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.raster_point_type, other.raster_point_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRaster_import_bands(), other.isSetRaster_import_bands());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaster_import_bands()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.raster_import_bands, other.raster_import_bands);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRaster_scanlines_per_thread(), other.isSetRaster_scanlines_per_thread());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaster_scanlines_per_thread()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.raster_scanlines_per_thread, other.raster_scanlines_per_thread);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRaster_point_transform(), other.isSetRaster_point_transform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaster_point_transform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.raster_point_transform, other.raster_point_transform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRaster_point_compute_angle(), other.isSetRaster_point_compute_angle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaster_point_compute_angle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.raster_point_compute_angle, other.raster_point_compute_angle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRaster_import_dimensions(), other.isSetRaster_import_dimensions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaster_import_dimensions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.raster_import_dimensions, other.raster_import_dimensions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUse_source_type(), other.isSetUse_source_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_source_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_source_type, other.use_source_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSource_type(), other.isSetSource_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source_type, other.source_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOdbc_dsn(), other.isSetOdbc_dsn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOdbc_dsn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.odbc_dsn, other.odbc_dsn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOdbc_connection_string(), other.isSetOdbc_connection_string());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOdbc_connection_string()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.odbc_connection_string, other.odbc_connection_string);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOdbc_sql_select(), other.isSetOdbc_sql_select());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOdbc_sql_select()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.odbc_sql_select, other.odbc_sql_select);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOdbc_username(), other.isSetOdbc_username());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOdbc_username()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.odbc_username, other.odbc_username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOdbc_password(), other.isSetOdbc_password());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOdbc_password()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.odbc_password, other.odbc_password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOdbc_credential_string(), other.isSetOdbc_credential_string());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOdbc_credential_string()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.odbc_credential_string, other.odbc_credential_string);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAdd_metadata_columns(), other.isSetAdd_metadata_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdd_metadata_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.add_metadata_columns, other.add_metadata_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TCopyParams(");
    boolean first = true;

    sb.append("delimiter:");
    if (this.delimiter == null) {
      sb.append("null");
    } else {
      sb.append(this.delimiter);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("null_str:");
    if (this.null_str == null) {
      sb.append("null");
    } else {
      sb.append(this.null_str);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("has_header:");
    if (this.has_header == null) {
      sb.append("null");
    } else {
      sb.append(this.has_header);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quoted:");
    sb.append(this.quoted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quote:");
    if (this.quote == null) {
      sb.append("null");
    } else {
      sb.append(this.quote);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("escape:");
    if (this.escape == null) {
      sb.append("null");
    } else {
      sb.append(this.escape);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("line_delim:");
    if (this.line_delim == null) {
      sb.append("null");
    } else {
      sb.append(this.line_delim);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("array_delim:");
    if (this.array_delim == null) {
      sb.append("null");
    } else {
      sb.append(this.array_delim);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("array_begin:");
    if (this.array_begin == null) {
      sb.append("null");
    } else {
      sb.append(this.array_begin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("array_end:");
    if (this.array_end == null) {
      sb.append("null");
    } else {
      sb.append(this.array_end);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("threads:");
    sb.append(this.threads);
    first = false;
    if (!first) sb.append(", ");
    sb.append("file_type:");
    if (this.file_type == null) {
      sb.append("null");
    } else {
      sb.append(this.file_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("s3_access_key:");
    if (this.s3_access_key == null) {
      sb.append("null");
    } else {
      sb.append(this.s3_access_key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("s3_secret_key:");
    if (this.s3_secret_key == null) {
      sb.append("null");
    } else {
      sb.append(this.s3_secret_key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("s3_region:");
    if (this.s3_region == null) {
      sb.append("null");
    } else {
      sb.append(this.s3_region);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("geo_coords_encoding:");
    if (this.geo_coords_encoding == null) {
      sb.append("null");
    } else {
      sb.append(this.geo_coords_encoding);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("geo_coords_comp_param:");
    sb.append(this.geo_coords_comp_param);
    first = false;
    if (!first) sb.append(", ");
    sb.append("geo_coords_type:");
    if (this.geo_coords_type == null) {
      sb.append("null");
    } else {
      sb.append(this.geo_coords_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("geo_coords_srid:");
    sb.append(this.geo_coords_srid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sanitize_column_names:");
    sb.append(this.sanitize_column_names);
    first = false;
    if (!first) sb.append(", ");
    sb.append("geo_layer_name:");
    if (this.geo_layer_name == null) {
      sb.append("null");
    } else {
      sb.append(this.geo_layer_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("s3_endpoint:");
    if (this.s3_endpoint == null) {
      sb.append("null");
    } else {
      sb.append(this.s3_endpoint);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("geo_assign_render_groups:");
    sb.append(this.geo_assign_render_groups);
    first = false;
    if (!first) sb.append(", ");
    sb.append("geo_explode_collections:");
    sb.append(this.geo_explode_collections);
    first = false;
    if (!first) sb.append(", ");
    sb.append("source_srid:");
    sb.append(this.source_srid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("s3_session_token:");
    if (this.s3_session_token == null) {
      sb.append("null");
    } else {
      sb.append(this.s3_session_token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("raster_point_type:");
    if (this.raster_point_type == null) {
      sb.append("null");
    } else {
      sb.append(this.raster_point_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("raster_import_bands:");
    if (this.raster_import_bands == null) {
      sb.append("null");
    } else {
      sb.append(this.raster_import_bands);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("raster_scanlines_per_thread:");
    sb.append(this.raster_scanlines_per_thread);
    first = false;
    if (!first) sb.append(", ");
    sb.append("raster_point_transform:");
    if (this.raster_point_transform == null) {
      sb.append("null");
    } else {
      sb.append(this.raster_point_transform);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("raster_point_compute_angle:");
    sb.append(this.raster_point_compute_angle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("raster_import_dimensions:");
    if (this.raster_import_dimensions == null) {
      sb.append("null");
    } else {
      sb.append(this.raster_import_dimensions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("use_source_type:");
    sb.append(this.use_source_type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("source_type:");
    if (this.source_type == null) {
      sb.append("null");
    } else {
      sb.append(this.source_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("odbc_dsn:");
    if (this.odbc_dsn == null) {
      sb.append("null");
    } else {
      sb.append(this.odbc_dsn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("odbc_connection_string:");
    if (this.odbc_connection_string == null) {
      sb.append("null");
    } else {
      sb.append(this.odbc_connection_string);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("odbc_sql_select:");
    if (this.odbc_sql_select == null) {
      sb.append("null");
    } else {
      sb.append(this.odbc_sql_select);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("odbc_username:");
    if (this.odbc_username == null) {
      sb.append("null");
    } else {
      sb.append(this.odbc_username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("odbc_password:");
    if (this.odbc_password == null) {
      sb.append("null");
    } else {
      sb.append(this.odbc_password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("odbc_credential_string:");
    if (this.odbc_credential_string == null) {
      sb.append("null");
    } else {
      sb.append(this.odbc_credential_string);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("add_metadata_columns:");
    if (this.add_metadata_columns == null) {
      sb.append("null");
    } else {
      sb.append(this.add_metadata_columns);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCopyParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCopyParamsStandardScheme getScheme() {
      return new TCopyParamsStandardScheme();
    }
  }

  private static class TCopyParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TCopyParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCopyParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DELIMITER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.delimiter = iprot.readString();
              struct.setDelimiterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NULL_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.null_str = iprot.readString();
              struct.setNull_strIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HAS_HEADER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.has_header = com.omnisci.thrift.server.TImportHeaderRow.findByValue(iprot.readI32());
              struct.setHas_headerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUOTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.quoted = iprot.readBool();
              struct.setQuotedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.quote = iprot.readString();
              struct.setQuoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ESCAPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.escape = iprot.readString();
              struct.setEscapeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LINE_DELIM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.line_delim = iprot.readString();
              struct.setLine_delimIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ARRAY_DELIM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.array_delim = iprot.readString();
              struct.setArray_delimIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ARRAY_BEGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.array_begin = iprot.readString();
              struct.setArray_beginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ARRAY_END
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.array_end = iprot.readString();
              struct.setArray_endIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // THREADS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.threads = iprot.readI32();
              struct.setThreadsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.file_type = com.omnisci.thrift.server.TFileType.findByValue(iprot.readI32());
              struct.setFile_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // S3_ACCESS_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.s3_access_key = iprot.readString();
              struct.setS3_access_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // S3_SECRET_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.s3_secret_key = iprot.readString();
              struct.setS3_secret_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // S3_REGION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.s3_region = iprot.readString();
              struct.setS3_regionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // GEO_COORDS_ENCODING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.geo_coords_encoding = com.omnisci.thrift.server.TEncodingType.findByValue(iprot.readI32());
              struct.setGeo_coords_encodingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // GEO_COORDS_COMP_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.geo_coords_comp_param = iprot.readI32();
              struct.setGeo_coords_comp_paramIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // GEO_COORDS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.geo_coords_type = com.omnisci.thrift.server.TDatumType.findByValue(iprot.readI32());
              struct.setGeo_coords_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // GEO_COORDS_SRID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.geo_coords_srid = iprot.readI32();
              struct.setGeo_coords_sridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SANITIZE_COLUMN_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sanitize_column_names = iprot.readBool();
              struct.setSanitize_column_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // GEO_LAYER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.geo_layer_name = iprot.readString();
              struct.setGeo_layer_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // S3_ENDPOINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.s3_endpoint = iprot.readString();
              struct.setS3_endpointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // GEO_ASSIGN_RENDER_GROUPS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.geo_assign_render_groups = iprot.readBool();
              struct.setGeo_assign_render_groupsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // GEO_EXPLODE_COLLECTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.geo_explode_collections = iprot.readBool();
              struct.setGeo_explode_collectionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // SOURCE_SRID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.source_srid = iprot.readI32();
              struct.setSource_sridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // S3_SESSION_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.s3_session_token = iprot.readString();
              struct.setS3_session_tokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // RASTER_POINT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.raster_point_type = com.omnisci.thrift.server.TRasterPointType.findByValue(iprot.readI32());
              struct.setRaster_point_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // RASTER_IMPORT_BANDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.raster_import_bands = iprot.readString();
              struct.setRaster_import_bandsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // RASTER_SCANLINES_PER_THREAD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.raster_scanlines_per_thread = iprot.readI32();
              struct.setRaster_scanlines_per_threadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // RASTER_POINT_TRANSFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.raster_point_transform = com.omnisci.thrift.server.TRasterPointTransform.findByValue(iprot.readI32());
              struct.setRaster_point_transformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // RASTER_POINT_COMPUTE_ANGLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.raster_point_compute_angle = iprot.readBool();
              struct.setRaster_point_compute_angleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // RASTER_IMPORT_DIMENSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.raster_import_dimensions = iprot.readString();
              struct.setRaster_import_dimensionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // USE_SOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_source_type = iprot.readBool();
              struct.setUse_source_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // SOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.source_type = com.omnisci.thrift.server.TSourceType.findByValue(iprot.readI32());
              struct.setSource_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // ODBC_DSN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.odbc_dsn = iprot.readString();
              struct.setOdbc_dsnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // ODBC_CONNECTION_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.odbc_connection_string = iprot.readString();
              struct.setOdbc_connection_stringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // ODBC_SQL_SELECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.odbc_sql_select = iprot.readString();
              struct.setOdbc_sql_selectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // ODBC_USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.odbc_username = iprot.readString();
              struct.setOdbc_usernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // ODBC_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.odbc_password = iprot.readString();
              struct.setOdbc_passwordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // ODBC_CREDENTIAL_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.odbc_credential_string = iprot.readString();
              struct.setOdbc_credential_stringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // ADD_METADATA_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.add_metadata_columns = iprot.readString();
              struct.setAdd_metadata_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCopyParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.delimiter != null) {
        oprot.writeFieldBegin(DELIMITER_FIELD_DESC);
        oprot.writeString(struct.delimiter);
        oprot.writeFieldEnd();
      }
      if (struct.null_str != null) {
        oprot.writeFieldBegin(NULL_STR_FIELD_DESC);
        oprot.writeString(struct.null_str);
        oprot.writeFieldEnd();
      }
      if (struct.has_header != null) {
        oprot.writeFieldBegin(HAS_HEADER_FIELD_DESC);
        oprot.writeI32(struct.has_header.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUOTED_FIELD_DESC);
      oprot.writeBool(struct.quoted);
      oprot.writeFieldEnd();
      if (struct.quote != null) {
        oprot.writeFieldBegin(QUOTE_FIELD_DESC);
        oprot.writeString(struct.quote);
        oprot.writeFieldEnd();
      }
      if (struct.escape != null) {
        oprot.writeFieldBegin(ESCAPE_FIELD_DESC);
        oprot.writeString(struct.escape);
        oprot.writeFieldEnd();
      }
      if (struct.line_delim != null) {
        oprot.writeFieldBegin(LINE_DELIM_FIELD_DESC);
        oprot.writeString(struct.line_delim);
        oprot.writeFieldEnd();
      }
      if (struct.array_delim != null) {
        oprot.writeFieldBegin(ARRAY_DELIM_FIELD_DESC);
        oprot.writeString(struct.array_delim);
        oprot.writeFieldEnd();
      }
      if (struct.array_begin != null) {
        oprot.writeFieldBegin(ARRAY_BEGIN_FIELD_DESC);
        oprot.writeString(struct.array_begin);
        oprot.writeFieldEnd();
      }
      if (struct.array_end != null) {
        oprot.writeFieldBegin(ARRAY_END_FIELD_DESC);
        oprot.writeString(struct.array_end);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(THREADS_FIELD_DESC);
      oprot.writeI32(struct.threads);
      oprot.writeFieldEnd();
      if (struct.file_type != null) {
        oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.file_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.s3_access_key != null) {
        oprot.writeFieldBegin(S3_ACCESS_KEY_FIELD_DESC);
        oprot.writeString(struct.s3_access_key);
        oprot.writeFieldEnd();
      }
      if (struct.s3_secret_key != null) {
        oprot.writeFieldBegin(S3_SECRET_KEY_FIELD_DESC);
        oprot.writeString(struct.s3_secret_key);
        oprot.writeFieldEnd();
      }
      if (struct.s3_region != null) {
        oprot.writeFieldBegin(S3_REGION_FIELD_DESC);
        oprot.writeString(struct.s3_region);
        oprot.writeFieldEnd();
      }
      if (struct.geo_coords_encoding != null) {
        oprot.writeFieldBegin(GEO_COORDS_ENCODING_FIELD_DESC);
        oprot.writeI32(struct.geo_coords_encoding.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GEO_COORDS_COMP_PARAM_FIELD_DESC);
      oprot.writeI32(struct.geo_coords_comp_param);
      oprot.writeFieldEnd();
      if (struct.geo_coords_type != null) {
        oprot.writeFieldBegin(GEO_COORDS_TYPE_FIELD_DESC);
        oprot.writeI32(struct.geo_coords_type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GEO_COORDS_SRID_FIELD_DESC);
      oprot.writeI32(struct.geo_coords_srid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SANITIZE_COLUMN_NAMES_FIELD_DESC);
      oprot.writeBool(struct.sanitize_column_names);
      oprot.writeFieldEnd();
      if (struct.geo_layer_name != null) {
        oprot.writeFieldBegin(GEO_LAYER_NAME_FIELD_DESC);
        oprot.writeString(struct.geo_layer_name);
        oprot.writeFieldEnd();
      }
      if (struct.s3_endpoint != null) {
        oprot.writeFieldBegin(S3_ENDPOINT_FIELD_DESC);
        oprot.writeString(struct.s3_endpoint);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GEO_ASSIGN_RENDER_GROUPS_FIELD_DESC);
      oprot.writeBool(struct.geo_assign_render_groups);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GEO_EXPLODE_COLLECTIONS_FIELD_DESC);
      oprot.writeBool(struct.geo_explode_collections);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SOURCE_SRID_FIELD_DESC);
      oprot.writeI32(struct.source_srid);
      oprot.writeFieldEnd();
      if (struct.s3_session_token != null) {
        oprot.writeFieldBegin(S3_SESSION_TOKEN_FIELD_DESC);
        oprot.writeString(struct.s3_session_token);
        oprot.writeFieldEnd();
      }
      if (struct.raster_point_type != null) {
        oprot.writeFieldBegin(RASTER_POINT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.raster_point_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.raster_import_bands != null) {
        oprot.writeFieldBegin(RASTER_IMPORT_BANDS_FIELD_DESC);
        oprot.writeString(struct.raster_import_bands);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RASTER_SCANLINES_PER_THREAD_FIELD_DESC);
      oprot.writeI32(struct.raster_scanlines_per_thread);
      oprot.writeFieldEnd();
      if (struct.raster_point_transform != null) {
        oprot.writeFieldBegin(RASTER_POINT_TRANSFORM_FIELD_DESC);
        oprot.writeI32(struct.raster_point_transform.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RASTER_POINT_COMPUTE_ANGLE_FIELD_DESC);
      oprot.writeBool(struct.raster_point_compute_angle);
      oprot.writeFieldEnd();
      if (struct.raster_import_dimensions != null) {
        oprot.writeFieldBegin(RASTER_IMPORT_DIMENSIONS_FIELD_DESC);
        oprot.writeString(struct.raster_import_dimensions);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USE_SOURCE_TYPE_FIELD_DESC);
      oprot.writeBool(struct.use_source_type);
      oprot.writeFieldEnd();
      if (struct.source_type != null) {
        oprot.writeFieldBegin(SOURCE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.source_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.odbc_dsn != null) {
        oprot.writeFieldBegin(ODBC_DSN_FIELD_DESC);
        oprot.writeString(struct.odbc_dsn);
        oprot.writeFieldEnd();
      }
      if (struct.odbc_connection_string != null) {
        oprot.writeFieldBegin(ODBC_CONNECTION_STRING_FIELD_DESC);
        oprot.writeString(struct.odbc_connection_string);
        oprot.writeFieldEnd();
      }
      if (struct.odbc_sql_select != null) {
        oprot.writeFieldBegin(ODBC_SQL_SELECT_FIELD_DESC);
        oprot.writeString(struct.odbc_sql_select);
        oprot.writeFieldEnd();
      }
      if (struct.odbc_username != null) {
        oprot.writeFieldBegin(ODBC_USERNAME_FIELD_DESC);
        oprot.writeString(struct.odbc_username);
        oprot.writeFieldEnd();
      }
      if (struct.odbc_password != null) {
        oprot.writeFieldBegin(ODBC_PASSWORD_FIELD_DESC);
        oprot.writeString(struct.odbc_password);
        oprot.writeFieldEnd();
      }
      if (struct.odbc_credential_string != null) {
        oprot.writeFieldBegin(ODBC_CREDENTIAL_STRING_FIELD_DESC);
        oprot.writeString(struct.odbc_credential_string);
        oprot.writeFieldEnd();
      }
      if (struct.add_metadata_columns != null) {
        oprot.writeFieldBegin(ADD_METADATA_COLUMNS_FIELD_DESC);
        oprot.writeString(struct.add_metadata_columns);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCopyParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCopyParamsTupleScheme getScheme() {
      return new TCopyParamsTupleScheme();
    }
  }

  private static class TCopyParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TCopyParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCopyParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDelimiter()) {
        optionals.set(0);
      }
      if (struct.isSetNull_str()) {
        optionals.set(1);
      }
      if (struct.isSetHas_header()) {
        optionals.set(2);
      }
      if (struct.isSetQuoted()) {
        optionals.set(3);
      }
      if (struct.isSetQuote()) {
        optionals.set(4);
      }
      if (struct.isSetEscape()) {
        optionals.set(5);
      }
      if (struct.isSetLine_delim()) {
        optionals.set(6);
      }
      if (struct.isSetArray_delim()) {
        optionals.set(7);
      }
      if (struct.isSetArray_begin()) {
        optionals.set(8);
      }
      if (struct.isSetArray_end()) {
        optionals.set(9);
      }
      if (struct.isSetThreads()) {
        optionals.set(10);
      }
      if (struct.isSetFile_type()) {
        optionals.set(11);
      }
      if (struct.isSetS3_access_key()) {
        optionals.set(12);
      }
      if (struct.isSetS3_secret_key()) {
        optionals.set(13);
      }
      if (struct.isSetS3_region()) {
        optionals.set(14);
      }
      if (struct.isSetGeo_coords_encoding()) {
        optionals.set(15);
      }
      if (struct.isSetGeo_coords_comp_param()) {
        optionals.set(16);
      }
      if (struct.isSetGeo_coords_type()) {
        optionals.set(17);
      }
      if (struct.isSetGeo_coords_srid()) {
        optionals.set(18);
      }
      if (struct.isSetSanitize_column_names()) {
        optionals.set(19);
      }
      if (struct.isSetGeo_layer_name()) {
        optionals.set(20);
      }
      if (struct.isSetS3_endpoint()) {
        optionals.set(21);
      }
      if (struct.isSetGeo_assign_render_groups()) {
        optionals.set(22);
      }
      if (struct.isSetGeo_explode_collections()) {
        optionals.set(23);
      }
      if (struct.isSetSource_srid()) {
        optionals.set(24);
      }
      if (struct.isSetS3_session_token()) {
        optionals.set(25);
      }
      if (struct.isSetRaster_point_type()) {
        optionals.set(26);
      }
      if (struct.isSetRaster_import_bands()) {
        optionals.set(27);
      }
      if (struct.isSetRaster_scanlines_per_thread()) {
        optionals.set(28);
      }
      if (struct.isSetRaster_point_transform()) {
        optionals.set(29);
      }
      if (struct.isSetRaster_point_compute_angle()) {
        optionals.set(30);
      }
      if (struct.isSetRaster_import_dimensions()) {
        optionals.set(31);
      }
      if (struct.isSetUse_source_type()) {
        optionals.set(32);
      }
      if (struct.isSetSource_type()) {
        optionals.set(33);
      }
      if (struct.isSetOdbc_dsn()) {
        optionals.set(34);
      }
      if (struct.isSetOdbc_connection_string()) {
        optionals.set(35);
      }
      if (struct.isSetOdbc_sql_select()) {
        optionals.set(36);
      }
      if (struct.isSetOdbc_username()) {
        optionals.set(37);
      }
      if (struct.isSetOdbc_password()) {
        optionals.set(38);
      }
      if (struct.isSetOdbc_credential_string()) {
        optionals.set(39);
      }
      if (struct.isSetAdd_metadata_columns()) {
        optionals.set(40);
      }
      oprot.writeBitSet(optionals, 41);
      if (struct.isSetDelimiter()) {
        oprot.writeString(struct.delimiter);
      }
      if (struct.isSetNull_str()) {
        oprot.writeString(struct.null_str);
      }
      if (struct.isSetHas_header()) {
        oprot.writeI32(struct.has_header.getValue());
      }
      if (struct.isSetQuoted()) {
        oprot.writeBool(struct.quoted);
      }
      if (struct.isSetQuote()) {
        oprot.writeString(struct.quote);
      }
      if (struct.isSetEscape()) {
        oprot.writeString(struct.escape);
      }
      if (struct.isSetLine_delim()) {
        oprot.writeString(struct.line_delim);
      }
      if (struct.isSetArray_delim()) {
        oprot.writeString(struct.array_delim);
      }
      if (struct.isSetArray_begin()) {
        oprot.writeString(struct.array_begin);
      }
      if (struct.isSetArray_end()) {
        oprot.writeString(struct.array_end);
      }
      if (struct.isSetThreads()) {
        oprot.writeI32(struct.threads);
      }
      if (struct.isSetFile_type()) {
        oprot.writeI32(struct.file_type.getValue());
      }
      if (struct.isSetS3_access_key()) {
        oprot.writeString(struct.s3_access_key);
      }
      if (struct.isSetS3_secret_key()) {
        oprot.writeString(struct.s3_secret_key);
      }
      if (struct.isSetS3_region()) {
        oprot.writeString(struct.s3_region);
      }
      if (struct.isSetGeo_coords_encoding()) {
        oprot.writeI32(struct.geo_coords_encoding.getValue());
      }
      if (struct.isSetGeo_coords_comp_param()) {
        oprot.writeI32(struct.geo_coords_comp_param);
      }
      if (struct.isSetGeo_coords_type()) {
        oprot.writeI32(struct.geo_coords_type.getValue());
      }
      if (struct.isSetGeo_coords_srid()) {
        oprot.writeI32(struct.geo_coords_srid);
      }
      if (struct.isSetSanitize_column_names()) {
        oprot.writeBool(struct.sanitize_column_names);
      }
      if (struct.isSetGeo_layer_name()) {
        oprot.writeString(struct.geo_layer_name);
      }
      if (struct.isSetS3_endpoint()) {
        oprot.writeString(struct.s3_endpoint);
      }
      if (struct.isSetGeo_assign_render_groups()) {
        oprot.writeBool(struct.geo_assign_render_groups);
      }
      if (struct.isSetGeo_explode_collections()) {
        oprot.writeBool(struct.geo_explode_collections);
      }
      if (struct.isSetSource_srid()) {
        oprot.writeI32(struct.source_srid);
      }
      if (struct.isSetS3_session_token()) {
        oprot.writeString(struct.s3_session_token);
      }
      if (struct.isSetRaster_point_type()) {
        oprot.writeI32(struct.raster_point_type.getValue());
      }
      if (struct.isSetRaster_import_bands()) {
        oprot.writeString(struct.raster_import_bands);
      }
      if (struct.isSetRaster_scanlines_per_thread()) {
        oprot.writeI32(struct.raster_scanlines_per_thread);
      }
      if (struct.isSetRaster_point_transform()) {
        oprot.writeI32(struct.raster_point_transform.getValue());
      }
      if (struct.isSetRaster_point_compute_angle()) {
        oprot.writeBool(struct.raster_point_compute_angle);
      }
      if (struct.isSetRaster_import_dimensions()) {
        oprot.writeString(struct.raster_import_dimensions);
      }
      if (struct.isSetUse_source_type()) {
        oprot.writeBool(struct.use_source_type);
      }
      if (struct.isSetSource_type()) {
        oprot.writeI32(struct.source_type.getValue());
      }
      if (struct.isSetOdbc_dsn()) {
        oprot.writeString(struct.odbc_dsn);
      }
      if (struct.isSetOdbc_connection_string()) {
        oprot.writeString(struct.odbc_connection_string);
      }
      if (struct.isSetOdbc_sql_select()) {
        oprot.writeString(struct.odbc_sql_select);
      }
      if (struct.isSetOdbc_username()) {
        oprot.writeString(struct.odbc_username);
      }
      if (struct.isSetOdbc_password()) {
        oprot.writeString(struct.odbc_password);
      }
      if (struct.isSetOdbc_credential_string()) {
        oprot.writeString(struct.odbc_credential_string);
      }
      if (struct.isSetAdd_metadata_columns()) {
        oprot.writeString(struct.add_metadata_columns);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCopyParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(41);
      if (incoming.get(0)) {
        struct.delimiter = iprot.readString();
        struct.setDelimiterIsSet(true);
      }
      if (incoming.get(1)) {
        struct.null_str = iprot.readString();
        struct.setNull_strIsSet(true);
      }
      if (incoming.get(2)) {
        struct.has_header = com.omnisci.thrift.server.TImportHeaderRow.findByValue(iprot.readI32());
        struct.setHas_headerIsSet(true);
      }
      if (incoming.get(3)) {
        struct.quoted = iprot.readBool();
        struct.setQuotedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.quote = iprot.readString();
        struct.setQuoteIsSet(true);
      }
      if (incoming.get(5)) {
        struct.escape = iprot.readString();
        struct.setEscapeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.line_delim = iprot.readString();
        struct.setLine_delimIsSet(true);
      }
      if (incoming.get(7)) {
        struct.array_delim = iprot.readString();
        struct.setArray_delimIsSet(true);
      }
      if (incoming.get(8)) {
        struct.array_begin = iprot.readString();
        struct.setArray_beginIsSet(true);
      }
      if (incoming.get(9)) {
        struct.array_end = iprot.readString();
        struct.setArray_endIsSet(true);
      }
      if (incoming.get(10)) {
        struct.threads = iprot.readI32();
        struct.setThreadsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.file_type = com.omnisci.thrift.server.TFileType.findByValue(iprot.readI32());
        struct.setFile_typeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.s3_access_key = iprot.readString();
        struct.setS3_access_keyIsSet(true);
      }
      if (incoming.get(13)) {
        struct.s3_secret_key = iprot.readString();
        struct.setS3_secret_keyIsSet(true);
      }
      if (incoming.get(14)) {
        struct.s3_region = iprot.readString();
        struct.setS3_regionIsSet(true);
      }
      if (incoming.get(15)) {
        struct.geo_coords_encoding = com.omnisci.thrift.server.TEncodingType.findByValue(iprot.readI32());
        struct.setGeo_coords_encodingIsSet(true);
      }
      if (incoming.get(16)) {
        struct.geo_coords_comp_param = iprot.readI32();
        struct.setGeo_coords_comp_paramIsSet(true);
      }
      if (incoming.get(17)) {
        struct.geo_coords_type = com.omnisci.thrift.server.TDatumType.findByValue(iprot.readI32());
        struct.setGeo_coords_typeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.geo_coords_srid = iprot.readI32();
        struct.setGeo_coords_sridIsSet(true);
      }
      if (incoming.get(19)) {
        struct.sanitize_column_names = iprot.readBool();
        struct.setSanitize_column_namesIsSet(true);
      }
      if (incoming.get(20)) {
        struct.geo_layer_name = iprot.readString();
        struct.setGeo_layer_nameIsSet(true);
      }
      if (incoming.get(21)) {
        struct.s3_endpoint = iprot.readString();
        struct.setS3_endpointIsSet(true);
      }
      if (incoming.get(22)) {
        struct.geo_assign_render_groups = iprot.readBool();
        struct.setGeo_assign_render_groupsIsSet(true);
      }
      if (incoming.get(23)) {
        struct.geo_explode_collections = iprot.readBool();
        struct.setGeo_explode_collectionsIsSet(true);
      }
      if (incoming.get(24)) {
        struct.source_srid = iprot.readI32();
        struct.setSource_sridIsSet(true);
      }
      if (incoming.get(25)) {
        struct.s3_session_token = iprot.readString();
        struct.setS3_session_tokenIsSet(true);
      }
      if (incoming.get(26)) {
        struct.raster_point_type = com.omnisci.thrift.server.TRasterPointType.findByValue(iprot.readI32());
        struct.setRaster_point_typeIsSet(true);
      }
      if (incoming.get(27)) {
        struct.raster_import_bands = iprot.readString();
        struct.setRaster_import_bandsIsSet(true);
      }
      if (incoming.get(28)) {
        struct.raster_scanlines_per_thread = iprot.readI32();
        struct.setRaster_scanlines_per_threadIsSet(true);
      }
      if (incoming.get(29)) {
        struct.raster_point_transform = com.omnisci.thrift.server.TRasterPointTransform.findByValue(iprot.readI32());
        struct.setRaster_point_transformIsSet(true);
      }
      if (incoming.get(30)) {
        struct.raster_point_compute_angle = iprot.readBool();
        struct.setRaster_point_compute_angleIsSet(true);
      }
      if (incoming.get(31)) {
        struct.raster_import_dimensions = iprot.readString();
        struct.setRaster_import_dimensionsIsSet(true);
      }
      if (incoming.get(32)) {
        struct.use_source_type = iprot.readBool();
        struct.setUse_source_typeIsSet(true);
      }
      if (incoming.get(33)) {
        struct.source_type = com.omnisci.thrift.server.TSourceType.findByValue(iprot.readI32());
        struct.setSource_typeIsSet(true);
      }
      if (incoming.get(34)) {
        struct.odbc_dsn = iprot.readString();
        struct.setOdbc_dsnIsSet(true);
      }
      if (incoming.get(35)) {
        struct.odbc_connection_string = iprot.readString();
        struct.setOdbc_connection_stringIsSet(true);
      }
      if (incoming.get(36)) {
        struct.odbc_sql_select = iprot.readString();
        struct.setOdbc_sql_selectIsSet(true);
      }
      if (incoming.get(37)) {
        struct.odbc_username = iprot.readString();
        struct.setOdbc_usernameIsSet(true);
      }
      if (incoming.get(38)) {
        struct.odbc_password = iprot.readString();
        struct.setOdbc_passwordIsSet(true);
      }
      if (incoming.get(39)) {
        struct.odbc_credential_string = iprot.readString();
        struct.setOdbc_credential_stringIsSet(true);
      }
      if (incoming.get(40)) {
        struct.add_metadata_columns = iprot.readString();
        struct.setAdd_metadata_columnsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

