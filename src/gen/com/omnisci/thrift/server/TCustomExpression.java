/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.omnisci.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TCustomExpression implements org.apache.thrift.TBase<TCustomExpression, TCustomExpression._Fields>, java.io.Serializable, Cloneable, Comparable<TCustomExpression> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCustomExpression");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXPRESSION_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("expression_json", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DATA_SOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("data_source_type", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DATA_SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("data_source_id", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField IS_DELETED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_deleted", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField DATA_SOURCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("data_source_name", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TCustomExpressionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TCustomExpressionTupleSchemeFactory();

  public int id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String expression_json; // required
  /**
   * 
   * @see TDataSourceType
   */
  public @org.apache.thrift.annotation.Nullable TDataSourceType data_source_type; // required
  public int data_source_id; // required
  public boolean is_deleted; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String data_source_name; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    EXPRESSION_JSON((short)4, "expression_json"),
    /**
     * 
     * @see TDataSourceType
     */
    DATA_SOURCE_TYPE((short)5, "data_source_type"),
    DATA_SOURCE_ID((short)6, "data_source_id"),
    IS_DELETED((short)7, "is_deleted"),
    DATA_SOURCE_NAME((short)8, "data_source_name");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 4: // EXPRESSION_JSON
          return EXPRESSION_JSON;
        case 5: // DATA_SOURCE_TYPE
          return DATA_SOURCE_TYPE;
        case 6: // DATA_SOURCE_ID
          return DATA_SOURCE_ID;
        case 7: // IS_DELETED
          return IS_DELETED;
        case 8: // DATA_SOURCE_NAME
          return DATA_SOURCE_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __DATA_SOURCE_ID_ISSET_ID = 1;
  private static final int __IS_DELETED_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPRESSION_JSON, new org.apache.thrift.meta_data.FieldMetaData("expression_json", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_SOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("data_source_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDataSourceType.class)));
    tmpMap.put(_Fields.DATA_SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("data_source_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_DELETED, new org.apache.thrift.meta_data.FieldMetaData("is_deleted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DATA_SOURCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("data_source_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCustomExpression.class, metaDataMap);
  }

  public TCustomExpression() {
  }

  public TCustomExpression(
    int id,
    java.lang.String name,
    java.lang.String expression_json,
    TDataSourceType data_source_type,
    int data_source_id,
    boolean is_deleted,
    java.lang.String data_source_name)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.expression_json = expression_json;
    this.data_source_type = data_source_type;
    this.data_source_id = data_source_id;
    setData_source_idIsSet(true);
    this.is_deleted = is_deleted;
    setIs_deletedIsSet(true);
    this.data_source_name = data_source_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCustomExpression(TCustomExpression other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetExpression_json()) {
      this.expression_json = other.expression_json;
    }
    if (other.isSetData_source_type()) {
      this.data_source_type = other.data_source_type;
    }
    this.data_source_id = other.data_source_id;
    this.is_deleted = other.is_deleted;
    if (other.isSetData_source_name()) {
      this.data_source_name = other.data_source_name;
    }
  }

  public TCustomExpression deepCopy() {
    return new TCustomExpression(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.expression_json = null;
    this.data_source_type = null;
    setData_source_idIsSet(false);
    this.data_source_id = 0;
    setIs_deletedIsSet(false);
    this.is_deleted = false;
    this.data_source_name = null;
  }

  public int getId() {
    return this.id;
  }

  public TCustomExpression setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public TCustomExpression setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getExpression_json() {
    return this.expression_json;
  }

  public TCustomExpression setExpression_json(@org.apache.thrift.annotation.Nullable java.lang.String expression_json) {
    this.expression_json = expression_json;
    return this;
  }

  public void unsetExpression_json() {
    this.expression_json = null;
  }

  /** Returns true if field expression_json is set (has been assigned a value) and false otherwise */
  public boolean isSetExpression_json() {
    return this.expression_json != null;
  }

  public void setExpression_jsonIsSet(boolean value) {
    if (!value) {
      this.expression_json = null;
    }
  }

  /**
   * 
   * @see TDataSourceType
   */
  @org.apache.thrift.annotation.Nullable
  public TDataSourceType getData_source_type() {
    return this.data_source_type;
  }

  /**
   * 
   * @see TDataSourceType
   */
  public TCustomExpression setData_source_type(@org.apache.thrift.annotation.Nullable TDataSourceType data_source_type) {
    this.data_source_type = data_source_type;
    return this;
  }

  public void unsetData_source_type() {
    this.data_source_type = null;
  }

  /** Returns true if field data_source_type is set (has been assigned a value) and false otherwise */
  public boolean isSetData_source_type() {
    return this.data_source_type != null;
  }

  public void setData_source_typeIsSet(boolean value) {
    if (!value) {
      this.data_source_type = null;
    }
  }

  public int getData_source_id() {
    return this.data_source_id;
  }

  public TCustomExpression setData_source_id(int data_source_id) {
    this.data_source_id = data_source_id;
    setData_source_idIsSet(true);
    return this;
  }

  public void unsetData_source_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DATA_SOURCE_ID_ISSET_ID);
  }

  /** Returns true if field data_source_id is set (has been assigned a value) and false otherwise */
  public boolean isSetData_source_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DATA_SOURCE_ID_ISSET_ID);
  }

  public void setData_source_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DATA_SOURCE_ID_ISSET_ID, value);
  }

  public boolean isIs_deleted() {
    return this.is_deleted;
  }

  public TCustomExpression setIs_deleted(boolean is_deleted) {
    this.is_deleted = is_deleted;
    setIs_deletedIsSet(true);
    return this;
  }

  public void unsetIs_deleted() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_DELETED_ISSET_ID);
  }

  /** Returns true if field is_deleted is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_deleted() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_DELETED_ISSET_ID);
  }

  public void setIs_deletedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_DELETED_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getData_source_name() {
    return this.data_source_name;
  }

  public TCustomExpression setData_source_name(@org.apache.thrift.annotation.Nullable java.lang.String data_source_name) {
    this.data_source_name = data_source_name;
    return this;
  }

  public void unsetData_source_name() {
    this.data_source_name = null;
  }

  /** Returns true if field data_source_name is set (has been assigned a value) and false otherwise */
  public boolean isSetData_source_name() {
    return this.data_source_name != null;
  }

  public void setData_source_nameIsSet(boolean value) {
    if (!value) {
      this.data_source_name = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case EXPRESSION_JSON:
      if (value == null) {
        unsetExpression_json();
      } else {
        setExpression_json((java.lang.String)value);
      }
      break;

    case DATA_SOURCE_TYPE:
      if (value == null) {
        unsetData_source_type();
      } else {
        setData_source_type((TDataSourceType)value);
      }
      break;

    case DATA_SOURCE_ID:
      if (value == null) {
        unsetData_source_id();
      } else {
        setData_source_id((java.lang.Integer)value);
      }
      break;

    case IS_DELETED:
      if (value == null) {
        unsetIs_deleted();
      } else {
        setIs_deleted((java.lang.Boolean)value);
      }
      break;

    case DATA_SOURCE_NAME:
      if (value == null) {
        unsetData_source_name();
      } else {
        setData_source_name((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case EXPRESSION_JSON:
      return getExpression_json();

    case DATA_SOURCE_TYPE:
      return getData_source_type();

    case DATA_SOURCE_ID:
      return getData_source_id();

    case IS_DELETED:
      return isIs_deleted();

    case DATA_SOURCE_NAME:
      return getData_source_name();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case EXPRESSION_JSON:
      return isSetExpression_json();
    case DATA_SOURCE_TYPE:
      return isSetData_source_type();
    case DATA_SOURCE_ID:
      return isSetData_source_id();
    case IS_DELETED:
      return isSetIs_deleted();
    case DATA_SOURCE_NAME:
      return isSetData_source_name();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TCustomExpression)
      return this.equals((TCustomExpression)that);
    return false;
  }

  public boolean equals(TCustomExpression that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_expression_json = true && this.isSetExpression_json();
    boolean that_present_expression_json = true && that.isSetExpression_json();
    if (this_present_expression_json || that_present_expression_json) {
      if (!(this_present_expression_json && that_present_expression_json))
        return false;
      if (!this.expression_json.equals(that.expression_json))
        return false;
    }

    boolean this_present_data_source_type = true && this.isSetData_source_type();
    boolean that_present_data_source_type = true && that.isSetData_source_type();
    if (this_present_data_source_type || that_present_data_source_type) {
      if (!(this_present_data_source_type && that_present_data_source_type))
        return false;
      if (!this.data_source_type.equals(that.data_source_type))
        return false;
    }

    boolean this_present_data_source_id = true;
    boolean that_present_data_source_id = true;
    if (this_present_data_source_id || that_present_data_source_id) {
      if (!(this_present_data_source_id && that_present_data_source_id))
        return false;
      if (this.data_source_id != that.data_source_id)
        return false;
    }

    boolean this_present_is_deleted = true;
    boolean that_present_is_deleted = true;
    if (this_present_is_deleted || that_present_is_deleted) {
      if (!(this_present_is_deleted && that_present_is_deleted))
        return false;
      if (this.is_deleted != that.is_deleted)
        return false;
    }

    boolean this_present_data_source_name = true && this.isSetData_source_name();
    boolean that_present_data_source_name = true && that.isSetData_source_name();
    if (this_present_data_source_name || that_present_data_source_name) {
      if (!(this_present_data_source_name && that_present_data_source_name))
        return false;
      if (!this.data_source_name.equals(that.data_source_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetExpression_json()) ? 131071 : 524287);
    if (isSetExpression_json())
      hashCode = hashCode * 8191 + expression_json.hashCode();

    hashCode = hashCode * 8191 + ((isSetData_source_type()) ? 131071 : 524287);
    if (isSetData_source_type())
      hashCode = hashCode * 8191 + data_source_type.getValue();

    hashCode = hashCode * 8191 + data_source_id;

    hashCode = hashCode * 8191 + ((is_deleted) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetData_source_name()) ? 131071 : 524287);
    if (isSetData_source_name())
      hashCode = hashCode * 8191 + data_source_name.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TCustomExpression other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExpression_json(), other.isSetExpression_json());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpression_json()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expression_json, other.expression_json);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetData_source_type(), other.isSetData_source_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_source_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_source_type, other.data_source_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetData_source_id(), other.isSetData_source_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_source_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_source_id, other.data_source_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_deleted(), other.isSetIs_deleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_deleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_deleted, other.is_deleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetData_source_name(), other.isSetData_source_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_source_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_source_name, other.data_source_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TCustomExpression(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expression_json:");
    if (this.expression_json == null) {
      sb.append("null");
    } else {
      sb.append(this.expression_json);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("data_source_type:");
    if (this.data_source_type == null) {
      sb.append("null");
    } else {
      sb.append(this.data_source_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("data_source_id:");
    sb.append(this.data_source_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_deleted:");
    sb.append(this.is_deleted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("data_source_name:");
    if (this.data_source_name == null) {
      sb.append("null");
    } else {
      sb.append(this.data_source_name);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCustomExpressionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCustomExpressionStandardScheme getScheme() {
      return new TCustomExpressionStandardScheme();
    }
  }

  private static class TCustomExpressionStandardScheme extends org.apache.thrift.scheme.StandardScheme<TCustomExpression> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCustomExpression struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXPRESSION_JSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expression_json = iprot.readString();
              struct.setExpression_jsonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATA_SOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.data_source_type = com.omnisci.thrift.server.TDataSourceType.findByValue(iprot.readI32());
              struct.setData_source_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATA_SOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.data_source_id = iprot.readI32();
              struct.setData_source_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_DELETED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_deleted = iprot.readBool();
              struct.setIs_deletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DATA_SOURCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data_source_name = iprot.readString();
              struct.setData_source_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCustomExpression struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.expression_json != null) {
        oprot.writeFieldBegin(EXPRESSION_JSON_FIELD_DESC);
        oprot.writeString(struct.expression_json);
        oprot.writeFieldEnd();
      }
      if (struct.data_source_type != null) {
        oprot.writeFieldBegin(DATA_SOURCE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.data_source_type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATA_SOURCE_ID_FIELD_DESC);
      oprot.writeI32(struct.data_source_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_DELETED_FIELD_DESC);
      oprot.writeBool(struct.is_deleted);
      oprot.writeFieldEnd();
      if (struct.data_source_name != null) {
        oprot.writeFieldBegin(DATA_SOURCE_NAME_FIELD_DESC);
        oprot.writeString(struct.data_source_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCustomExpressionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCustomExpressionTupleScheme getScheme() {
      return new TCustomExpressionTupleScheme();
    }
  }

  private static class TCustomExpressionTupleScheme extends org.apache.thrift.scheme.TupleScheme<TCustomExpression> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCustomExpression struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetExpression_json()) {
        optionals.set(2);
      }
      if (struct.isSetData_source_type()) {
        optionals.set(3);
      }
      if (struct.isSetData_source_id()) {
        optionals.set(4);
      }
      if (struct.isSetIs_deleted()) {
        optionals.set(5);
      }
      if (struct.isSetData_source_name()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetExpression_json()) {
        oprot.writeString(struct.expression_json);
      }
      if (struct.isSetData_source_type()) {
        oprot.writeI32(struct.data_source_type.getValue());
      }
      if (struct.isSetData_source_id()) {
        oprot.writeI32(struct.data_source_id);
      }
      if (struct.isSetIs_deleted()) {
        oprot.writeBool(struct.is_deleted);
      }
      if (struct.isSetData_source_name()) {
        oprot.writeString(struct.data_source_name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCustomExpression struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.expression_json = iprot.readString();
        struct.setExpression_jsonIsSet(true);
      }
      if (incoming.get(3)) {
        struct.data_source_type = com.omnisci.thrift.server.TDataSourceType.findByValue(iprot.readI32());
        struct.setData_source_typeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.data_source_id = iprot.readI32();
        struct.setData_source_idIsSet(true);
      }
      if (incoming.get(5)) {
        struct.is_deleted = iprot.readBool();
        struct.setIs_deletedIsSet(true);
      }
      if (incoming.get(6)) {
        struct.data_source_name = iprot.readString();
        struct.setData_source_nameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

