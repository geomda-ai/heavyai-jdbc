/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ai.heavy.thrift.calciteserver;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class CalciteServer {

  public interface Iface {

    public void ping() throws org.apache.thrift.TException;

    public void shutdown() throws org.apache.thrift.TException;

    public TPlanResult process(java.lang.String user, java.lang.String passwd, java.lang.String catalog, java.lang.String sql_text, TQueryParsingOption query_parsing_option, TOptimizationOption optimization_option, java.util.List<TRestriction> restrictions) throws InvalidParseRequest, org.apache.thrift.TException;

    public java.lang.String getExtensionFunctionWhitelist() throws org.apache.thrift.TException;

    public java.lang.String getUserDefinedFunctionWhitelist() throws org.apache.thrift.TException;

    public java.lang.String getRuntimeExtensionFunctionWhitelist() throws org.apache.thrift.TException;

    public void setRuntimeExtensionFunctions(java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedFunction> udfs, java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedTableFunction> udtfs, boolean isruntime) throws org.apache.thrift.TException;

    public void updateMetadata(java.lang.String catalog, java.lang.String table) throws org.apache.thrift.TException;

    public java.util.List<ai.heavy.thrift.calciteserver.TCompletionHint> getCompletionHints(java.lang.String user, java.lang.String passwd, java.lang.String catalog, java.util.List<java.lang.String> visible_tables, java.lang.String sql, int cursor) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void shutdown(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void process(java.lang.String user, java.lang.String passwd, java.lang.String catalog, java.lang.String sql_text, TQueryParsingOption query_parsing_option, TOptimizationOption optimization_option, java.util.List<TRestriction> restrictions, org.apache.thrift.async.AsyncMethodCallback<TPlanResult> resultHandler) throws org.apache.thrift.TException;

    public void getExtensionFunctionWhitelist(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getUserDefinedFunctionWhitelist(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getRuntimeExtensionFunctionWhitelist(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void setRuntimeExtensionFunctions(java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedFunction> udfs, java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedTableFunction> udtfs, boolean isruntime, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void updateMetadata(java.lang.String catalog, java.lang.String table, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getCompletionHints(java.lang.String user, java.lang.String passwd, java.lang.String catalog, java.util.List<java.lang.String> visible_tables, java.lang.String sql, int cursor, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ai.heavy.thrift.calciteserver.TCompletionHint>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void ping() throws org.apache.thrift.TException
    {
      send_ping();
      recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public void recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      return;
    }

    public void shutdown() throws org.apache.thrift.TException
    {
      send_shutdown();
      recv_shutdown();
    }

    public void send_shutdown() throws org.apache.thrift.TException
    {
      shutdown_args args = new shutdown_args();
      sendBase("shutdown", args);
    }

    public void recv_shutdown() throws org.apache.thrift.TException
    {
      shutdown_result result = new shutdown_result();
      receiveBase(result, "shutdown");
      return;
    }

    public TPlanResult process(java.lang.String user, java.lang.String passwd, java.lang.String catalog, java.lang.String sql_text, TQueryParsingOption query_parsing_option, TOptimizationOption optimization_option, java.util.List<TRestriction> restrictions) throws InvalidParseRequest, org.apache.thrift.TException
    {
      send_process(user, passwd, catalog, sql_text, query_parsing_option, optimization_option, restrictions);
      return recv_process();
    }

    public void send_process(java.lang.String user, java.lang.String passwd, java.lang.String catalog, java.lang.String sql_text, TQueryParsingOption query_parsing_option, TOptimizationOption optimization_option, java.util.List<TRestriction> restrictions) throws org.apache.thrift.TException
    {
      process_args args = new process_args();
      args.setUser(user);
      args.setPasswd(passwd);
      args.setCatalog(catalog);
      args.setSql_text(sql_text);
      args.setQuery_parsing_option(query_parsing_option);
      args.setOptimization_option(optimization_option);
      args.setRestrictions(restrictions);
      sendBase("process", args);
    }

    public TPlanResult recv_process() throws InvalidParseRequest, org.apache.thrift.TException
    {
      process_result result = new process_result();
      receiveBase(result, "process");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.parseErr != null) {
        throw result.parseErr;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "process failed: unknown result");
    }

    public java.lang.String getExtensionFunctionWhitelist() throws org.apache.thrift.TException
    {
      send_getExtensionFunctionWhitelist();
      return recv_getExtensionFunctionWhitelist();
    }

    public void send_getExtensionFunctionWhitelist() throws org.apache.thrift.TException
    {
      getExtensionFunctionWhitelist_args args = new getExtensionFunctionWhitelist_args();
      sendBase("getExtensionFunctionWhitelist", args);
    }

    public java.lang.String recv_getExtensionFunctionWhitelist() throws org.apache.thrift.TException
    {
      getExtensionFunctionWhitelist_result result = new getExtensionFunctionWhitelist_result();
      receiveBase(result, "getExtensionFunctionWhitelist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExtensionFunctionWhitelist failed: unknown result");
    }

    public java.lang.String getUserDefinedFunctionWhitelist() throws org.apache.thrift.TException
    {
      send_getUserDefinedFunctionWhitelist();
      return recv_getUserDefinedFunctionWhitelist();
    }

    public void send_getUserDefinedFunctionWhitelist() throws org.apache.thrift.TException
    {
      getUserDefinedFunctionWhitelist_args args = new getUserDefinedFunctionWhitelist_args();
      sendBase("getUserDefinedFunctionWhitelist", args);
    }

    public java.lang.String recv_getUserDefinedFunctionWhitelist() throws org.apache.thrift.TException
    {
      getUserDefinedFunctionWhitelist_result result = new getUserDefinedFunctionWhitelist_result();
      receiveBase(result, "getUserDefinedFunctionWhitelist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserDefinedFunctionWhitelist failed: unknown result");
    }

    public java.lang.String getRuntimeExtensionFunctionWhitelist() throws org.apache.thrift.TException
    {
      send_getRuntimeExtensionFunctionWhitelist();
      return recv_getRuntimeExtensionFunctionWhitelist();
    }

    public void send_getRuntimeExtensionFunctionWhitelist() throws org.apache.thrift.TException
    {
      getRuntimeExtensionFunctionWhitelist_args args = new getRuntimeExtensionFunctionWhitelist_args();
      sendBase("getRuntimeExtensionFunctionWhitelist", args);
    }

    public java.lang.String recv_getRuntimeExtensionFunctionWhitelist() throws org.apache.thrift.TException
    {
      getRuntimeExtensionFunctionWhitelist_result result = new getRuntimeExtensionFunctionWhitelist_result();
      receiveBase(result, "getRuntimeExtensionFunctionWhitelist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRuntimeExtensionFunctionWhitelist failed: unknown result");
    }

    public void setRuntimeExtensionFunctions(java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedFunction> udfs, java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedTableFunction> udtfs, boolean isruntime) throws org.apache.thrift.TException
    {
      send_setRuntimeExtensionFunctions(udfs, udtfs, isruntime);
      recv_setRuntimeExtensionFunctions();
    }

    public void send_setRuntimeExtensionFunctions(java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedFunction> udfs, java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedTableFunction> udtfs, boolean isruntime) throws org.apache.thrift.TException
    {
      setRuntimeExtensionFunctions_args args = new setRuntimeExtensionFunctions_args();
      args.setUdfs(udfs);
      args.setUdtfs(udtfs);
      args.setIsruntime(isruntime);
      sendBase("setRuntimeExtensionFunctions", args);
    }

    public void recv_setRuntimeExtensionFunctions() throws org.apache.thrift.TException
    {
      setRuntimeExtensionFunctions_result result = new setRuntimeExtensionFunctions_result();
      receiveBase(result, "setRuntimeExtensionFunctions");
      return;
    }

    public void updateMetadata(java.lang.String catalog, java.lang.String table) throws org.apache.thrift.TException
    {
      send_updateMetadata(catalog, table);
      recv_updateMetadata();
    }

    public void send_updateMetadata(java.lang.String catalog, java.lang.String table) throws org.apache.thrift.TException
    {
      updateMetadata_args args = new updateMetadata_args();
      args.setCatalog(catalog);
      args.setTable(table);
      sendBase("updateMetadata", args);
    }

    public void recv_updateMetadata() throws org.apache.thrift.TException
    {
      updateMetadata_result result = new updateMetadata_result();
      receiveBase(result, "updateMetadata");
      return;
    }

    public java.util.List<ai.heavy.thrift.calciteserver.TCompletionHint> getCompletionHints(java.lang.String user, java.lang.String passwd, java.lang.String catalog, java.util.List<java.lang.String> visible_tables, java.lang.String sql, int cursor) throws org.apache.thrift.TException
    {
      send_getCompletionHints(user, passwd, catalog, visible_tables, sql, cursor);
      return recv_getCompletionHints();
    }

    public void send_getCompletionHints(java.lang.String user, java.lang.String passwd, java.lang.String catalog, java.util.List<java.lang.String> visible_tables, java.lang.String sql, int cursor) throws org.apache.thrift.TException
    {
      getCompletionHints_args args = new getCompletionHints_args();
      args.setUser(user);
      args.setPasswd(passwd);
      args.setCatalog(catalog);
      args.setVisible_tables(visible_tables);
      args.setSql(sql);
      args.setCursor(cursor);
      sendBase("getCompletionHints", args);
    }

    public java.util.List<ai.heavy.thrift.calciteserver.TCompletionHint> recv_getCompletionHints() throws org.apache.thrift.TException
    {
      getCompletionHints_result result = new getCompletionHints_result();
      receiveBase(result, "getCompletionHints");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCompletionHints failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void shutdown(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      shutdown_call method_call = new shutdown_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shutdown_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public shutdown_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shutdown", org.apache.thrift.protocol.TMessageType.CALL, 0));
        shutdown_args args = new shutdown_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void process(java.lang.String user, java.lang.String passwd, java.lang.String catalog, java.lang.String sql_text, TQueryParsingOption query_parsing_option, TOptimizationOption optimization_option, java.util.List<TRestriction> restrictions, org.apache.thrift.async.AsyncMethodCallback<TPlanResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      process_call method_call = new process_call(user, passwd, catalog, sql_text, query_parsing_option, optimization_option, restrictions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class process_call extends org.apache.thrift.async.TAsyncMethodCall<TPlanResult> {
      private java.lang.String user;
      private java.lang.String passwd;
      private java.lang.String catalog;
      private java.lang.String sql_text;
      private TQueryParsingOption query_parsing_option;
      private TOptimizationOption optimization_option;
      private java.util.List<TRestriction> restrictions;
      public process_call(java.lang.String user, java.lang.String passwd, java.lang.String catalog, java.lang.String sql_text, TQueryParsingOption query_parsing_option, TOptimizationOption optimization_option, java.util.List<TRestriction> restrictions, org.apache.thrift.async.AsyncMethodCallback<TPlanResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
        this.passwd = passwd;
        this.catalog = catalog;
        this.sql_text = sql_text;
        this.query_parsing_option = query_parsing_option;
        this.optimization_option = optimization_option;
        this.restrictions = restrictions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("process", org.apache.thrift.protocol.TMessageType.CALL, 0));
        process_args args = new process_args();
        args.setUser(user);
        args.setPasswd(passwd);
        args.setCatalog(catalog);
        args.setSql_text(sql_text);
        args.setQuery_parsing_option(query_parsing_option);
        args.setOptimization_option(optimization_option);
        args.setRestrictions(restrictions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TPlanResult getResult() throws InvalidParseRequest, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_process();
      }
    }

    public void getExtensionFunctionWhitelist(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExtensionFunctionWhitelist_call method_call = new getExtensionFunctionWhitelist_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExtensionFunctionWhitelist_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      public getExtensionFunctionWhitelist_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExtensionFunctionWhitelist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExtensionFunctionWhitelist_args args = new getExtensionFunctionWhitelist_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExtensionFunctionWhitelist();
      }
    }

    public void getUserDefinedFunctionWhitelist(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserDefinedFunctionWhitelist_call method_call = new getUserDefinedFunctionWhitelist_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserDefinedFunctionWhitelist_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      public getUserDefinedFunctionWhitelist_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserDefinedFunctionWhitelist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserDefinedFunctionWhitelist_args args = new getUserDefinedFunctionWhitelist_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserDefinedFunctionWhitelist();
      }
    }

    public void getRuntimeExtensionFunctionWhitelist(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRuntimeExtensionFunctionWhitelist_call method_call = new getRuntimeExtensionFunctionWhitelist_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRuntimeExtensionFunctionWhitelist_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      public getRuntimeExtensionFunctionWhitelist_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRuntimeExtensionFunctionWhitelist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRuntimeExtensionFunctionWhitelist_args args = new getRuntimeExtensionFunctionWhitelist_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRuntimeExtensionFunctionWhitelist();
      }
    }

    public void setRuntimeExtensionFunctions(java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedFunction> udfs, java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedTableFunction> udtfs, boolean isruntime, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setRuntimeExtensionFunctions_call method_call = new setRuntimeExtensionFunctions_call(udfs, udtfs, isruntime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setRuntimeExtensionFunctions_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedFunction> udfs;
      private java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedTableFunction> udtfs;
      private boolean isruntime;
      public setRuntimeExtensionFunctions_call(java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedFunction> udfs, java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedTableFunction> udtfs, boolean isruntime, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.udfs = udfs;
        this.udtfs = udtfs;
        this.isruntime = isruntime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setRuntimeExtensionFunctions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setRuntimeExtensionFunctions_args args = new setRuntimeExtensionFunctions_args();
        args.setUdfs(udfs);
        args.setUdtfs(udtfs);
        args.setIsruntime(isruntime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void updateMetadata(java.lang.String catalog, java.lang.String table, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateMetadata_call method_call = new updateMetadata_call(catalog, table, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateMetadata_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String catalog;
      private java.lang.String table;
      public updateMetadata_call(java.lang.String catalog, java.lang.String table, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.catalog = catalog;
        this.table = table;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateMetadata", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateMetadata_args args = new updateMetadata_args();
        args.setCatalog(catalog);
        args.setTable(table);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getCompletionHints(java.lang.String user, java.lang.String passwd, java.lang.String catalog, java.util.List<java.lang.String> visible_tables, java.lang.String sql, int cursor, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ai.heavy.thrift.calciteserver.TCompletionHint>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCompletionHints_call method_call = new getCompletionHints_call(user, passwd, catalog, visible_tables, sql, cursor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCompletionHints_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<ai.heavy.thrift.calciteserver.TCompletionHint>> {
      private java.lang.String user;
      private java.lang.String passwd;
      private java.lang.String catalog;
      private java.util.List<java.lang.String> visible_tables;
      private java.lang.String sql;
      private int cursor;
      public getCompletionHints_call(java.lang.String user, java.lang.String passwd, java.lang.String catalog, java.util.List<java.lang.String> visible_tables, java.lang.String sql, int cursor, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ai.heavy.thrift.calciteserver.TCompletionHint>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
        this.passwd = passwd;
        this.catalog = catalog;
        this.visible_tables = visible_tables;
        this.sql = sql;
        this.cursor = cursor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCompletionHints", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCompletionHints_args args = new getCompletionHints_args();
        args.setUser(user);
        args.setPasswd(passwd);
        args.setCatalog(catalog);
        args.setVisible_tables(visible_tables);
        args.setSql(sql);
        args.setCursor(cursor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<ai.heavy.thrift.calciteserver.TCompletionHint> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCompletionHints();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("shutdown", new shutdown());
      processMap.put("process", new process());
      processMap.put("getExtensionFunctionWhitelist", new getExtensionFunctionWhitelist());
      processMap.put("getUserDefinedFunctionWhitelist", new getUserDefinedFunctionWhitelist());
      processMap.put("getRuntimeExtensionFunctionWhitelist", new getRuntimeExtensionFunctionWhitelist());
      processMap.put("setRuntimeExtensionFunctions", new setRuntimeExtensionFunctions());
      processMap.put("updateMetadata", new updateMetadata());
      processMap.put("getCompletionHints", new getCompletionHints());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        iface.ping();
        return result;
      }
    }

    public static class shutdown<I extends Iface> extends org.apache.thrift.ProcessFunction<I, shutdown_args> {
      public shutdown() {
        super("shutdown");
      }

      public shutdown_args getEmptyArgsInstance() {
        return new shutdown_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public shutdown_result getResult(I iface, shutdown_args args) throws org.apache.thrift.TException {
        shutdown_result result = new shutdown_result();
        iface.shutdown();
        return result;
      }
    }

    public static class process<I extends Iface> extends org.apache.thrift.ProcessFunction<I, process_args> {
      public process() {
        super("process");
      }

      public process_args getEmptyArgsInstance() {
        return new process_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public process_result getResult(I iface, process_args args) throws org.apache.thrift.TException {
        process_result result = new process_result();
        try {
          result.success = iface.process(args.user, args.passwd, args.catalog, args.sql_text, args.query_parsing_option, args.optimization_option, args.restrictions);
        } catch (InvalidParseRequest parseErr) {
          result.parseErr = parseErr;
        }
        return result;
      }
    }

    public static class getExtensionFunctionWhitelist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExtensionFunctionWhitelist_args> {
      public getExtensionFunctionWhitelist() {
        super("getExtensionFunctionWhitelist");
      }

      public getExtensionFunctionWhitelist_args getEmptyArgsInstance() {
        return new getExtensionFunctionWhitelist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getExtensionFunctionWhitelist_result getResult(I iface, getExtensionFunctionWhitelist_args args) throws org.apache.thrift.TException {
        getExtensionFunctionWhitelist_result result = new getExtensionFunctionWhitelist_result();
        result.success = iface.getExtensionFunctionWhitelist();
        return result;
      }
    }

    public static class getUserDefinedFunctionWhitelist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserDefinedFunctionWhitelist_args> {
      public getUserDefinedFunctionWhitelist() {
        super("getUserDefinedFunctionWhitelist");
      }

      public getUserDefinedFunctionWhitelist_args getEmptyArgsInstance() {
        return new getUserDefinedFunctionWhitelist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getUserDefinedFunctionWhitelist_result getResult(I iface, getUserDefinedFunctionWhitelist_args args) throws org.apache.thrift.TException {
        getUserDefinedFunctionWhitelist_result result = new getUserDefinedFunctionWhitelist_result();
        result.success = iface.getUserDefinedFunctionWhitelist();
        return result;
      }
    }

    public static class getRuntimeExtensionFunctionWhitelist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRuntimeExtensionFunctionWhitelist_args> {
      public getRuntimeExtensionFunctionWhitelist() {
        super("getRuntimeExtensionFunctionWhitelist");
      }

      public getRuntimeExtensionFunctionWhitelist_args getEmptyArgsInstance() {
        return new getRuntimeExtensionFunctionWhitelist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getRuntimeExtensionFunctionWhitelist_result getResult(I iface, getRuntimeExtensionFunctionWhitelist_args args) throws org.apache.thrift.TException {
        getRuntimeExtensionFunctionWhitelist_result result = new getRuntimeExtensionFunctionWhitelist_result();
        result.success = iface.getRuntimeExtensionFunctionWhitelist();
        return result;
      }
    }

    public static class setRuntimeExtensionFunctions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setRuntimeExtensionFunctions_args> {
      public setRuntimeExtensionFunctions() {
        super("setRuntimeExtensionFunctions");
      }

      public setRuntimeExtensionFunctions_args getEmptyArgsInstance() {
        return new setRuntimeExtensionFunctions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public setRuntimeExtensionFunctions_result getResult(I iface, setRuntimeExtensionFunctions_args args) throws org.apache.thrift.TException {
        setRuntimeExtensionFunctions_result result = new setRuntimeExtensionFunctions_result();
        iface.setRuntimeExtensionFunctions(args.udfs, args.udtfs, args.isruntime);
        return result;
      }
    }

    public static class updateMetadata<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMetadata_args> {
      public updateMetadata() {
        super("updateMetadata");
      }

      public updateMetadata_args getEmptyArgsInstance() {
        return new updateMetadata_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public updateMetadata_result getResult(I iface, updateMetadata_args args) throws org.apache.thrift.TException {
        updateMetadata_result result = new updateMetadata_result();
        iface.updateMetadata(args.catalog, args.table);
        return result;
      }
    }

    public static class getCompletionHints<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCompletionHints_args> {
      public getCompletionHints() {
        super("getCompletionHints");
      }

      public getCompletionHints_args getEmptyArgsInstance() {
        return new getCompletionHints_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getCompletionHints_result getResult(I iface, getCompletionHints_args args) throws org.apache.thrift.TException {
        getCompletionHints_result result = new getCompletionHints_result();
        result.success = iface.getCompletionHints(args.user, args.passwd, args.catalog, args.visible_tables, args.sql, args.cursor);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("shutdown", new shutdown());
      processMap.put("process", new process());
      processMap.put("getExtensionFunctionWhitelist", new getExtensionFunctionWhitelist());
      processMap.put("getUserDefinedFunctionWhitelist", new getUserDefinedFunctionWhitelist());
      processMap.put("getRuntimeExtensionFunctionWhitelist", new getRuntimeExtensionFunctionWhitelist());
      processMap.put("setRuntimeExtensionFunctions", new setRuntimeExtensionFunctions());
      processMap.put("updateMetadata", new updateMetadata());
      processMap.put("getCompletionHints", new getCompletionHints());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Void> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            ping_result result = new ping_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ping_result result = new ping_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.ping(resultHandler);
      }
    }

    public static class shutdown<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, shutdown_args, Void> {
      public shutdown() {
        super("shutdown");
      }

      public shutdown_args getEmptyArgsInstance() {
        return new shutdown_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            shutdown_result result = new shutdown_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            shutdown_result result = new shutdown_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, shutdown_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.shutdown(resultHandler);
      }
    }

    public static class process<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, process_args, TPlanResult> {
      public process() {
        super("process");
      }

      public process_args getEmptyArgsInstance() {
        return new process_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TPlanResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TPlanResult>() { 
          public void onComplete(TPlanResult o) {
            process_result result = new process_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            process_result result = new process_result();
            if (e instanceof InvalidParseRequest) {
              result.parseErr = (InvalidParseRequest) e;
              result.setParseErrIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, process_args args, org.apache.thrift.async.AsyncMethodCallback<TPlanResult> resultHandler) throws org.apache.thrift.TException {
        iface.process(args.user, args.passwd, args.catalog, args.sql_text, args.query_parsing_option, args.optimization_option, args.restrictions,resultHandler);
      }
    }

    public static class getExtensionFunctionWhitelist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExtensionFunctionWhitelist_args, java.lang.String> {
      public getExtensionFunctionWhitelist() {
        super("getExtensionFunctionWhitelist");
      }

      public getExtensionFunctionWhitelist_args getEmptyArgsInstance() {
        return new getExtensionFunctionWhitelist_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getExtensionFunctionWhitelist_result result = new getExtensionFunctionWhitelist_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getExtensionFunctionWhitelist_result result = new getExtensionFunctionWhitelist_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getExtensionFunctionWhitelist_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getExtensionFunctionWhitelist(resultHandler);
      }
    }

    public static class getUserDefinedFunctionWhitelist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserDefinedFunctionWhitelist_args, java.lang.String> {
      public getUserDefinedFunctionWhitelist() {
        super("getUserDefinedFunctionWhitelist");
      }

      public getUserDefinedFunctionWhitelist_args getEmptyArgsInstance() {
        return new getUserDefinedFunctionWhitelist_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getUserDefinedFunctionWhitelist_result result = new getUserDefinedFunctionWhitelist_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getUserDefinedFunctionWhitelist_result result = new getUserDefinedFunctionWhitelist_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserDefinedFunctionWhitelist_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getUserDefinedFunctionWhitelist(resultHandler);
      }
    }

    public static class getRuntimeExtensionFunctionWhitelist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRuntimeExtensionFunctionWhitelist_args, java.lang.String> {
      public getRuntimeExtensionFunctionWhitelist() {
        super("getRuntimeExtensionFunctionWhitelist");
      }

      public getRuntimeExtensionFunctionWhitelist_args getEmptyArgsInstance() {
        return new getRuntimeExtensionFunctionWhitelist_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getRuntimeExtensionFunctionWhitelist_result result = new getRuntimeExtensionFunctionWhitelist_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getRuntimeExtensionFunctionWhitelist_result result = new getRuntimeExtensionFunctionWhitelist_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRuntimeExtensionFunctionWhitelist_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getRuntimeExtensionFunctionWhitelist(resultHandler);
      }
    }

    public static class setRuntimeExtensionFunctions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setRuntimeExtensionFunctions_args, Void> {
      public setRuntimeExtensionFunctions() {
        super("setRuntimeExtensionFunctions");
      }

      public setRuntimeExtensionFunctions_args getEmptyArgsInstance() {
        return new setRuntimeExtensionFunctions_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setRuntimeExtensionFunctions_result result = new setRuntimeExtensionFunctions_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            setRuntimeExtensionFunctions_result result = new setRuntimeExtensionFunctions_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setRuntimeExtensionFunctions_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.setRuntimeExtensionFunctions(args.udfs, args.udtfs, args.isruntime,resultHandler);
      }
    }

    public static class updateMetadata<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateMetadata_args, Void> {
      public updateMetadata() {
        super("updateMetadata");
      }

      public updateMetadata_args getEmptyArgsInstance() {
        return new updateMetadata_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateMetadata_result result = new updateMetadata_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateMetadata_result result = new updateMetadata_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateMetadata_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.updateMetadata(args.catalog, args.table,resultHandler);
      }
    }

    public static class getCompletionHints<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCompletionHints_args, java.util.List<ai.heavy.thrift.calciteserver.TCompletionHint>> {
      public getCompletionHints() {
        super("getCompletionHints");
      }

      public getCompletionHints_args getEmptyArgsInstance() {
        return new getCompletionHints_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<ai.heavy.thrift.calciteserver.TCompletionHint>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<ai.heavy.thrift.calciteserver.TCompletionHint>>() { 
          public void onComplete(java.util.List<ai.heavy.thrift.calciteserver.TCompletionHint> o) {
            getCompletionHints_result result = new getCompletionHints_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCompletionHints_result result = new getCompletionHints_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCompletionHints_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ai.heavy.thrift.calciteserver.TCompletionHint>> resultHandler) throws org.apache.thrift.TException {
        iface.getCompletionHints(args.user, args.passwd, args.catalog, args.visible_tables, args.sql, args.cursor,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class shutdown_args implements org.apache.thrift.TBase<shutdown_args, shutdown_args._Fields>, java.io.Serializable, Cloneable, Comparable<shutdown_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shutdown_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new shutdown_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new shutdown_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shutdown_args.class, metaDataMap);
    }

    public shutdown_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shutdown_args(shutdown_args other) {
    }

    public shutdown_args deepCopy() {
      return new shutdown_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof shutdown_args)
        return this.equals((shutdown_args)that);
      return false;
    }

    public boolean equals(shutdown_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(shutdown_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("shutdown_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shutdown_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdown_argsStandardScheme getScheme() {
        return new shutdown_argsStandardScheme();
      }
    }

    private static class shutdown_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<shutdown_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shutdown_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shutdown_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shutdown_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdown_argsTupleScheme getScheme() {
        return new shutdown_argsTupleScheme();
      }
    }

    private static class shutdown_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<shutdown_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shutdown_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shutdown_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class shutdown_result implements org.apache.thrift.TBase<shutdown_result, shutdown_result._Fields>, java.io.Serializable, Cloneable, Comparable<shutdown_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shutdown_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new shutdown_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new shutdown_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shutdown_result.class, metaDataMap);
    }

    public shutdown_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shutdown_result(shutdown_result other) {
    }

    public shutdown_result deepCopy() {
      return new shutdown_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof shutdown_result)
        return this.equals((shutdown_result)that);
      return false;
    }

    public boolean equals(shutdown_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(shutdown_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("shutdown_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shutdown_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdown_resultStandardScheme getScheme() {
        return new shutdown_resultStandardScheme();
      }
    }

    private static class shutdown_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<shutdown_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shutdown_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shutdown_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shutdown_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdown_resultTupleScheme getScheme() {
        return new shutdown_resultTupleScheme();
      }
    }

    private static class shutdown_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<shutdown_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shutdown_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shutdown_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class process_args implements org.apache.thrift.TBase<process_args, process_args._Fields>, java.io.Serializable, Cloneable, Comparable<process_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("process_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWD_FIELD_DESC = new org.apache.thrift.protocol.TField("passwd", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CATALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SQL_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("sql_text", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField QUERY_PARSING_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("query_parsing_option", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField OPTIMIZATION_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("optimization_option", org.apache.thrift.protocol.TType.STRUCT, (short)6);
    private static final org.apache.thrift.protocol.TField RESTRICTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("restrictions", org.apache.thrift.protocol.TType.LIST, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new process_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new process_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String user; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String passwd; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String catalog; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String sql_text; // required
    public @org.apache.thrift.annotation.Nullable TQueryParsingOption query_parsing_option; // required
    public @org.apache.thrift.annotation.Nullable TOptimizationOption optimization_option; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<TRestriction> restrictions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short)1, "user"),
      PASSWD((short)2, "passwd"),
      CATALOG((short)3, "catalog"),
      SQL_TEXT((short)4, "sql_text"),
      QUERY_PARSING_OPTION((short)5, "query_parsing_option"),
      OPTIMIZATION_OPTION((short)6, "optimization_option"),
      RESTRICTIONS((short)7, "restrictions");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          case 2: // PASSWD
            return PASSWD;
          case 3: // CATALOG
            return CATALOG;
          case 4: // SQL_TEXT
            return SQL_TEXT;
          case 5: // QUERY_PARSING_OPTION
            return QUERY_PARSING_OPTION;
          case 6: // OPTIMIZATION_OPTION
            return OPTIMIZATION_OPTION;
          case 7: // RESTRICTIONS
            return RESTRICTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWD, new org.apache.thrift.meta_data.FieldMetaData("passwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CATALOG, new org.apache.thrift.meta_data.FieldMetaData("catalog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SQL_TEXT, new org.apache.thrift.meta_data.FieldMetaData("sql_text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QUERY_PARSING_OPTION, new org.apache.thrift.meta_data.FieldMetaData("query_parsing_option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryParsingOption.class)));
      tmpMap.put(_Fields.OPTIMIZATION_OPTION, new org.apache.thrift.meta_data.FieldMetaData("optimization_option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOptimizationOption.class)));
      tmpMap.put(_Fields.RESTRICTIONS, new org.apache.thrift.meta_data.FieldMetaData("restrictions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRestriction.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(process_args.class, metaDataMap);
    }

    public process_args() {
    }

    public process_args(
      java.lang.String user,
      java.lang.String passwd,
      java.lang.String catalog,
      java.lang.String sql_text,
      TQueryParsingOption query_parsing_option,
      TOptimizationOption optimization_option,
      java.util.List<TRestriction> restrictions)
    {
      this();
      this.user = user;
      this.passwd = passwd;
      this.catalog = catalog;
      this.sql_text = sql_text;
      this.query_parsing_option = query_parsing_option;
      this.optimization_option = optimization_option;
      this.restrictions = restrictions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public process_args(process_args other) {
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetPasswd()) {
        this.passwd = other.passwd;
      }
      if (other.isSetCatalog()) {
        this.catalog = other.catalog;
      }
      if (other.isSetSql_text()) {
        this.sql_text = other.sql_text;
      }
      if (other.isSetQuery_parsing_option()) {
        this.query_parsing_option = new TQueryParsingOption(other.query_parsing_option);
      }
      if (other.isSetOptimization_option()) {
        this.optimization_option = new TOptimizationOption(other.optimization_option);
      }
      if (other.isSetRestrictions()) {
        java.util.List<TRestriction> __this__restrictions = new java.util.ArrayList<TRestriction>(other.restrictions.size());
        for (TRestriction other_element : other.restrictions) {
          __this__restrictions.add(new TRestriction(other_element));
        }
        this.restrictions = __this__restrictions;
      }
    }

    public process_args deepCopy() {
      return new process_args(this);
    }

    @Override
    public void clear() {
      this.user = null;
      this.passwd = null;
      this.catalog = null;
      this.sql_text = null;
      this.query_parsing_option = null;
      this.optimization_option = null;
      this.restrictions = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUser() {
      return this.user;
    }

    public process_args setUser(@org.apache.thrift.annotation.Nullable java.lang.String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPasswd() {
      return this.passwd;
    }

    public process_args setPasswd(@org.apache.thrift.annotation.Nullable java.lang.String passwd) {
      this.passwd = passwd;
      return this;
    }

    public void unsetPasswd() {
      this.passwd = null;
    }

    /** Returns true if field passwd is set (has been assigned a value) and false otherwise */
    public boolean isSetPasswd() {
      return this.passwd != null;
    }

    public void setPasswdIsSet(boolean value) {
      if (!value) {
        this.passwd = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCatalog() {
      return this.catalog;
    }

    public process_args setCatalog(@org.apache.thrift.annotation.Nullable java.lang.String catalog) {
      this.catalog = catalog;
      return this;
    }

    public void unsetCatalog() {
      this.catalog = null;
    }

    /** Returns true if field catalog is set (has been assigned a value) and false otherwise */
    public boolean isSetCatalog() {
      return this.catalog != null;
    }

    public void setCatalogIsSet(boolean value) {
      if (!value) {
        this.catalog = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSql_text() {
      return this.sql_text;
    }

    public process_args setSql_text(@org.apache.thrift.annotation.Nullable java.lang.String sql_text) {
      this.sql_text = sql_text;
      return this;
    }

    public void unsetSql_text() {
      this.sql_text = null;
    }

    /** Returns true if field sql_text is set (has been assigned a value) and false otherwise */
    public boolean isSetSql_text() {
      return this.sql_text != null;
    }

    public void setSql_textIsSet(boolean value) {
      if (!value) {
        this.sql_text = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public TQueryParsingOption getQuery_parsing_option() {
      return this.query_parsing_option;
    }

    public process_args setQuery_parsing_option(@org.apache.thrift.annotation.Nullable TQueryParsingOption query_parsing_option) {
      this.query_parsing_option = query_parsing_option;
      return this;
    }

    public void unsetQuery_parsing_option() {
      this.query_parsing_option = null;
    }

    /** Returns true if field query_parsing_option is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery_parsing_option() {
      return this.query_parsing_option != null;
    }

    public void setQuery_parsing_optionIsSet(boolean value) {
      if (!value) {
        this.query_parsing_option = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public TOptimizationOption getOptimization_option() {
      return this.optimization_option;
    }

    public process_args setOptimization_option(@org.apache.thrift.annotation.Nullable TOptimizationOption optimization_option) {
      this.optimization_option = optimization_option;
      return this;
    }

    public void unsetOptimization_option() {
      this.optimization_option = null;
    }

    /** Returns true if field optimization_option is set (has been assigned a value) and false otherwise */
    public boolean isSetOptimization_option() {
      return this.optimization_option != null;
    }

    public void setOptimization_optionIsSet(boolean value) {
      if (!value) {
        this.optimization_option = null;
      }
    }

    public int getRestrictionsSize() {
      return (this.restrictions == null) ? 0 : this.restrictions.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<TRestriction> getRestrictionsIterator() {
      return (this.restrictions == null) ? null : this.restrictions.iterator();
    }

    public void addToRestrictions(TRestriction elem) {
      if (this.restrictions == null) {
        this.restrictions = new java.util.ArrayList<TRestriction>();
      }
      this.restrictions.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<TRestriction> getRestrictions() {
      return this.restrictions;
    }

    public process_args setRestrictions(@org.apache.thrift.annotation.Nullable java.util.List<TRestriction> restrictions) {
      this.restrictions = restrictions;
      return this;
    }

    public void unsetRestrictions() {
      this.restrictions = null;
    }

    /** Returns true if field restrictions is set (has been assigned a value) and false otherwise */
    public boolean isSetRestrictions() {
      return this.restrictions != null;
    }

    public void setRestrictionsIsSet(boolean value) {
      if (!value) {
        this.restrictions = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((java.lang.String)value);
        }
        break;

      case PASSWD:
        if (value == null) {
          unsetPasswd();
        } else {
          setPasswd((java.lang.String)value);
        }
        break;

      case CATALOG:
        if (value == null) {
          unsetCatalog();
        } else {
          setCatalog((java.lang.String)value);
        }
        break;

      case SQL_TEXT:
        if (value == null) {
          unsetSql_text();
        } else {
          setSql_text((java.lang.String)value);
        }
        break;

      case QUERY_PARSING_OPTION:
        if (value == null) {
          unsetQuery_parsing_option();
        } else {
          setQuery_parsing_option((TQueryParsingOption)value);
        }
        break;

      case OPTIMIZATION_OPTION:
        if (value == null) {
          unsetOptimization_option();
        } else {
          setOptimization_option((TOptimizationOption)value);
        }
        break;

      case RESTRICTIONS:
        if (value == null) {
          unsetRestrictions();
        } else {
          setRestrictions((java.util.List<TRestriction>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      case PASSWD:
        return getPasswd();

      case CATALOG:
        return getCatalog();

      case SQL_TEXT:
        return getSql_text();

      case QUERY_PARSING_OPTION:
        return getQuery_parsing_option();

      case OPTIMIZATION_OPTION:
        return getOptimization_option();

      case RESTRICTIONS:
        return getRestrictions();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      case PASSWD:
        return isSetPasswd();
      case CATALOG:
        return isSetCatalog();
      case SQL_TEXT:
        return isSetSql_text();
      case QUERY_PARSING_OPTION:
        return isSetQuery_parsing_option();
      case OPTIMIZATION_OPTION:
        return isSetOptimization_option();
      case RESTRICTIONS:
        return isSetRestrictions();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof process_args)
        return this.equals((process_args)that);
      return false;
    }

    public boolean equals(process_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_passwd = true && this.isSetPasswd();
      boolean that_present_passwd = true && that.isSetPasswd();
      if (this_present_passwd || that_present_passwd) {
        if (!(this_present_passwd && that_present_passwd))
          return false;
        if (!this.passwd.equals(that.passwd))
          return false;
      }

      boolean this_present_catalog = true && this.isSetCatalog();
      boolean that_present_catalog = true && that.isSetCatalog();
      if (this_present_catalog || that_present_catalog) {
        if (!(this_present_catalog && that_present_catalog))
          return false;
        if (!this.catalog.equals(that.catalog))
          return false;
      }

      boolean this_present_sql_text = true && this.isSetSql_text();
      boolean that_present_sql_text = true && that.isSetSql_text();
      if (this_present_sql_text || that_present_sql_text) {
        if (!(this_present_sql_text && that_present_sql_text))
          return false;
        if (!this.sql_text.equals(that.sql_text))
          return false;
      }

      boolean this_present_query_parsing_option = true && this.isSetQuery_parsing_option();
      boolean that_present_query_parsing_option = true && that.isSetQuery_parsing_option();
      if (this_present_query_parsing_option || that_present_query_parsing_option) {
        if (!(this_present_query_parsing_option && that_present_query_parsing_option))
          return false;
        if (!this.query_parsing_option.equals(that.query_parsing_option))
          return false;
      }

      boolean this_present_optimization_option = true && this.isSetOptimization_option();
      boolean that_present_optimization_option = true && that.isSetOptimization_option();
      if (this_present_optimization_option || that_present_optimization_option) {
        if (!(this_present_optimization_option && that_present_optimization_option))
          return false;
        if (!this.optimization_option.equals(that.optimization_option))
          return false;
      }

      boolean this_present_restrictions = true && this.isSetRestrictions();
      boolean that_present_restrictions = true && that.isSetRestrictions();
      if (this_present_restrictions || that_present_restrictions) {
        if (!(this_present_restrictions && that_present_restrictions))
          return false;
        if (!this.restrictions.equals(that.restrictions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
      if (isSetUser())
        hashCode = hashCode * 8191 + user.hashCode();

      hashCode = hashCode * 8191 + ((isSetPasswd()) ? 131071 : 524287);
      if (isSetPasswd())
        hashCode = hashCode * 8191 + passwd.hashCode();

      hashCode = hashCode * 8191 + ((isSetCatalog()) ? 131071 : 524287);
      if (isSetCatalog())
        hashCode = hashCode * 8191 + catalog.hashCode();

      hashCode = hashCode * 8191 + ((isSetSql_text()) ? 131071 : 524287);
      if (isSetSql_text())
        hashCode = hashCode * 8191 + sql_text.hashCode();

      hashCode = hashCode * 8191 + ((isSetQuery_parsing_option()) ? 131071 : 524287);
      if (isSetQuery_parsing_option())
        hashCode = hashCode * 8191 + query_parsing_option.hashCode();

      hashCode = hashCode * 8191 + ((isSetOptimization_option()) ? 131071 : 524287);
      if (isSetOptimization_option())
        hashCode = hashCode * 8191 + optimization_option.hashCode();

      hashCode = hashCode * 8191 + ((isSetRestrictions()) ? 131071 : 524287);
      if (isSetRestrictions())
        hashCode = hashCode * 8191 + restrictions.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(process_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetUser(), other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPasswd(), other.isSetPasswd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPasswd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passwd, other.passwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCatalog(), other.isSetCatalog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCatalog()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog, other.catalog);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSql_text(), other.isSetSql_text());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql_text()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql_text, other.sql_text);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetQuery_parsing_option(), other.isSetQuery_parsing_option());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery_parsing_option()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_parsing_option, other.query_parsing_option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetOptimization_option(), other.isSetOptimization_option());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOptimization_option()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optimization_option, other.optimization_option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetRestrictions(), other.isSetRestrictions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRestrictions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.restrictions, other.restrictions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("process_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("passwd:");
      if (this.passwd == null) {
        sb.append("null");
      } else {
        sb.append(this.passwd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("catalog:");
      if (this.catalog == null) {
        sb.append("null");
      } else {
        sb.append(this.catalog);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sql_text:");
      if (this.sql_text == null) {
        sb.append("null");
      } else {
        sb.append(this.sql_text);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("query_parsing_option:");
      if (this.query_parsing_option == null) {
        sb.append("null");
      } else {
        sb.append(this.query_parsing_option);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("optimization_option:");
      if (this.optimization_option == null) {
        sb.append("null");
      } else {
        sb.append(this.optimization_option);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("restrictions:");
      if (this.restrictions == null) {
        sb.append("null");
      } else {
        sb.append(this.restrictions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query_parsing_option != null) {
        query_parsing_option.validate();
      }
      if (optimization_option != null) {
        optimization_option.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class process_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public process_argsStandardScheme getScheme() {
        return new process_argsStandardScheme();
      }
    }

    private static class process_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<process_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, process_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.passwd = iprot.readString();
                struct.setPasswdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CATALOG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.catalog = iprot.readString();
                struct.setCatalogIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SQL_TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql_text = iprot.readString();
                struct.setSql_textIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // QUERY_PARSING_OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query_parsing_option = new TQueryParsingOption();
                struct.query_parsing_option.read(iprot);
                struct.setQuery_parsing_optionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // OPTIMIZATION_OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.optimization_option = new TOptimizationOption();
                struct.optimization_option.read(iprot);
                struct.setOptimization_optionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // RESTRICTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.restrictions = new java.util.ArrayList<TRestriction>(_list80.size);
                  @org.apache.thrift.annotation.Nullable TRestriction _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    _elem81 = new TRestriction();
                    _elem81.read(iprot);
                    struct.restrictions.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setRestrictionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, process_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.passwd != null) {
          oprot.writeFieldBegin(PASSWD_FIELD_DESC);
          oprot.writeString(struct.passwd);
          oprot.writeFieldEnd();
        }
        if (struct.catalog != null) {
          oprot.writeFieldBegin(CATALOG_FIELD_DESC);
          oprot.writeString(struct.catalog);
          oprot.writeFieldEnd();
        }
        if (struct.sql_text != null) {
          oprot.writeFieldBegin(SQL_TEXT_FIELD_DESC);
          oprot.writeString(struct.sql_text);
          oprot.writeFieldEnd();
        }
        if (struct.query_parsing_option != null) {
          oprot.writeFieldBegin(QUERY_PARSING_OPTION_FIELD_DESC);
          struct.query_parsing_option.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.optimization_option != null) {
          oprot.writeFieldBegin(OPTIMIZATION_OPTION_FIELD_DESC);
          struct.optimization_option.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.restrictions != null) {
          oprot.writeFieldBegin(RESTRICTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.restrictions.size()));
            for (TRestriction _iter83 : struct.restrictions)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class process_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public process_argsTupleScheme getScheme() {
        return new process_argsTupleScheme();
      }
    }

    private static class process_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<process_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, process_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        if (struct.isSetPasswd()) {
          optionals.set(1);
        }
        if (struct.isSetCatalog()) {
          optionals.set(2);
        }
        if (struct.isSetSql_text()) {
          optionals.set(3);
        }
        if (struct.isSetQuery_parsing_option()) {
          optionals.set(4);
        }
        if (struct.isSetOptimization_option()) {
          optionals.set(5);
        }
        if (struct.isSetRestrictions()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetPasswd()) {
          oprot.writeString(struct.passwd);
        }
        if (struct.isSetCatalog()) {
          oprot.writeString(struct.catalog);
        }
        if (struct.isSetSql_text()) {
          oprot.writeString(struct.sql_text);
        }
        if (struct.isSetQuery_parsing_option()) {
          struct.query_parsing_option.write(oprot);
        }
        if (struct.isSetOptimization_option()) {
          struct.optimization_option.write(oprot);
        }
        if (struct.isSetRestrictions()) {
          {
            oprot.writeI32(struct.restrictions.size());
            for (TRestriction _iter84 : struct.restrictions)
            {
              _iter84.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, process_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(1)) {
          struct.passwd = iprot.readString();
          struct.setPasswdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.catalog = iprot.readString();
          struct.setCatalogIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sql_text = iprot.readString();
          struct.setSql_textIsSet(true);
        }
        if (incoming.get(4)) {
          struct.query_parsing_option = new TQueryParsingOption();
          struct.query_parsing_option.read(iprot);
          struct.setQuery_parsing_optionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.optimization_option = new TOptimizationOption();
          struct.optimization_option.read(iprot);
          struct.setOptimization_optionIsSet(true);
        }
        if (incoming.get(6)) {
          {
            org.apache.thrift.protocol.TList _list85 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.restrictions = new java.util.ArrayList<TRestriction>(_list85.size);
            @org.apache.thrift.annotation.Nullable TRestriction _elem86;
            for (int _i87 = 0; _i87 < _list85.size; ++_i87)
            {
              _elem86 = new TRestriction();
              _elem86.read(iprot);
              struct.restrictions.add(_elem86);
            }
          }
          struct.setRestrictionsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class process_result implements org.apache.thrift.TBase<process_result, process_result._Fields>, java.io.Serializable, Cloneable, Comparable<process_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("process_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField PARSE_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("parseErr", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new process_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new process_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TPlanResult success; // required
    public @org.apache.thrift.annotation.Nullable InvalidParseRequest parseErr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      PARSE_ERR((short)1, "parseErr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // PARSE_ERR
            return PARSE_ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPlanResult.class)));
      tmpMap.put(_Fields.PARSE_ERR, new org.apache.thrift.meta_data.FieldMetaData("parseErr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidParseRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(process_result.class, metaDataMap);
    }

    public process_result() {
    }

    public process_result(
      TPlanResult success,
      InvalidParseRequest parseErr)
    {
      this();
      this.success = success;
      this.parseErr = parseErr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public process_result(process_result other) {
      if (other.isSetSuccess()) {
        this.success = new TPlanResult(other.success);
      }
      if (other.isSetParseErr()) {
        this.parseErr = new InvalidParseRequest(other.parseErr);
      }
    }

    public process_result deepCopy() {
      return new process_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.parseErr = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TPlanResult getSuccess() {
      return this.success;
    }

    public process_result setSuccess(@org.apache.thrift.annotation.Nullable TPlanResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public InvalidParseRequest getParseErr() {
      return this.parseErr;
    }

    public process_result setParseErr(@org.apache.thrift.annotation.Nullable InvalidParseRequest parseErr) {
      this.parseErr = parseErr;
      return this;
    }

    public void unsetParseErr() {
      this.parseErr = null;
    }

    /** Returns true if field parseErr is set (has been assigned a value) and false otherwise */
    public boolean isSetParseErr() {
      return this.parseErr != null;
    }

    public void setParseErrIsSet(boolean value) {
      if (!value) {
        this.parseErr = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TPlanResult)value);
        }
        break;

      case PARSE_ERR:
        if (value == null) {
          unsetParseErr();
        } else {
          setParseErr((InvalidParseRequest)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case PARSE_ERR:
        return getParseErr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case PARSE_ERR:
        return isSetParseErr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof process_result)
        return this.equals((process_result)that);
      return false;
    }

    public boolean equals(process_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_parseErr = true && this.isSetParseErr();
      boolean that_present_parseErr = true && that.isSetParseErr();
      if (this_present_parseErr || that_present_parseErr) {
        if (!(this_present_parseErr && that_present_parseErr))
          return false;
        if (!this.parseErr.equals(that.parseErr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetParseErr()) ? 131071 : 524287);
      if (isSetParseErr())
        hashCode = hashCode * 8191 + parseErr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(process_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetParseErr(), other.isSetParseErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParseErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parseErr, other.parseErr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("process_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parseErr:");
      if (this.parseErr == null) {
        sb.append("null");
      } else {
        sb.append(this.parseErr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class process_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public process_resultStandardScheme getScheme() {
        return new process_resultStandardScheme();
      }
    }

    private static class process_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<process_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, process_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TPlanResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // PARSE_ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.parseErr = new InvalidParseRequest();
                struct.parseErr.read(iprot);
                struct.setParseErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, process_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.parseErr != null) {
          oprot.writeFieldBegin(PARSE_ERR_FIELD_DESC);
          struct.parseErr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class process_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public process_resultTupleScheme getScheme() {
        return new process_resultTupleScheme();
      }
    }

    private static class process_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<process_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, process_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetParseErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetParseErr()) {
          struct.parseErr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, process_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TPlanResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.parseErr = new InvalidParseRequest();
          struct.parseErr.read(iprot);
          struct.setParseErrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getExtensionFunctionWhitelist_args implements org.apache.thrift.TBase<getExtensionFunctionWhitelist_args, getExtensionFunctionWhitelist_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExtensionFunctionWhitelist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExtensionFunctionWhitelist_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getExtensionFunctionWhitelist_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getExtensionFunctionWhitelist_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExtensionFunctionWhitelist_args.class, metaDataMap);
    }

    public getExtensionFunctionWhitelist_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExtensionFunctionWhitelist_args(getExtensionFunctionWhitelist_args other) {
    }

    public getExtensionFunctionWhitelist_args deepCopy() {
      return new getExtensionFunctionWhitelist_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getExtensionFunctionWhitelist_args)
        return this.equals((getExtensionFunctionWhitelist_args)that);
      return false;
    }

    public boolean equals(getExtensionFunctionWhitelist_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getExtensionFunctionWhitelist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getExtensionFunctionWhitelist_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExtensionFunctionWhitelist_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getExtensionFunctionWhitelist_argsStandardScheme getScheme() {
        return new getExtensionFunctionWhitelist_argsStandardScheme();
      }
    }

    private static class getExtensionFunctionWhitelist_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getExtensionFunctionWhitelist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExtensionFunctionWhitelist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExtensionFunctionWhitelist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExtensionFunctionWhitelist_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getExtensionFunctionWhitelist_argsTupleScheme getScheme() {
        return new getExtensionFunctionWhitelist_argsTupleScheme();
      }
    }

    private static class getExtensionFunctionWhitelist_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getExtensionFunctionWhitelist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExtensionFunctionWhitelist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExtensionFunctionWhitelist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getExtensionFunctionWhitelist_result implements org.apache.thrift.TBase<getExtensionFunctionWhitelist_result, getExtensionFunctionWhitelist_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExtensionFunctionWhitelist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExtensionFunctionWhitelist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getExtensionFunctionWhitelist_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getExtensionFunctionWhitelist_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExtensionFunctionWhitelist_result.class, metaDataMap);
    }

    public getExtensionFunctionWhitelist_result() {
    }

    public getExtensionFunctionWhitelist_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExtensionFunctionWhitelist_result(getExtensionFunctionWhitelist_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getExtensionFunctionWhitelist_result deepCopy() {
      return new getExtensionFunctionWhitelist_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public getExtensionFunctionWhitelist_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getExtensionFunctionWhitelist_result)
        return this.equals((getExtensionFunctionWhitelist_result)that);
      return false;
    }

    public boolean equals(getExtensionFunctionWhitelist_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getExtensionFunctionWhitelist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getExtensionFunctionWhitelist_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExtensionFunctionWhitelist_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getExtensionFunctionWhitelist_resultStandardScheme getScheme() {
        return new getExtensionFunctionWhitelist_resultStandardScheme();
      }
    }

    private static class getExtensionFunctionWhitelist_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getExtensionFunctionWhitelist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExtensionFunctionWhitelist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExtensionFunctionWhitelist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExtensionFunctionWhitelist_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getExtensionFunctionWhitelist_resultTupleScheme getScheme() {
        return new getExtensionFunctionWhitelist_resultTupleScheme();
      }
    }

    private static class getExtensionFunctionWhitelist_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getExtensionFunctionWhitelist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExtensionFunctionWhitelist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExtensionFunctionWhitelist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserDefinedFunctionWhitelist_args implements org.apache.thrift.TBase<getUserDefinedFunctionWhitelist_args, getUserDefinedFunctionWhitelist_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserDefinedFunctionWhitelist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserDefinedFunctionWhitelist_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserDefinedFunctionWhitelist_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserDefinedFunctionWhitelist_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserDefinedFunctionWhitelist_args.class, metaDataMap);
    }

    public getUserDefinedFunctionWhitelist_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserDefinedFunctionWhitelist_args(getUserDefinedFunctionWhitelist_args other) {
    }

    public getUserDefinedFunctionWhitelist_args deepCopy() {
      return new getUserDefinedFunctionWhitelist_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getUserDefinedFunctionWhitelist_args)
        return this.equals((getUserDefinedFunctionWhitelist_args)that);
      return false;
    }

    public boolean equals(getUserDefinedFunctionWhitelist_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getUserDefinedFunctionWhitelist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserDefinedFunctionWhitelist_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserDefinedFunctionWhitelist_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserDefinedFunctionWhitelist_argsStandardScheme getScheme() {
        return new getUserDefinedFunctionWhitelist_argsStandardScheme();
      }
    }

    private static class getUserDefinedFunctionWhitelist_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserDefinedFunctionWhitelist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserDefinedFunctionWhitelist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserDefinedFunctionWhitelist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserDefinedFunctionWhitelist_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserDefinedFunctionWhitelist_argsTupleScheme getScheme() {
        return new getUserDefinedFunctionWhitelist_argsTupleScheme();
      }
    }

    private static class getUserDefinedFunctionWhitelist_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserDefinedFunctionWhitelist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserDefinedFunctionWhitelist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserDefinedFunctionWhitelist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserDefinedFunctionWhitelist_result implements org.apache.thrift.TBase<getUserDefinedFunctionWhitelist_result, getUserDefinedFunctionWhitelist_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserDefinedFunctionWhitelist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserDefinedFunctionWhitelist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserDefinedFunctionWhitelist_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserDefinedFunctionWhitelist_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserDefinedFunctionWhitelist_result.class, metaDataMap);
    }

    public getUserDefinedFunctionWhitelist_result() {
    }

    public getUserDefinedFunctionWhitelist_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserDefinedFunctionWhitelist_result(getUserDefinedFunctionWhitelist_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getUserDefinedFunctionWhitelist_result deepCopy() {
      return new getUserDefinedFunctionWhitelist_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public getUserDefinedFunctionWhitelist_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getUserDefinedFunctionWhitelist_result)
        return this.equals((getUserDefinedFunctionWhitelist_result)that);
      return false;
    }

    public boolean equals(getUserDefinedFunctionWhitelist_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserDefinedFunctionWhitelist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserDefinedFunctionWhitelist_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserDefinedFunctionWhitelist_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserDefinedFunctionWhitelist_resultStandardScheme getScheme() {
        return new getUserDefinedFunctionWhitelist_resultStandardScheme();
      }
    }

    private static class getUserDefinedFunctionWhitelist_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserDefinedFunctionWhitelist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserDefinedFunctionWhitelist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserDefinedFunctionWhitelist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserDefinedFunctionWhitelist_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserDefinedFunctionWhitelist_resultTupleScheme getScheme() {
        return new getUserDefinedFunctionWhitelist_resultTupleScheme();
      }
    }

    private static class getUserDefinedFunctionWhitelist_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserDefinedFunctionWhitelist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserDefinedFunctionWhitelist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserDefinedFunctionWhitelist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getRuntimeExtensionFunctionWhitelist_args implements org.apache.thrift.TBase<getRuntimeExtensionFunctionWhitelist_args, getRuntimeExtensionFunctionWhitelist_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRuntimeExtensionFunctionWhitelist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRuntimeExtensionFunctionWhitelist_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRuntimeExtensionFunctionWhitelist_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRuntimeExtensionFunctionWhitelist_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRuntimeExtensionFunctionWhitelist_args.class, metaDataMap);
    }

    public getRuntimeExtensionFunctionWhitelist_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRuntimeExtensionFunctionWhitelist_args(getRuntimeExtensionFunctionWhitelist_args other) {
    }

    public getRuntimeExtensionFunctionWhitelist_args deepCopy() {
      return new getRuntimeExtensionFunctionWhitelist_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getRuntimeExtensionFunctionWhitelist_args)
        return this.equals((getRuntimeExtensionFunctionWhitelist_args)that);
      return false;
    }

    public boolean equals(getRuntimeExtensionFunctionWhitelist_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getRuntimeExtensionFunctionWhitelist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getRuntimeExtensionFunctionWhitelist_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRuntimeExtensionFunctionWhitelist_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRuntimeExtensionFunctionWhitelist_argsStandardScheme getScheme() {
        return new getRuntimeExtensionFunctionWhitelist_argsStandardScheme();
      }
    }

    private static class getRuntimeExtensionFunctionWhitelist_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRuntimeExtensionFunctionWhitelist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRuntimeExtensionFunctionWhitelist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRuntimeExtensionFunctionWhitelist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRuntimeExtensionFunctionWhitelist_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRuntimeExtensionFunctionWhitelist_argsTupleScheme getScheme() {
        return new getRuntimeExtensionFunctionWhitelist_argsTupleScheme();
      }
    }

    private static class getRuntimeExtensionFunctionWhitelist_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRuntimeExtensionFunctionWhitelist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRuntimeExtensionFunctionWhitelist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRuntimeExtensionFunctionWhitelist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getRuntimeExtensionFunctionWhitelist_result implements org.apache.thrift.TBase<getRuntimeExtensionFunctionWhitelist_result, getRuntimeExtensionFunctionWhitelist_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRuntimeExtensionFunctionWhitelist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRuntimeExtensionFunctionWhitelist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRuntimeExtensionFunctionWhitelist_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRuntimeExtensionFunctionWhitelist_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRuntimeExtensionFunctionWhitelist_result.class, metaDataMap);
    }

    public getRuntimeExtensionFunctionWhitelist_result() {
    }

    public getRuntimeExtensionFunctionWhitelist_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRuntimeExtensionFunctionWhitelist_result(getRuntimeExtensionFunctionWhitelist_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getRuntimeExtensionFunctionWhitelist_result deepCopy() {
      return new getRuntimeExtensionFunctionWhitelist_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public getRuntimeExtensionFunctionWhitelist_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getRuntimeExtensionFunctionWhitelist_result)
        return this.equals((getRuntimeExtensionFunctionWhitelist_result)that);
      return false;
    }

    public boolean equals(getRuntimeExtensionFunctionWhitelist_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getRuntimeExtensionFunctionWhitelist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getRuntimeExtensionFunctionWhitelist_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRuntimeExtensionFunctionWhitelist_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRuntimeExtensionFunctionWhitelist_resultStandardScheme getScheme() {
        return new getRuntimeExtensionFunctionWhitelist_resultStandardScheme();
      }
    }

    private static class getRuntimeExtensionFunctionWhitelist_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRuntimeExtensionFunctionWhitelist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRuntimeExtensionFunctionWhitelist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRuntimeExtensionFunctionWhitelist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRuntimeExtensionFunctionWhitelist_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRuntimeExtensionFunctionWhitelist_resultTupleScheme getScheme() {
        return new getRuntimeExtensionFunctionWhitelist_resultTupleScheme();
      }
    }

    private static class getRuntimeExtensionFunctionWhitelist_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRuntimeExtensionFunctionWhitelist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRuntimeExtensionFunctionWhitelist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRuntimeExtensionFunctionWhitelist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setRuntimeExtensionFunctions_args implements org.apache.thrift.TBase<setRuntimeExtensionFunctions_args, setRuntimeExtensionFunctions_args._Fields>, java.io.Serializable, Cloneable, Comparable<setRuntimeExtensionFunctions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setRuntimeExtensionFunctions_args");

    private static final org.apache.thrift.protocol.TField UDFS_FIELD_DESC = new org.apache.thrift.protocol.TField("udfs", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField UDTFS_FIELD_DESC = new org.apache.thrift.protocol.TField("udtfs", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField ISRUNTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("isruntime", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setRuntimeExtensionFunctions_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setRuntimeExtensionFunctions_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedFunction> udfs; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedTableFunction> udtfs; // required
    public boolean isruntime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UDFS((short)1, "udfs"),
      UDTFS((short)2, "udtfs"),
      ISRUNTIME((short)3, "isruntime");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UDFS
            return UDFS;
          case 2: // UDTFS
            return UDTFS;
          case 3: // ISRUNTIME
            return ISRUNTIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISRUNTIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UDFS, new org.apache.thrift.meta_data.FieldMetaData("udfs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ai.heavy.thrift.calciteserver.TUserDefinedFunction.class))));
      tmpMap.put(_Fields.UDTFS, new org.apache.thrift.meta_data.FieldMetaData("udtfs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ai.heavy.thrift.calciteserver.TUserDefinedTableFunction.class))));
      tmpMap.put(_Fields.ISRUNTIME, new org.apache.thrift.meta_data.FieldMetaData("isruntime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRuntimeExtensionFunctions_args.class, metaDataMap);
    }

    public setRuntimeExtensionFunctions_args() {
    }

    public setRuntimeExtensionFunctions_args(
      java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedFunction> udfs,
      java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedTableFunction> udtfs,
      boolean isruntime)
    {
      this();
      this.udfs = udfs;
      this.udtfs = udtfs;
      this.isruntime = isruntime;
      setIsruntimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setRuntimeExtensionFunctions_args(setRuntimeExtensionFunctions_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUdfs()) {
        java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedFunction> __this__udfs = new java.util.ArrayList<ai.heavy.thrift.calciteserver.TUserDefinedFunction>(other.udfs.size());
        for (ai.heavy.thrift.calciteserver.TUserDefinedFunction other_element : other.udfs) {
          __this__udfs.add(new ai.heavy.thrift.calciteserver.TUserDefinedFunction(other_element));
        }
        this.udfs = __this__udfs;
      }
      if (other.isSetUdtfs()) {
        java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedTableFunction> __this__udtfs = new java.util.ArrayList<ai.heavy.thrift.calciteserver.TUserDefinedTableFunction>(other.udtfs.size());
        for (ai.heavy.thrift.calciteserver.TUserDefinedTableFunction other_element : other.udtfs) {
          __this__udtfs.add(new ai.heavy.thrift.calciteserver.TUserDefinedTableFunction(other_element));
        }
        this.udtfs = __this__udtfs;
      }
      this.isruntime = other.isruntime;
    }

    public setRuntimeExtensionFunctions_args deepCopy() {
      return new setRuntimeExtensionFunctions_args(this);
    }

    @Override
    public void clear() {
      this.udfs = null;
      this.udtfs = null;
      setIsruntimeIsSet(false);
      this.isruntime = false;
    }

    public int getUdfsSize() {
      return (this.udfs == null) ? 0 : this.udfs.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<ai.heavy.thrift.calciteserver.TUserDefinedFunction> getUdfsIterator() {
      return (this.udfs == null) ? null : this.udfs.iterator();
    }

    public void addToUdfs(ai.heavy.thrift.calciteserver.TUserDefinedFunction elem) {
      if (this.udfs == null) {
        this.udfs = new java.util.ArrayList<ai.heavy.thrift.calciteserver.TUserDefinedFunction>();
      }
      this.udfs.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedFunction> getUdfs() {
      return this.udfs;
    }

    public setRuntimeExtensionFunctions_args setUdfs(@org.apache.thrift.annotation.Nullable java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedFunction> udfs) {
      this.udfs = udfs;
      return this;
    }

    public void unsetUdfs() {
      this.udfs = null;
    }

    /** Returns true if field udfs is set (has been assigned a value) and false otherwise */
    public boolean isSetUdfs() {
      return this.udfs != null;
    }

    public void setUdfsIsSet(boolean value) {
      if (!value) {
        this.udfs = null;
      }
    }

    public int getUdtfsSize() {
      return (this.udtfs == null) ? 0 : this.udtfs.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<ai.heavy.thrift.calciteserver.TUserDefinedTableFunction> getUdtfsIterator() {
      return (this.udtfs == null) ? null : this.udtfs.iterator();
    }

    public void addToUdtfs(ai.heavy.thrift.calciteserver.TUserDefinedTableFunction elem) {
      if (this.udtfs == null) {
        this.udtfs = new java.util.ArrayList<ai.heavy.thrift.calciteserver.TUserDefinedTableFunction>();
      }
      this.udtfs.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedTableFunction> getUdtfs() {
      return this.udtfs;
    }

    public setRuntimeExtensionFunctions_args setUdtfs(@org.apache.thrift.annotation.Nullable java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedTableFunction> udtfs) {
      this.udtfs = udtfs;
      return this;
    }

    public void unsetUdtfs() {
      this.udtfs = null;
    }

    /** Returns true if field udtfs is set (has been assigned a value) and false otherwise */
    public boolean isSetUdtfs() {
      return this.udtfs != null;
    }

    public void setUdtfsIsSet(boolean value) {
      if (!value) {
        this.udtfs = null;
      }
    }

    public boolean isIsruntime() {
      return this.isruntime;
    }

    public setRuntimeExtensionFunctions_args setIsruntime(boolean isruntime) {
      this.isruntime = isruntime;
      setIsruntimeIsSet(true);
      return this;
    }

    public void unsetIsruntime() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISRUNTIME_ISSET_ID);
    }

    /** Returns true if field isruntime is set (has been assigned a value) and false otherwise */
    public boolean isSetIsruntime() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISRUNTIME_ISSET_ID);
    }

    public void setIsruntimeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISRUNTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case UDFS:
        if (value == null) {
          unsetUdfs();
        } else {
          setUdfs((java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedFunction>)value);
        }
        break;

      case UDTFS:
        if (value == null) {
          unsetUdtfs();
        } else {
          setUdtfs((java.util.List<ai.heavy.thrift.calciteserver.TUserDefinedTableFunction>)value);
        }
        break;

      case ISRUNTIME:
        if (value == null) {
          unsetIsruntime();
        } else {
          setIsruntime((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UDFS:
        return getUdfs();

      case UDTFS:
        return getUdtfs();

      case ISRUNTIME:
        return isIsruntime();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UDFS:
        return isSetUdfs();
      case UDTFS:
        return isSetUdtfs();
      case ISRUNTIME:
        return isSetIsruntime();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof setRuntimeExtensionFunctions_args)
        return this.equals((setRuntimeExtensionFunctions_args)that);
      return false;
    }

    public boolean equals(setRuntimeExtensionFunctions_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_udfs = true && this.isSetUdfs();
      boolean that_present_udfs = true && that.isSetUdfs();
      if (this_present_udfs || that_present_udfs) {
        if (!(this_present_udfs && that_present_udfs))
          return false;
        if (!this.udfs.equals(that.udfs))
          return false;
      }

      boolean this_present_udtfs = true && this.isSetUdtfs();
      boolean that_present_udtfs = true && that.isSetUdtfs();
      if (this_present_udtfs || that_present_udtfs) {
        if (!(this_present_udtfs && that_present_udtfs))
          return false;
        if (!this.udtfs.equals(that.udtfs))
          return false;
      }

      boolean this_present_isruntime = true;
      boolean that_present_isruntime = true;
      if (this_present_isruntime || that_present_isruntime) {
        if (!(this_present_isruntime && that_present_isruntime))
          return false;
        if (this.isruntime != that.isruntime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUdfs()) ? 131071 : 524287);
      if (isSetUdfs())
        hashCode = hashCode * 8191 + udfs.hashCode();

      hashCode = hashCode * 8191 + ((isSetUdtfs()) ? 131071 : 524287);
      if (isSetUdtfs())
        hashCode = hashCode * 8191 + udtfs.hashCode();

      hashCode = hashCode * 8191 + ((isruntime) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(setRuntimeExtensionFunctions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetUdfs(), other.isSetUdfs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUdfs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.udfs, other.udfs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUdtfs(), other.isSetUdtfs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUdtfs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.udtfs, other.udtfs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIsruntime(), other.isSetIsruntime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsruntime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isruntime, other.isruntime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setRuntimeExtensionFunctions_args(");
      boolean first = true;

      sb.append("udfs:");
      if (this.udfs == null) {
        sb.append("null");
      } else {
        sb.append(this.udfs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("udtfs:");
      if (this.udtfs == null) {
        sb.append("null");
      } else {
        sb.append(this.udtfs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isruntime:");
      sb.append(this.isruntime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setRuntimeExtensionFunctions_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setRuntimeExtensionFunctions_argsStandardScheme getScheme() {
        return new setRuntimeExtensionFunctions_argsStandardScheme();
      }
    }

    private static class setRuntimeExtensionFunctions_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setRuntimeExtensionFunctions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setRuntimeExtensionFunctions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UDFS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.udfs = new java.util.ArrayList<ai.heavy.thrift.calciteserver.TUserDefinedFunction>(_list88.size);
                  @org.apache.thrift.annotation.Nullable ai.heavy.thrift.calciteserver.TUserDefinedFunction _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = new ai.heavy.thrift.calciteserver.TUserDefinedFunction();
                    _elem89.read(iprot);
                    struct.udfs.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setUdfsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UDTFS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list91 = iprot.readListBegin();
                  struct.udtfs = new java.util.ArrayList<ai.heavy.thrift.calciteserver.TUserDefinedTableFunction>(_list91.size);
                  @org.apache.thrift.annotation.Nullable ai.heavy.thrift.calciteserver.TUserDefinedTableFunction _elem92;
                  for (int _i93 = 0; _i93 < _list91.size; ++_i93)
                  {
                    _elem92 = new ai.heavy.thrift.calciteserver.TUserDefinedTableFunction();
                    _elem92.read(iprot);
                    struct.udtfs.add(_elem92);
                  }
                  iprot.readListEnd();
                }
                struct.setUdtfsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ISRUNTIME
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isruntime = iprot.readBool();
                struct.setIsruntimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setRuntimeExtensionFunctions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.udfs != null) {
          oprot.writeFieldBegin(UDFS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.udfs.size()));
            for (ai.heavy.thrift.calciteserver.TUserDefinedFunction _iter94 : struct.udfs)
            {
              _iter94.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.udtfs != null) {
          oprot.writeFieldBegin(UDTFS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.udtfs.size()));
            for (ai.heavy.thrift.calciteserver.TUserDefinedTableFunction _iter95 : struct.udtfs)
            {
              _iter95.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ISRUNTIME_FIELD_DESC);
        oprot.writeBool(struct.isruntime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setRuntimeExtensionFunctions_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setRuntimeExtensionFunctions_argsTupleScheme getScheme() {
        return new setRuntimeExtensionFunctions_argsTupleScheme();
      }
    }

    private static class setRuntimeExtensionFunctions_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setRuntimeExtensionFunctions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setRuntimeExtensionFunctions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUdfs()) {
          optionals.set(0);
        }
        if (struct.isSetUdtfs()) {
          optionals.set(1);
        }
        if (struct.isSetIsruntime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUdfs()) {
          {
            oprot.writeI32(struct.udfs.size());
            for (ai.heavy.thrift.calciteserver.TUserDefinedFunction _iter96 : struct.udfs)
            {
              _iter96.write(oprot);
            }
          }
        }
        if (struct.isSetUdtfs()) {
          {
            oprot.writeI32(struct.udtfs.size());
            for (ai.heavy.thrift.calciteserver.TUserDefinedTableFunction _iter97 : struct.udtfs)
            {
              _iter97.write(oprot);
            }
          }
        }
        if (struct.isSetIsruntime()) {
          oprot.writeBool(struct.isruntime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setRuntimeExtensionFunctions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list98 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.udfs = new java.util.ArrayList<ai.heavy.thrift.calciteserver.TUserDefinedFunction>(_list98.size);
            @org.apache.thrift.annotation.Nullable ai.heavy.thrift.calciteserver.TUserDefinedFunction _elem99;
            for (int _i100 = 0; _i100 < _list98.size; ++_i100)
            {
              _elem99 = new ai.heavy.thrift.calciteserver.TUserDefinedFunction();
              _elem99.read(iprot);
              struct.udfs.add(_elem99);
            }
          }
          struct.setUdfsIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list101 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.udtfs = new java.util.ArrayList<ai.heavy.thrift.calciteserver.TUserDefinedTableFunction>(_list101.size);
            @org.apache.thrift.annotation.Nullable ai.heavy.thrift.calciteserver.TUserDefinedTableFunction _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = new ai.heavy.thrift.calciteserver.TUserDefinedTableFunction();
              _elem102.read(iprot);
              struct.udtfs.add(_elem102);
            }
          }
          struct.setUdtfsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.isruntime = iprot.readBool();
          struct.setIsruntimeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setRuntimeExtensionFunctions_result implements org.apache.thrift.TBase<setRuntimeExtensionFunctions_result, setRuntimeExtensionFunctions_result._Fields>, java.io.Serializable, Cloneable, Comparable<setRuntimeExtensionFunctions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setRuntimeExtensionFunctions_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setRuntimeExtensionFunctions_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setRuntimeExtensionFunctions_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRuntimeExtensionFunctions_result.class, metaDataMap);
    }

    public setRuntimeExtensionFunctions_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setRuntimeExtensionFunctions_result(setRuntimeExtensionFunctions_result other) {
    }

    public setRuntimeExtensionFunctions_result deepCopy() {
      return new setRuntimeExtensionFunctions_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof setRuntimeExtensionFunctions_result)
        return this.equals((setRuntimeExtensionFunctions_result)that);
      return false;
    }

    public boolean equals(setRuntimeExtensionFunctions_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(setRuntimeExtensionFunctions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setRuntimeExtensionFunctions_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setRuntimeExtensionFunctions_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setRuntimeExtensionFunctions_resultStandardScheme getScheme() {
        return new setRuntimeExtensionFunctions_resultStandardScheme();
      }
    }

    private static class setRuntimeExtensionFunctions_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setRuntimeExtensionFunctions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setRuntimeExtensionFunctions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setRuntimeExtensionFunctions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setRuntimeExtensionFunctions_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setRuntimeExtensionFunctions_resultTupleScheme getScheme() {
        return new setRuntimeExtensionFunctions_resultTupleScheme();
      }
    }

    private static class setRuntimeExtensionFunctions_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setRuntimeExtensionFunctions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setRuntimeExtensionFunctions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setRuntimeExtensionFunctions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateMetadata_args implements org.apache.thrift.TBase<updateMetadata_args, updateMetadata_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateMetadata_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMetadata_args");

    private static final org.apache.thrift.protocol.TField CATALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateMetadata_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateMetadata_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String catalog; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String table; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATALOG((short)1, "catalog"),
      TABLE((short)2, "table");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATALOG
            return CATALOG;
          case 2: // TABLE
            return TABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATALOG, new org.apache.thrift.meta_data.FieldMetaData("catalog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMetadata_args.class, metaDataMap);
    }

    public updateMetadata_args() {
    }

    public updateMetadata_args(
      java.lang.String catalog,
      java.lang.String table)
    {
      this();
      this.catalog = catalog;
      this.table = table;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMetadata_args(updateMetadata_args other) {
      if (other.isSetCatalog()) {
        this.catalog = other.catalog;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
    }

    public updateMetadata_args deepCopy() {
      return new updateMetadata_args(this);
    }

    @Override
    public void clear() {
      this.catalog = null;
      this.table = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCatalog() {
      return this.catalog;
    }

    public updateMetadata_args setCatalog(@org.apache.thrift.annotation.Nullable java.lang.String catalog) {
      this.catalog = catalog;
      return this;
    }

    public void unsetCatalog() {
      this.catalog = null;
    }

    /** Returns true if field catalog is set (has been assigned a value) and false otherwise */
    public boolean isSetCatalog() {
      return this.catalog != null;
    }

    public void setCatalogIsSet(boolean value) {
      if (!value) {
        this.catalog = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTable() {
      return this.table;
    }

    public updateMetadata_args setTable(@org.apache.thrift.annotation.Nullable java.lang.String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CATALOG:
        if (value == null) {
          unsetCatalog();
        } else {
          setCatalog((java.lang.String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CATALOG:
        return getCatalog();

      case TABLE:
        return getTable();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CATALOG:
        return isSetCatalog();
      case TABLE:
        return isSetTable();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof updateMetadata_args)
        return this.equals((updateMetadata_args)that);
      return false;
    }

    public boolean equals(updateMetadata_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_catalog = true && this.isSetCatalog();
      boolean that_present_catalog = true && that.isSetCatalog();
      if (this_present_catalog || that_present_catalog) {
        if (!(this_present_catalog && that_present_catalog))
          return false;
        if (!this.catalog.equals(that.catalog))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCatalog()) ? 131071 : 524287);
      if (isSetCatalog())
        hashCode = hashCode * 8191 + catalog.hashCode();

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateMetadata_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCatalog(), other.isSetCatalog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCatalog()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog, other.catalog);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetTable(), other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateMetadata_args(");
      boolean first = true;

      sb.append("catalog:");
      if (this.catalog == null) {
        sb.append("null");
      } else {
        sb.append(this.catalog);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMetadata_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateMetadata_argsStandardScheme getScheme() {
        return new updateMetadata_argsStandardScheme();
      }
    }

    private static class updateMetadata_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateMetadata_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMetadata_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATALOG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.catalog = iprot.readString();
                struct.setCatalogIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMetadata_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.catalog != null) {
          oprot.writeFieldBegin(CATALOG_FIELD_DESC);
          oprot.writeString(struct.catalog);
          oprot.writeFieldEnd();
        }
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMetadata_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateMetadata_argsTupleScheme getScheme() {
        return new updateMetadata_argsTupleScheme();
      }
    }

    private static class updateMetadata_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateMetadata_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMetadata_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCatalog()) {
          optionals.set(0);
        }
        if (struct.isSetTable()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCatalog()) {
          oprot.writeString(struct.catalog);
        }
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMetadata_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.catalog = iprot.readString();
          struct.setCatalogIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateMetadata_result implements org.apache.thrift.TBase<updateMetadata_result, updateMetadata_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateMetadata_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMetadata_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateMetadata_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateMetadata_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMetadata_result.class, metaDataMap);
    }

    public updateMetadata_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMetadata_result(updateMetadata_result other) {
    }

    public updateMetadata_result deepCopy() {
      return new updateMetadata_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof updateMetadata_result)
        return this.equals((updateMetadata_result)that);
      return false;
    }

    public boolean equals(updateMetadata_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(updateMetadata_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateMetadata_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMetadata_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateMetadata_resultStandardScheme getScheme() {
        return new updateMetadata_resultStandardScheme();
      }
    }

    private static class updateMetadata_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateMetadata_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMetadata_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMetadata_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMetadata_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateMetadata_resultTupleScheme getScheme() {
        return new updateMetadata_resultTupleScheme();
      }
    }

    private static class updateMetadata_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateMetadata_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMetadata_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMetadata_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCompletionHints_args implements org.apache.thrift.TBase<getCompletionHints_args, getCompletionHints_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCompletionHints_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompletionHints_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWD_FIELD_DESC = new org.apache.thrift.protocol.TField("passwd", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CATALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField VISIBLE_TABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("visible_tables", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField CURSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("cursor", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompletionHints_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompletionHints_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String user; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String passwd; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String catalog; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> visible_tables; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String sql; // required
    public int cursor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short)1, "user"),
      PASSWD((short)2, "passwd"),
      CATALOG((short)3, "catalog"),
      VISIBLE_TABLES((short)4, "visible_tables"),
      SQL((short)5, "sql"),
      CURSOR((short)6, "cursor");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          case 2: // PASSWD
            return PASSWD;
          case 3: // CATALOG
            return CATALOG;
          case 4: // VISIBLE_TABLES
            return VISIBLE_TABLES;
          case 5: // SQL
            return SQL;
          case 6: // CURSOR
            return CURSOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CURSOR_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWD, new org.apache.thrift.meta_data.FieldMetaData("passwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CATALOG, new org.apache.thrift.meta_data.FieldMetaData("catalog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBLE_TABLES, new org.apache.thrift.meta_data.FieldMetaData("visible_tables", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CURSOR, new org.apache.thrift.meta_data.FieldMetaData("cursor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompletionHints_args.class, metaDataMap);
    }

    public getCompletionHints_args() {
    }

    public getCompletionHints_args(
      java.lang.String user,
      java.lang.String passwd,
      java.lang.String catalog,
      java.util.List<java.lang.String> visible_tables,
      java.lang.String sql,
      int cursor)
    {
      this();
      this.user = user;
      this.passwd = passwd;
      this.catalog = catalog;
      this.visible_tables = visible_tables;
      this.sql = sql;
      this.cursor = cursor;
      setCursorIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompletionHints_args(getCompletionHints_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetPasswd()) {
        this.passwd = other.passwd;
      }
      if (other.isSetCatalog()) {
        this.catalog = other.catalog;
      }
      if (other.isSetVisible_tables()) {
        java.util.List<java.lang.String> __this__visible_tables = new java.util.ArrayList<java.lang.String>(other.visible_tables);
        this.visible_tables = __this__visible_tables;
      }
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
      this.cursor = other.cursor;
    }

    public getCompletionHints_args deepCopy() {
      return new getCompletionHints_args(this);
    }

    @Override
    public void clear() {
      this.user = null;
      this.passwd = null;
      this.catalog = null;
      this.visible_tables = null;
      this.sql = null;
      setCursorIsSet(false);
      this.cursor = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUser() {
      return this.user;
    }

    public getCompletionHints_args setUser(@org.apache.thrift.annotation.Nullable java.lang.String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPasswd() {
      return this.passwd;
    }

    public getCompletionHints_args setPasswd(@org.apache.thrift.annotation.Nullable java.lang.String passwd) {
      this.passwd = passwd;
      return this;
    }

    public void unsetPasswd() {
      this.passwd = null;
    }

    /** Returns true if field passwd is set (has been assigned a value) and false otherwise */
    public boolean isSetPasswd() {
      return this.passwd != null;
    }

    public void setPasswdIsSet(boolean value) {
      if (!value) {
        this.passwd = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCatalog() {
      return this.catalog;
    }

    public getCompletionHints_args setCatalog(@org.apache.thrift.annotation.Nullable java.lang.String catalog) {
      this.catalog = catalog;
      return this;
    }

    public void unsetCatalog() {
      this.catalog = null;
    }

    /** Returns true if field catalog is set (has been assigned a value) and false otherwise */
    public boolean isSetCatalog() {
      return this.catalog != null;
    }

    public void setCatalogIsSet(boolean value) {
      if (!value) {
        this.catalog = null;
      }
    }

    public int getVisible_tablesSize() {
      return (this.visible_tables == null) ? 0 : this.visible_tables.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getVisible_tablesIterator() {
      return (this.visible_tables == null) ? null : this.visible_tables.iterator();
    }

    public void addToVisible_tables(java.lang.String elem) {
      if (this.visible_tables == null) {
        this.visible_tables = new java.util.ArrayList<java.lang.String>();
      }
      this.visible_tables.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getVisible_tables() {
      return this.visible_tables;
    }

    public getCompletionHints_args setVisible_tables(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> visible_tables) {
      this.visible_tables = visible_tables;
      return this;
    }

    public void unsetVisible_tables() {
      this.visible_tables = null;
    }

    /** Returns true if field visible_tables is set (has been assigned a value) and false otherwise */
    public boolean isSetVisible_tables() {
      return this.visible_tables != null;
    }

    public void setVisible_tablesIsSet(boolean value) {
      if (!value) {
        this.visible_tables = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSql() {
      return this.sql;
    }

    public getCompletionHints_args setSql(@org.apache.thrift.annotation.Nullable java.lang.String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public int getCursor() {
      return this.cursor;
    }

    public getCompletionHints_args setCursor(int cursor) {
      this.cursor = cursor;
      setCursorIsSet(true);
      return this;
    }

    public void unsetCursor() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURSOR_ISSET_ID);
    }

    /** Returns true if field cursor is set (has been assigned a value) and false otherwise */
    public boolean isSetCursor() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURSOR_ISSET_ID);
    }

    public void setCursorIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CURSOR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((java.lang.String)value);
        }
        break;

      case PASSWD:
        if (value == null) {
          unsetPasswd();
        } else {
          setPasswd((java.lang.String)value);
        }
        break;

      case CATALOG:
        if (value == null) {
          unsetCatalog();
        } else {
          setCatalog((java.lang.String)value);
        }
        break;

      case VISIBLE_TABLES:
        if (value == null) {
          unsetVisible_tables();
        } else {
          setVisible_tables((java.util.List<java.lang.String>)value);
        }
        break;

      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((java.lang.String)value);
        }
        break;

      case CURSOR:
        if (value == null) {
          unsetCursor();
        } else {
          setCursor((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      case PASSWD:
        return getPasswd();

      case CATALOG:
        return getCatalog();

      case VISIBLE_TABLES:
        return getVisible_tables();

      case SQL:
        return getSql();

      case CURSOR:
        return getCursor();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      case PASSWD:
        return isSetPasswd();
      case CATALOG:
        return isSetCatalog();
      case VISIBLE_TABLES:
        return isSetVisible_tables();
      case SQL:
        return isSetSql();
      case CURSOR:
        return isSetCursor();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getCompletionHints_args)
        return this.equals((getCompletionHints_args)that);
      return false;
    }

    public boolean equals(getCompletionHints_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_passwd = true && this.isSetPasswd();
      boolean that_present_passwd = true && that.isSetPasswd();
      if (this_present_passwd || that_present_passwd) {
        if (!(this_present_passwd && that_present_passwd))
          return false;
        if (!this.passwd.equals(that.passwd))
          return false;
      }

      boolean this_present_catalog = true && this.isSetCatalog();
      boolean that_present_catalog = true && that.isSetCatalog();
      if (this_present_catalog || that_present_catalog) {
        if (!(this_present_catalog && that_present_catalog))
          return false;
        if (!this.catalog.equals(that.catalog))
          return false;
      }

      boolean this_present_visible_tables = true && this.isSetVisible_tables();
      boolean that_present_visible_tables = true && that.isSetVisible_tables();
      if (this_present_visible_tables || that_present_visible_tables) {
        if (!(this_present_visible_tables && that_present_visible_tables))
          return false;
        if (!this.visible_tables.equals(that.visible_tables))
          return false;
      }

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_cursor = true;
      boolean that_present_cursor = true;
      if (this_present_cursor || that_present_cursor) {
        if (!(this_present_cursor && that_present_cursor))
          return false;
        if (this.cursor != that.cursor)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
      if (isSetUser())
        hashCode = hashCode * 8191 + user.hashCode();

      hashCode = hashCode * 8191 + ((isSetPasswd()) ? 131071 : 524287);
      if (isSetPasswd())
        hashCode = hashCode * 8191 + passwd.hashCode();

      hashCode = hashCode * 8191 + ((isSetCatalog()) ? 131071 : 524287);
      if (isSetCatalog())
        hashCode = hashCode * 8191 + catalog.hashCode();

      hashCode = hashCode * 8191 + ((isSetVisible_tables()) ? 131071 : 524287);
      if (isSetVisible_tables())
        hashCode = hashCode * 8191 + visible_tables.hashCode();

      hashCode = hashCode * 8191 + ((isSetSql()) ? 131071 : 524287);
      if (isSetSql())
        hashCode = hashCode * 8191 + sql.hashCode();

      hashCode = hashCode * 8191 + cursor;

      return hashCode;
    }

    @Override
    public int compareTo(getCompletionHints_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetUser(), other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPasswd(), other.isSetPasswd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPasswd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passwd, other.passwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCatalog(), other.isSetCatalog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCatalog()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog, other.catalog);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetVisible_tables(), other.isSetVisible_tables());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisible_tables()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visible_tables, other.visible_tables);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSql(), other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCursor(), other.isSetCursor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCursor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cursor, other.cursor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompletionHints_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("passwd:");
      if (this.passwd == null) {
        sb.append("null");
      } else {
        sb.append(this.passwd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("catalog:");
      if (this.catalog == null) {
        sb.append("null");
      } else {
        sb.append(this.catalog);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visible_tables:");
      if (this.visible_tables == null) {
        sb.append("null");
      } else {
        sb.append(this.visible_tables);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cursor:");
      sb.append(this.cursor);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCompletionHints_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompletionHints_argsStandardScheme getScheme() {
        return new getCompletionHints_argsStandardScheme();
      }
    }

    private static class getCompletionHints_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompletionHints_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCompletionHints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.passwd = iprot.readString();
                struct.setPasswdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CATALOG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.catalog = iprot.readString();
                struct.setCatalogIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VISIBLE_TABLES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.visible_tables = new java.util.ArrayList<java.lang.String>(_list104.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = iprot.readString();
                    struct.visible_tables.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setVisible_tablesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CURSOR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cursor = iprot.readI32();
                struct.setCursorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCompletionHints_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.passwd != null) {
          oprot.writeFieldBegin(PASSWD_FIELD_DESC);
          oprot.writeString(struct.passwd);
          oprot.writeFieldEnd();
        }
        if (struct.catalog != null) {
          oprot.writeFieldBegin(CATALOG_FIELD_DESC);
          oprot.writeString(struct.catalog);
          oprot.writeFieldEnd();
        }
        if (struct.visible_tables != null) {
          oprot.writeFieldBegin(VISIBLE_TABLES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.visible_tables.size()));
            for (java.lang.String _iter107 : struct.visible_tables)
            {
              oprot.writeString(_iter107);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CURSOR_FIELD_DESC);
        oprot.writeI32(struct.cursor);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCompletionHints_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompletionHints_argsTupleScheme getScheme() {
        return new getCompletionHints_argsTupleScheme();
      }
    }

    private static class getCompletionHints_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompletionHints_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCompletionHints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        if (struct.isSetPasswd()) {
          optionals.set(1);
        }
        if (struct.isSetCatalog()) {
          optionals.set(2);
        }
        if (struct.isSetVisible_tables()) {
          optionals.set(3);
        }
        if (struct.isSetSql()) {
          optionals.set(4);
        }
        if (struct.isSetCursor()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetPasswd()) {
          oprot.writeString(struct.passwd);
        }
        if (struct.isSetCatalog()) {
          oprot.writeString(struct.catalog);
        }
        if (struct.isSetVisible_tables()) {
          {
            oprot.writeI32(struct.visible_tables.size());
            for (java.lang.String _iter108 : struct.visible_tables)
            {
              oprot.writeString(_iter108);
            }
          }
        }
        if (struct.isSetSql()) {
          oprot.writeString(struct.sql);
        }
        if (struct.isSetCursor()) {
          oprot.writeI32(struct.cursor);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCompletionHints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(1)) {
          struct.passwd = iprot.readString();
          struct.setPasswdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.catalog = iprot.readString();
          struct.setCatalogIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list109 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.visible_tables = new java.util.ArrayList<java.lang.String>(_list109.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = iprot.readString();
              struct.visible_tables.add(_elem110);
            }
          }
          struct.setVisible_tablesIsSet(true);
        }
        if (incoming.get(4)) {
          struct.sql = iprot.readString();
          struct.setSqlIsSet(true);
        }
        if (incoming.get(5)) {
          struct.cursor = iprot.readI32();
          struct.setCursorIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCompletionHints_result implements org.apache.thrift.TBase<getCompletionHints_result, getCompletionHints_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCompletionHints_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompletionHints_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCompletionHints_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCompletionHints_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<ai.heavy.thrift.calciteserver.TCompletionHint> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ai.heavy.thrift.calciteserver.TCompletionHint.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompletionHints_result.class, metaDataMap);
    }

    public getCompletionHints_result() {
    }

    public getCompletionHints_result(
      java.util.List<ai.heavy.thrift.calciteserver.TCompletionHint> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompletionHints_result(getCompletionHints_result other) {
      if (other.isSetSuccess()) {
        java.util.List<ai.heavy.thrift.calciteserver.TCompletionHint> __this__success = new java.util.ArrayList<ai.heavy.thrift.calciteserver.TCompletionHint>(other.success.size());
        for (ai.heavy.thrift.calciteserver.TCompletionHint other_element : other.success) {
          __this__success.add(new ai.heavy.thrift.calciteserver.TCompletionHint(other_element));
        }
        this.success = __this__success;
      }
    }

    public getCompletionHints_result deepCopy() {
      return new getCompletionHints_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<ai.heavy.thrift.calciteserver.TCompletionHint> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ai.heavy.thrift.calciteserver.TCompletionHint elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<ai.heavy.thrift.calciteserver.TCompletionHint>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<ai.heavy.thrift.calciteserver.TCompletionHint> getSuccess() {
      return this.success;
    }

    public getCompletionHints_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<ai.heavy.thrift.calciteserver.TCompletionHint> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<ai.heavy.thrift.calciteserver.TCompletionHint>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getCompletionHints_result)
        return this.equals((getCompletionHints_result)that);
      return false;
    }

    public boolean equals(getCompletionHints_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCompletionHints_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCompletionHints_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCompletionHints_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompletionHints_resultStandardScheme getScheme() {
        return new getCompletionHints_resultStandardScheme();
      }
    }

    private static class getCompletionHints_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCompletionHints_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCompletionHints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<ai.heavy.thrift.calciteserver.TCompletionHint>(_list112.size);
                  @org.apache.thrift.annotation.Nullable ai.heavy.thrift.calciteserver.TCompletionHint _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new ai.heavy.thrift.calciteserver.TCompletionHint();
                    _elem113.read(iprot);
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCompletionHints_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ai.heavy.thrift.calciteserver.TCompletionHint _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCompletionHints_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCompletionHints_resultTupleScheme getScheme() {
        return new getCompletionHints_resultTupleScheme();
      }
    }

    private static class getCompletionHints_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCompletionHints_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCompletionHints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ai.heavy.thrift.calciteserver.TCompletionHint _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCompletionHints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<ai.heavy.thrift.calciteserver.TCompletionHint>(_list117.size);
            @org.apache.thrift.annotation.Nullable ai.heavy.thrift.calciteserver.TCompletionHint _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new ai.heavy.thrift.calciteserver.TCompletionHint();
              _elem118.read(iprot);
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
