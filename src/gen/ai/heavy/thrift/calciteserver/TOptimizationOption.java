/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ai.heavy.thrift.calciteserver;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TOptimizationOption implements org.apache.thrift.TBase<TOptimizationOption, TOptimizationOption._Fields>, java.io.Serializable, Cloneable, Comparable<TOptimizationOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TOptimizationOption");

  private static final org.apache.thrift.protocol.TField IS_VIEW_OPTIMIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_view_optimize", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField ENABLE_WATCHDOG_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_watchdog", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField FILTER_PUSH_DOWN_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("filter_push_down_info", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TOptimizationOptionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TOptimizationOptionTupleSchemeFactory();

  public boolean is_view_optimize; // required
  public boolean enable_watchdog; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<TFilterPushDownInfo> filter_push_down_info; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_VIEW_OPTIMIZE((short)1, "is_view_optimize"),
    ENABLE_WATCHDOG((short)2, "enable_watchdog"),
    FILTER_PUSH_DOWN_INFO((short)3, "filter_push_down_info");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_VIEW_OPTIMIZE
          return IS_VIEW_OPTIMIZE;
        case 2: // ENABLE_WATCHDOG
          return ENABLE_WATCHDOG;
        case 3: // FILTER_PUSH_DOWN_INFO
          return FILTER_PUSH_DOWN_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_VIEW_OPTIMIZE_ISSET_ID = 0;
  private static final int __ENABLE_WATCHDOG_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_VIEW_OPTIMIZE, new org.apache.thrift.meta_data.FieldMetaData("is_view_optimize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_WATCHDOG, new org.apache.thrift.meta_data.FieldMetaData("enable_watchdog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FILTER_PUSH_DOWN_INFO, new org.apache.thrift.meta_data.FieldMetaData("filter_push_down_info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFilterPushDownInfo.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TOptimizationOption.class, metaDataMap);
  }

  public TOptimizationOption() {
  }

  public TOptimizationOption(
    boolean is_view_optimize,
    boolean enable_watchdog,
    java.util.List<TFilterPushDownInfo> filter_push_down_info)
  {
    this();
    this.is_view_optimize = is_view_optimize;
    setIs_view_optimizeIsSet(true);
    this.enable_watchdog = enable_watchdog;
    setEnable_watchdogIsSet(true);
    this.filter_push_down_info = filter_push_down_info;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TOptimizationOption(TOptimizationOption other) {
    __isset_bitfield = other.__isset_bitfield;
    this.is_view_optimize = other.is_view_optimize;
    this.enable_watchdog = other.enable_watchdog;
    if (other.isSetFilter_push_down_info()) {
      java.util.List<TFilterPushDownInfo> __this__filter_push_down_info = new java.util.ArrayList<TFilterPushDownInfo>(other.filter_push_down_info.size());
      for (TFilterPushDownInfo other_element : other.filter_push_down_info) {
        __this__filter_push_down_info.add(new TFilterPushDownInfo(other_element));
      }
      this.filter_push_down_info = __this__filter_push_down_info;
    }
  }

  public TOptimizationOption deepCopy() {
    return new TOptimizationOption(this);
  }

  @Override
  public void clear() {
    setIs_view_optimizeIsSet(false);
    this.is_view_optimize = false;
    setEnable_watchdogIsSet(false);
    this.enable_watchdog = false;
    this.filter_push_down_info = null;
  }

  public boolean isIs_view_optimize() {
    return this.is_view_optimize;
  }

  public TOptimizationOption setIs_view_optimize(boolean is_view_optimize) {
    this.is_view_optimize = is_view_optimize;
    setIs_view_optimizeIsSet(true);
    return this;
  }

  public void unsetIs_view_optimize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_VIEW_OPTIMIZE_ISSET_ID);
  }

  /** Returns true if field is_view_optimize is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_view_optimize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_VIEW_OPTIMIZE_ISSET_ID);
  }

  public void setIs_view_optimizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_VIEW_OPTIMIZE_ISSET_ID, value);
  }

  public boolean isEnable_watchdog() {
    return this.enable_watchdog;
  }

  public TOptimizationOption setEnable_watchdog(boolean enable_watchdog) {
    this.enable_watchdog = enable_watchdog;
    setEnable_watchdogIsSet(true);
    return this;
  }

  public void unsetEnable_watchdog() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_WATCHDOG_ISSET_ID);
  }

  /** Returns true if field enable_watchdog is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_watchdog() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_WATCHDOG_ISSET_ID);
  }

  public void setEnable_watchdogIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_WATCHDOG_ISSET_ID, value);
  }

  public int getFilter_push_down_infoSize() {
    return (this.filter_push_down_info == null) ? 0 : this.filter_push_down_info.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TFilterPushDownInfo> getFilter_push_down_infoIterator() {
    return (this.filter_push_down_info == null) ? null : this.filter_push_down_info.iterator();
  }

  public void addToFilter_push_down_info(TFilterPushDownInfo elem) {
    if (this.filter_push_down_info == null) {
      this.filter_push_down_info = new java.util.ArrayList<TFilterPushDownInfo>();
    }
    this.filter_push_down_info.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TFilterPushDownInfo> getFilter_push_down_info() {
    return this.filter_push_down_info;
  }

  public TOptimizationOption setFilter_push_down_info(@org.apache.thrift.annotation.Nullable java.util.List<TFilterPushDownInfo> filter_push_down_info) {
    this.filter_push_down_info = filter_push_down_info;
    return this;
  }

  public void unsetFilter_push_down_info() {
    this.filter_push_down_info = null;
  }

  /** Returns true if field filter_push_down_info is set (has been assigned a value) and false otherwise */
  public boolean isSetFilter_push_down_info() {
    return this.filter_push_down_info != null;
  }

  public void setFilter_push_down_infoIsSet(boolean value) {
    if (!value) {
      this.filter_push_down_info = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case IS_VIEW_OPTIMIZE:
      if (value == null) {
        unsetIs_view_optimize();
      } else {
        setIs_view_optimize((java.lang.Boolean)value);
      }
      break;

    case ENABLE_WATCHDOG:
      if (value == null) {
        unsetEnable_watchdog();
      } else {
        setEnable_watchdog((java.lang.Boolean)value);
      }
      break;

    case FILTER_PUSH_DOWN_INFO:
      if (value == null) {
        unsetFilter_push_down_info();
      } else {
        setFilter_push_down_info((java.util.List<TFilterPushDownInfo>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_VIEW_OPTIMIZE:
      return isIs_view_optimize();

    case ENABLE_WATCHDOG:
      return isEnable_watchdog();

    case FILTER_PUSH_DOWN_INFO:
      return getFilter_push_down_info();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case IS_VIEW_OPTIMIZE:
      return isSetIs_view_optimize();
    case ENABLE_WATCHDOG:
      return isSetEnable_watchdog();
    case FILTER_PUSH_DOWN_INFO:
      return isSetFilter_push_down_info();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TOptimizationOption)
      return this.equals((TOptimizationOption)that);
    return false;
  }

  public boolean equals(TOptimizationOption that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_is_view_optimize = true;
    boolean that_present_is_view_optimize = true;
    if (this_present_is_view_optimize || that_present_is_view_optimize) {
      if (!(this_present_is_view_optimize && that_present_is_view_optimize))
        return false;
      if (this.is_view_optimize != that.is_view_optimize)
        return false;
    }

    boolean this_present_enable_watchdog = true;
    boolean that_present_enable_watchdog = true;
    if (this_present_enable_watchdog || that_present_enable_watchdog) {
      if (!(this_present_enable_watchdog && that_present_enable_watchdog))
        return false;
      if (this.enable_watchdog != that.enable_watchdog)
        return false;
    }

    boolean this_present_filter_push_down_info = true && this.isSetFilter_push_down_info();
    boolean that_present_filter_push_down_info = true && that.isSetFilter_push_down_info();
    if (this_present_filter_push_down_info || that_present_filter_push_down_info) {
      if (!(this_present_filter_push_down_info && that_present_filter_push_down_info))
        return false;
      if (!this.filter_push_down_info.equals(that.filter_push_down_info))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((is_view_optimize) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((enable_watchdog) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetFilter_push_down_info()) ? 131071 : 524287);
    if (isSetFilter_push_down_info())
      hashCode = hashCode * 8191 + filter_push_down_info.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TOptimizationOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetIs_view_optimize(), other.isSetIs_view_optimize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_view_optimize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_view_optimize, other.is_view_optimize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_watchdog(), other.isSetEnable_watchdog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_watchdog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_watchdog, other.enable_watchdog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFilter_push_down_info(), other.isSetFilter_push_down_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter_push_down_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter_push_down_info, other.filter_push_down_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TOptimizationOption(");
    boolean first = true;

    sb.append("is_view_optimize:");
    sb.append(this.is_view_optimize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("enable_watchdog:");
    sb.append(this.enable_watchdog);
    first = false;
    if (!first) sb.append(", ");
    sb.append("filter_push_down_info:");
    if (this.filter_push_down_info == null) {
      sb.append("null");
    } else {
      sb.append(this.filter_push_down_info);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TOptimizationOptionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TOptimizationOptionStandardScheme getScheme() {
      return new TOptimizationOptionStandardScheme();
    }
  }

  private static class TOptimizationOptionStandardScheme extends org.apache.thrift.scheme.StandardScheme<TOptimizationOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TOptimizationOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_VIEW_OPTIMIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_view_optimize = iprot.readBool();
              struct.setIs_view_optimizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ENABLE_WATCHDOG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_watchdog = iprot.readBool();
              struct.setEnable_watchdogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILTER_PUSH_DOWN_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.filter_push_down_info = new java.util.ArrayList<TFilterPushDownInfo>(_list72.size);
                @org.apache.thrift.annotation.Nullable TFilterPushDownInfo _elem73;
                for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                {
                  _elem73 = new TFilterPushDownInfo();
                  _elem73.read(iprot);
                  struct.filter_push_down_info.add(_elem73);
                }
                iprot.readListEnd();
              }
              struct.setFilter_push_down_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TOptimizationOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_VIEW_OPTIMIZE_FIELD_DESC);
      oprot.writeBool(struct.is_view_optimize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENABLE_WATCHDOG_FIELD_DESC);
      oprot.writeBool(struct.enable_watchdog);
      oprot.writeFieldEnd();
      if (struct.filter_push_down_info != null) {
        oprot.writeFieldBegin(FILTER_PUSH_DOWN_INFO_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.filter_push_down_info.size()));
          for (TFilterPushDownInfo _iter75 : struct.filter_push_down_info)
          {
            _iter75.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TOptimizationOptionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TOptimizationOptionTupleScheme getScheme() {
      return new TOptimizationOptionTupleScheme();
    }
  }

  private static class TOptimizationOptionTupleScheme extends org.apache.thrift.scheme.TupleScheme<TOptimizationOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TOptimizationOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIs_view_optimize()) {
        optionals.set(0);
      }
      if (struct.isSetEnable_watchdog()) {
        optionals.set(1);
      }
      if (struct.isSetFilter_push_down_info()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetIs_view_optimize()) {
        oprot.writeBool(struct.is_view_optimize);
      }
      if (struct.isSetEnable_watchdog()) {
        oprot.writeBool(struct.enable_watchdog);
      }
      if (struct.isSetFilter_push_down_info()) {
        {
          oprot.writeI32(struct.filter_push_down_info.size());
          for (TFilterPushDownInfo _iter76 : struct.filter_push_down_info)
          {
            _iter76.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TOptimizationOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.is_view_optimize = iprot.readBool();
        struct.setIs_view_optimizeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.enable_watchdog = iprot.readBool();
        struct.setEnable_watchdogIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list77 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.filter_push_down_info = new java.util.ArrayList<TFilterPushDownInfo>(_list77.size);
          @org.apache.thrift.annotation.Nullable TFilterPushDownInfo _elem78;
          for (int _i79 = 0; _i79 < _list77.size; ++_i79)
          {
            _elem78 = new TFilterPushDownInfo();
            _elem78.read(iprot);
            struct.filter_push_down_info.add(_elem78);
          }
        }
        struct.setFilter_push_down_infoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

