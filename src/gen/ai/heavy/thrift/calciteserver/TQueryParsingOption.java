/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ai.heavy.thrift.calciteserver;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TQueryParsingOption implements org.apache.thrift.TBase<TQueryParsingOption, TQueryParsingOption._Fields>, java.io.Serializable, Cloneable, Comparable<TQueryParsingOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQueryParsingOption");

  private static final org.apache.thrift.protocol.TField LEGACY_SYNTAX_FIELD_DESC = new org.apache.thrift.protocol.TField("legacy_syntax", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField IS_EXPLAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("is_explain", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField CHECK_PRIVILEGES_FIELD_DESC = new org.apache.thrift.protocol.TField("check_privileges", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TQueryParsingOptionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TQueryParsingOptionTupleSchemeFactory();

  public boolean legacy_syntax; // required
  public boolean is_explain; // required
  public boolean check_privileges; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LEGACY_SYNTAX((short)1, "legacy_syntax"),
    IS_EXPLAIN((short)2, "is_explain"),
    CHECK_PRIVILEGES((short)3, "check_privileges");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LEGACY_SYNTAX
          return LEGACY_SYNTAX;
        case 2: // IS_EXPLAIN
          return IS_EXPLAIN;
        case 3: // CHECK_PRIVILEGES
          return CHECK_PRIVILEGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LEGACY_SYNTAX_ISSET_ID = 0;
  private static final int __IS_EXPLAIN_ISSET_ID = 1;
  private static final int __CHECK_PRIVILEGES_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LEGACY_SYNTAX, new org.apache.thrift.meta_data.FieldMetaData("legacy_syntax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_EXPLAIN, new org.apache.thrift.meta_data.FieldMetaData("is_explain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECK_PRIVILEGES, new org.apache.thrift.meta_data.FieldMetaData("check_privileges", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQueryParsingOption.class, metaDataMap);
  }

  public TQueryParsingOption() {
  }

  public TQueryParsingOption(
    boolean legacy_syntax,
    boolean is_explain,
    boolean check_privileges)
  {
    this();
    this.legacy_syntax = legacy_syntax;
    setLegacy_syntaxIsSet(true);
    this.is_explain = is_explain;
    setIs_explainIsSet(true);
    this.check_privileges = check_privileges;
    setCheck_privilegesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQueryParsingOption(TQueryParsingOption other) {
    __isset_bitfield = other.__isset_bitfield;
    this.legacy_syntax = other.legacy_syntax;
    this.is_explain = other.is_explain;
    this.check_privileges = other.check_privileges;
  }

  public TQueryParsingOption deepCopy() {
    return new TQueryParsingOption(this);
  }

  @Override
  public void clear() {
    setLegacy_syntaxIsSet(false);
    this.legacy_syntax = false;
    setIs_explainIsSet(false);
    this.is_explain = false;
    setCheck_privilegesIsSet(false);
    this.check_privileges = false;
  }

  public boolean isLegacy_syntax() {
    return this.legacy_syntax;
  }

  public TQueryParsingOption setLegacy_syntax(boolean legacy_syntax) {
    this.legacy_syntax = legacy_syntax;
    setLegacy_syntaxIsSet(true);
    return this;
  }

  public void unsetLegacy_syntax() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LEGACY_SYNTAX_ISSET_ID);
  }

  /** Returns true if field legacy_syntax is set (has been assigned a value) and false otherwise */
  public boolean isSetLegacy_syntax() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LEGACY_SYNTAX_ISSET_ID);
  }

  public void setLegacy_syntaxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LEGACY_SYNTAX_ISSET_ID, value);
  }

  public boolean isIs_explain() {
    return this.is_explain;
  }

  public TQueryParsingOption setIs_explain(boolean is_explain) {
    this.is_explain = is_explain;
    setIs_explainIsSet(true);
    return this;
  }

  public void unsetIs_explain() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_EXPLAIN_ISSET_ID);
  }

  /** Returns true if field is_explain is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_explain() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_EXPLAIN_ISSET_ID);
  }

  public void setIs_explainIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_EXPLAIN_ISSET_ID, value);
  }

  public boolean isCheck_privileges() {
    return this.check_privileges;
  }

  public TQueryParsingOption setCheck_privileges(boolean check_privileges) {
    this.check_privileges = check_privileges;
    setCheck_privilegesIsSet(true);
    return this;
  }

  public void unsetCheck_privileges() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECK_PRIVILEGES_ISSET_ID);
  }

  /** Returns true if field check_privileges is set (has been assigned a value) and false otherwise */
  public boolean isSetCheck_privileges() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECK_PRIVILEGES_ISSET_ID);
  }

  public void setCheck_privilegesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECK_PRIVILEGES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LEGACY_SYNTAX:
      if (value == null) {
        unsetLegacy_syntax();
      } else {
        setLegacy_syntax((java.lang.Boolean)value);
      }
      break;

    case IS_EXPLAIN:
      if (value == null) {
        unsetIs_explain();
      } else {
        setIs_explain((java.lang.Boolean)value);
      }
      break;

    case CHECK_PRIVILEGES:
      if (value == null) {
        unsetCheck_privileges();
      } else {
        setCheck_privileges((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LEGACY_SYNTAX:
      return isLegacy_syntax();

    case IS_EXPLAIN:
      return isIs_explain();

    case CHECK_PRIVILEGES:
      return isCheck_privileges();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LEGACY_SYNTAX:
      return isSetLegacy_syntax();
    case IS_EXPLAIN:
      return isSetIs_explain();
    case CHECK_PRIVILEGES:
      return isSetCheck_privileges();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TQueryParsingOption)
      return this.equals((TQueryParsingOption)that);
    return false;
  }

  public boolean equals(TQueryParsingOption that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_legacy_syntax = true;
    boolean that_present_legacy_syntax = true;
    if (this_present_legacy_syntax || that_present_legacy_syntax) {
      if (!(this_present_legacy_syntax && that_present_legacy_syntax))
        return false;
      if (this.legacy_syntax != that.legacy_syntax)
        return false;
    }

    boolean this_present_is_explain = true;
    boolean that_present_is_explain = true;
    if (this_present_is_explain || that_present_is_explain) {
      if (!(this_present_is_explain && that_present_is_explain))
        return false;
      if (this.is_explain != that.is_explain)
        return false;
    }

    boolean this_present_check_privileges = true;
    boolean that_present_check_privileges = true;
    if (this_present_check_privileges || that_present_check_privileges) {
      if (!(this_present_check_privileges && that_present_check_privileges))
        return false;
      if (this.check_privileges != that.check_privileges)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((legacy_syntax) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((is_explain) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((check_privileges) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TQueryParsingOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetLegacy_syntax(), other.isSetLegacy_syntax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegacy_syntax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legacy_syntax, other.legacy_syntax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_explain(), other.isSetIs_explain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_explain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_explain, other.is_explain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCheck_privileges(), other.isSetCheck_privileges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheck_privileges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.check_privileges, other.check_privileges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TQueryParsingOption(");
    boolean first = true;

    sb.append("legacy_syntax:");
    sb.append(this.legacy_syntax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_explain:");
    sb.append(this.is_explain);
    first = false;
    if (!first) sb.append(", ");
    sb.append("check_privileges:");
    sb.append(this.check_privileges);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQueryParsingOptionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TQueryParsingOptionStandardScheme getScheme() {
      return new TQueryParsingOptionStandardScheme();
    }
  }

  private static class TQueryParsingOptionStandardScheme extends org.apache.thrift.scheme.StandardScheme<TQueryParsingOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TQueryParsingOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LEGACY_SYNTAX
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.legacy_syntax = iprot.readBool();
              struct.setLegacy_syntaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_EXPLAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_explain = iprot.readBool();
              struct.setIs_explainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHECK_PRIVILEGES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.check_privileges = iprot.readBool();
              struct.setCheck_privilegesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TQueryParsingOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LEGACY_SYNTAX_FIELD_DESC);
      oprot.writeBool(struct.legacy_syntax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_EXPLAIN_FIELD_DESC);
      oprot.writeBool(struct.is_explain);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHECK_PRIVILEGES_FIELD_DESC);
      oprot.writeBool(struct.check_privileges);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQueryParsingOptionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TQueryParsingOptionTupleScheme getScheme() {
      return new TQueryParsingOptionTupleScheme();
    }
  }

  private static class TQueryParsingOptionTupleScheme extends org.apache.thrift.scheme.TupleScheme<TQueryParsingOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQueryParsingOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLegacy_syntax()) {
        optionals.set(0);
      }
      if (struct.isSetIs_explain()) {
        optionals.set(1);
      }
      if (struct.isSetCheck_privileges()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetLegacy_syntax()) {
        oprot.writeBool(struct.legacy_syntax);
      }
      if (struct.isSetIs_explain()) {
        oprot.writeBool(struct.is_explain);
      }
      if (struct.isSetCheck_privileges()) {
        oprot.writeBool(struct.check_privileges);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQueryParsingOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.legacy_syntax = iprot.readBool();
        struct.setLegacy_syntaxIsSet(true);
      }
      if (incoming.get(1)) {
        struct.is_explain = iprot.readBool();
        struct.setIs_explainIsSet(true);
      }
      if (incoming.get(2)) {
        struct.check_privileges = iprot.readBool();
        struct.setCheck_privilegesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

