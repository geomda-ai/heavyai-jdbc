/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ai.heavy.thrift.calciteserver;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TAccessedQueryObjects implements org.apache.thrift.TBase<TAccessedQueryObjects, TAccessedQueryObjects._Fields>, java.io.Serializable, Cloneable, Comparable<TAccessedQueryObjects> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAccessedQueryObjects");

  private static final org.apache.thrift.protocol.TField TABLES_SELECTED_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("tables_selected_from", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField TABLES_INSERTED_INTO_FIELD_DESC = new org.apache.thrift.protocol.TField("tables_inserted_into", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TABLES_UPDATED_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("tables_updated_in", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField TABLES_DELETED_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("tables_deleted_from", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TAccessedQueryObjectsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TAccessedQueryObjectsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.String>> tables_selected_from; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.String>> tables_inserted_into; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.String>> tables_updated_in; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.String>> tables_deleted_from; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLES_SELECTED_FROM((short)1, "tables_selected_from"),
    TABLES_INSERTED_INTO((short)2, "tables_inserted_into"),
    TABLES_UPDATED_IN((short)3, "tables_updated_in"),
    TABLES_DELETED_FROM((short)4, "tables_deleted_from");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLES_SELECTED_FROM
          return TABLES_SELECTED_FROM;
        case 2: // TABLES_INSERTED_INTO
          return TABLES_INSERTED_INTO;
        case 3: // TABLES_UPDATED_IN
          return TABLES_UPDATED_IN;
        case 4: // TABLES_DELETED_FROM
          return TABLES_DELETED_FROM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLES_SELECTED_FROM, new org.apache.thrift.meta_data.FieldMetaData("tables_selected_from", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.TABLES_INSERTED_INTO, new org.apache.thrift.meta_data.FieldMetaData("tables_inserted_into", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.TABLES_UPDATED_IN, new org.apache.thrift.meta_data.FieldMetaData("tables_updated_in", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.TABLES_DELETED_FROM, new org.apache.thrift.meta_data.FieldMetaData("tables_deleted_from", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAccessedQueryObjects.class, metaDataMap);
  }

  public TAccessedQueryObjects() {
  }

  public TAccessedQueryObjects(
    java.util.List<java.util.List<java.lang.String>> tables_selected_from,
    java.util.List<java.util.List<java.lang.String>> tables_inserted_into,
    java.util.List<java.util.List<java.lang.String>> tables_updated_in,
    java.util.List<java.util.List<java.lang.String>> tables_deleted_from)
  {
    this();
    this.tables_selected_from = tables_selected_from;
    this.tables_inserted_into = tables_inserted_into;
    this.tables_updated_in = tables_updated_in;
    this.tables_deleted_from = tables_deleted_from;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAccessedQueryObjects(TAccessedQueryObjects other) {
    if (other.isSetTables_selected_from()) {
      java.util.List<java.util.List<java.lang.String>> __this__tables_selected_from = new java.util.ArrayList<java.util.List<java.lang.String>>(other.tables_selected_from.size());
      for (java.util.List<java.lang.String> other_element : other.tables_selected_from) {
        java.util.List<java.lang.String> __this__tables_selected_from_copy = new java.util.ArrayList<java.lang.String>(other_element);
        __this__tables_selected_from.add(__this__tables_selected_from_copy);
      }
      this.tables_selected_from = __this__tables_selected_from;
    }
    if (other.isSetTables_inserted_into()) {
      java.util.List<java.util.List<java.lang.String>> __this__tables_inserted_into = new java.util.ArrayList<java.util.List<java.lang.String>>(other.tables_inserted_into.size());
      for (java.util.List<java.lang.String> other_element : other.tables_inserted_into) {
        java.util.List<java.lang.String> __this__tables_inserted_into_copy = new java.util.ArrayList<java.lang.String>(other_element);
        __this__tables_inserted_into.add(__this__tables_inserted_into_copy);
      }
      this.tables_inserted_into = __this__tables_inserted_into;
    }
    if (other.isSetTables_updated_in()) {
      java.util.List<java.util.List<java.lang.String>> __this__tables_updated_in = new java.util.ArrayList<java.util.List<java.lang.String>>(other.tables_updated_in.size());
      for (java.util.List<java.lang.String> other_element : other.tables_updated_in) {
        java.util.List<java.lang.String> __this__tables_updated_in_copy = new java.util.ArrayList<java.lang.String>(other_element);
        __this__tables_updated_in.add(__this__tables_updated_in_copy);
      }
      this.tables_updated_in = __this__tables_updated_in;
    }
    if (other.isSetTables_deleted_from()) {
      java.util.List<java.util.List<java.lang.String>> __this__tables_deleted_from = new java.util.ArrayList<java.util.List<java.lang.String>>(other.tables_deleted_from.size());
      for (java.util.List<java.lang.String> other_element : other.tables_deleted_from) {
        java.util.List<java.lang.String> __this__tables_deleted_from_copy = new java.util.ArrayList<java.lang.String>(other_element);
        __this__tables_deleted_from.add(__this__tables_deleted_from_copy);
      }
      this.tables_deleted_from = __this__tables_deleted_from;
    }
  }

  public TAccessedQueryObjects deepCopy() {
    return new TAccessedQueryObjects(this);
  }

  @Override
  public void clear() {
    this.tables_selected_from = null;
    this.tables_inserted_into = null;
    this.tables_updated_in = null;
    this.tables_deleted_from = null;
  }

  public int getTables_selected_fromSize() {
    return (this.tables_selected_from == null) ? 0 : this.tables_selected_from.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.String>> getTables_selected_fromIterator() {
    return (this.tables_selected_from == null) ? null : this.tables_selected_from.iterator();
  }

  public void addToTables_selected_from(java.util.List<java.lang.String> elem) {
    if (this.tables_selected_from == null) {
      this.tables_selected_from = new java.util.ArrayList<java.util.List<java.lang.String>>();
    }
    this.tables_selected_from.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.String>> getTables_selected_from() {
    return this.tables_selected_from;
  }

  public TAccessedQueryObjects setTables_selected_from(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.String>> tables_selected_from) {
    this.tables_selected_from = tables_selected_from;
    return this;
  }

  public void unsetTables_selected_from() {
    this.tables_selected_from = null;
  }

  /** Returns true if field tables_selected_from is set (has been assigned a value) and false otherwise */
  public boolean isSetTables_selected_from() {
    return this.tables_selected_from != null;
  }

  public void setTables_selected_fromIsSet(boolean value) {
    if (!value) {
      this.tables_selected_from = null;
    }
  }

  public int getTables_inserted_intoSize() {
    return (this.tables_inserted_into == null) ? 0 : this.tables_inserted_into.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.String>> getTables_inserted_intoIterator() {
    return (this.tables_inserted_into == null) ? null : this.tables_inserted_into.iterator();
  }

  public void addToTables_inserted_into(java.util.List<java.lang.String> elem) {
    if (this.tables_inserted_into == null) {
      this.tables_inserted_into = new java.util.ArrayList<java.util.List<java.lang.String>>();
    }
    this.tables_inserted_into.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.String>> getTables_inserted_into() {
    return this.tables_inserted_into;
  }

  public TAccessedQueryObjects setTables_inserted_into(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.String>> tables_inserted_into) {
    this.tables_inserted_into = tables_inserted_into;
    return this;
  }

  public void unsetTables_inserted_into() {
    this.tables_inserted_into = null;
  }

  /** Returns true if field tables_inserted_into is set (has been assigned a value) and false otherwise */
  public boolean isSetTables_inserted_into() {
    return this.tables_inserted_into != null;
  }

  public void setTables_inserted_intoIsSet(boolean value) {
    if (!value) {
      this.tables_inserted_into = null;
    }
  }

  public int getTables_updated_inSize() {
    return (this.tables_updated_in == null) ? 0 : this.tables_updated_in.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.String>> getTables_updated_inIterator() {
    return (this.tables_updated_in == null) ? null : this.tables_updated_in.iterator();
  }

  public void addToTables_updated_in(java.util.List<java.lang.String> elem) {
    if (this.tables_updated_in == null) {
      this.tables_updated_in = new java.util.ArrayList<java.util.List<java.lang.String>>();
    }
    this.tables_updated_in.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.String>> getTables_updated_in() {
    return this.tables_updated_in;
  }

  public TAccessedQueryObjects setTables_updated_in(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.String>> tables_updated_in) {
    this.tables_updated_in = tables_updated_in;
    return this;
  }

  public void unsetTables_updated_in() {
    this.tables_updated_in = null;
  }

  /** Returns true if field tables_updated_in is set (has been assigned a value) and false otherwise */
  public boolean isSetTables_updated_in() {
    return this.tables_updated_in != null;
  }

  public void setTables_updated_inIsSet(boolean value) {
    if (!value) {
      this.tables_updated_in = null;
    }
  }

  public int getTables_deleted_fromSize() {
    return (this.tables_deleted_from == null) ? 0 : this.tables_deleted_from.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.String>> getTables_deleted_fromIterator() {
    return (this.tables_deleted_from == null) ? null : this.tables_deleted_from.iterator();
  }

  public void addToTables_deleted_from(java.util.List<java.lang.String> elem) {
    if (this.tables_deleted_from == null) {
      this.tables_deleted_from = new java.util.ArrayList<java.util.List<java.lang.String>>();
    }
    this.tables_deleted_from.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.String>> getTables_deleted_from() {
    return this.tables_deleted_from;
  }

  public TAccessedQueryObjects setTables_deleted_from(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.String>> tables_deleted_from) {
    this.tables_deleted_from = tables_deleted_from;
    return this;
  }

  public void unsetTables_deleted_from() {
    this.tables_deleted_from = null;
  }

  /** Returns true if field tables_deleted_from is set (has been assigned a value) and false otherwise */
  public boolean isSetTables_deleted_from() {
    return this.tables_deleted_from != null;
  }

  public void setTables_deleted_fromIsSet(boolean value) {
    if (!value) {
      this.tables_deleted_from = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TABLES_SELECTED_FROM:
      if (value == null) {
        unsetTables_selected_from();
      } else {
        setTables_selected_from((java.util.List<java.util.List<java.lang.String>>)value);
      }
      break;

    case TABLES_INSERTED_INTO:
      if (value == null) {
        unsetTables_inserted_into();
      } else {
        setTables_inserted_into((java.util.List<java.util.List<java.lang.String>>)value);
      }
      break;

    case TABLES_UPDATED_IN:
      if (value == null) {
        unsetTables_updated_in();
      } else {
        setTables_updated_in((java.util.List<java.util.List<java.lang.String>>)value);
      }
      break;

    case TABLES_DELETED_FROM:
      if (value == null) {
        unsetTables_deleted_from();
      } else {
        setTables_deleted_from((java.util.List<java.util.List<java.lang.String>>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLES_SELECTED_FROM:
      return getTables_selected_from();

    case TABLES_INSERTED_INTO:
      return getTables_inserted_into();

    case TABLES_UPDATED_IN:
      return getTables_updated_in();

    case TABLES_DELETED_FROM:
      return getTables_deleted_from();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLES_SELECTED_FROM:
      return isSetTables_selected_from();
    case TABLES_INSERTED_INTO:
      return isSetTables_inserted_into();
    case TABLES_UPDATED_IN:
      return isSetTables_updated_in();
    case TABLES_DELETED_FROM:
      return isSetTables_deleted_from();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TAccessedQueryObjects)
      return this.equals((TAccessedQueryObjects)that);
    return false;
  }

  public boolean equals(TAccessedQueryObjects that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tables_selected_from = true && this.isSetTables_selected_from();
    boolean that_present_tables_selected_from = true && that.isSetTables_selected_from();
    if (this_present_tables_selected_from || that_present_tables_selected_from) {
      if (!(this_present_tables_selected_from && that_present_tables_selected_from))
        return false;
      if (!this.tables_selected_from.equals(that.tables_selected_from))
        return false;
    }

    boolean this_present_tables_inserted_into = true && this.isSetTables_inserted_into();
    boolean that_present_tables_inserted_into = true && that.isSetTables_inserted_into();
    if (this_present_tables_inserted_into || that_present_tables_inserted_into) {
      if (!(this_present_tables_inserted_into && that_present_tables_inserted_into))
        return false;
      if (!this.tables_inserted_into.equals(that.tables_inserted_into))
        return false;
    }

    boolean this_present_tables_updated_in = true && this.isSetTables_updated_in();
    boolean that_present_tables_updated_in = true && that.isSetTables_updated_in();
    if (this_present_tables_updated_in || that_present_tables_updated_in) {
      if (!(this_present_tables_updated_in && that_present_tables_updated_in))
        return false;
      if (!this.tables_updated_in.equals(that.tables_updated_in))
        return false;
    }

    boolean this_present_tables_deleted_from = true && this.isSetTables_deleted_from();
    boolean that_present_tables_deleted_from = true && that.isSetTables_deleted_from();
    if (this_present_tables_deleted_from || that_present_tables_deleted_from) {
      if (!(this_present_tables_deleted_from && that_present_tables_deleted_from))
        return false;
      if (!this.tables_deleted_from.equals(that.tables_deleted_from))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTables_selected_from()) ? 131071 : 524287);
    if (isSetTables_selected_from())
      hashCode = hashCode * 8191 + tables_selected_from.hashCode();

    hashCode = hashCode * 8191 + ((isSetTables_inserted_into()) ? 131071 : 524287);
    if (isSetTables_inserted_into())
      hashCode = hashCode * 8191 + tables_inserted_into.hashCode();

    hashCode = hashCode * 8191 + ((isSetTables_updated_in()) ? 131071 : 524287);
    if (isSetTables_updated_in())
      hashCode = hashCode * 8191 + tables_updated_in.hashCode();

    hashCode = hashCode * 8191 + ((isSetTables_deleted_from()) ? 131071 : 524287);
    if (isSetTables_deleted_from())
      hashCode = hashCode * 8191 + tables_deleted_from.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TAccessedQueryObjects other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTables_selected_from(), other.isSetTables_selected_from());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTables_selected_from()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tables_selected_from, other.tables_selected_from);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTables_inserted_into(), other.isSetTables_inserted_into());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTables_inserted_into()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tables_inserted_into, other.tables_inserted_into);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTables_updated_in(), other.isSetTables_updated_in());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTables_updated_in()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tables_updated_in, other.tables_updated_in);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTables_deleted_from(), other.isSetTables_deleted_from());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTables_deleted_from()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tables_deleted_from, other.tables_deleted_from);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TAccessedQueryObjects(");
    boolean first = true;

    sb.append("tables_selected_from:");
    if (this.tables_selected_from == null) {
      sb.append("null");
    } else {
      sb.append(this.tables_selected_from);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tables_inserted_into:");
    if (this.tables_inserted_into == null) {
      sb.append("null");
    } else {
      sb.append(this.tables_inserted_into);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tables_updated_in:");
    if (this.tables_updated_in == null) {
      sb.append("null");
    } else {
      sb.append(this.tables_updated_in);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tables_deleted_from:");
    if (this.tables_deleted_from == null) {
      sb.append("null");
    } else {
      sb.append(this.tables_deleted_from);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAccessedQueryObjectsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TAccessedQueryObjectsStandardScheme getScheme() {
      return new TAccessedQueryObjectsStandardScheme();
    }
  }

  private static class TAccessedQueryObjectsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TAccessedQueryObjects> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAccessedQueryObjects struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLES_SELECTED_FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.tables_selected_from = new java.util.ArrayList<java.util.List<java.lang.String>>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  {
                    org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                    _elem1 = new java.util.ArrayList<java.lang.String>(_list3.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _elem4;
                    for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                    {
                      _elem4 = iprot.readString();
                      _elem1.add(_elem4);
                    }
                    iprot.readListEnd();
                  }
                  struct.tables_selected_from.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTables_selected_fromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLES_INSERTED_INTO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.tables_inserted_into = new java.util.ArrayList<java.util.List<java.lang.String>>(_list6.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  {
                    org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                    _elem7 = new java.util.ArrayList<java.lang.String>(_list9.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _elem10;
                    for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                    {
                      _elem10 = iprot.readString();
                      _elem7.add(_elem10);
                    }
                    iprot.readListEnd();
                  }
                  struct.tables_inserted_into.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setTables_inserted_intoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLES_UPDATED_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.tables_updated_in = new java.util.ArrayList<java.util.List<java.lang.String>>(_list12.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  {
                    org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                    _elem13 = new java.util.ArrayList<java.lang.String>(_list15.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _elem16;
                    for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                    {
                      _elem16 = iprot.readString();
                      _elem13.add(_elem16);
                    }
                    iprot.readListEnd();
                  }
                  struct.tables_updated_in.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setTables_updated_inIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TABLES_DELETED_FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.tables_deleted_from = new java.util.ArrayList<java.util.List<java.lang.String>>(_list18.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  {
                    org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                    _elem19 = new java.util.ArrayList<java.lang.String>(_list21.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _elem22;
                    for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                    {
                      _elem22 = iprot.readString();
                      _elem19.add(_elem22);
                    }
                    iprot.readListEnd();
                  }
                  struct.tables_deleted_from.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setTables_deleted_fromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAccessedQueryObjects struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tables_selected_from != null) {
        oprot.writeFieldBegin(TABLES_SELECTED_FROM_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.tables_selected_from.size()));
          for (java.util.List<java.lang.String> _iter24 : struct.tables_selected_from)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter24.size()));
              for (java.lang.String _iter25 : _iter24)
              {
                oprot.writeString(_iter25);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.tables_inserted_into != null) {
        oprot.writeFieldBegin(TABLES_INSERTED_INTO_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.tables_inserted_into.size()));
          for (java.util.List<java.lang.String> _iter26 : struct.tables_inserted_into)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter26.size()));
              for (java.lang.String _iter27 : _iter26)
              {
                oprot.writeString(_iter27);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.tables_updated_in != null) {
        oprot.writeFieldBegin(TABLES_UPDATED_IN_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.tables_updated_in.size()));
          for (java.util.List<java.lang.String> _iter28 : struct.tables_updated_in)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter28.size()));
              for (java.lang.String _iter29 : _iter28)
              {
                oprot.writeString(_iter29);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.tables_deleted_from != null) {
        oprot.writeFieldBegin(TABLES_DELETED_FROM_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.tables_deleted_from.size()));
          for (java.util.List<java.lang.String> _iter30 : struct.tables_deleted_from)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter30.size()));
              for (java.lang.String _iter31 : _iter30)
              {
                oprot.writeString(_iter31);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAccessedQueryObjectsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TAccessedQueryObjectsTupleScheme getScheme() {
      return new TAccessedQueryObjectsTupleScheme();
    }
  }

  private static class TAccessedQueryObjectsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TAccessedQueryObjects> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAccessedQueryObjects struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTables_selected_from()) {
        optionals.set(0);
      }
      if (struct.isSetTables_inserted_into()) {
        optionals.set(1);
      }
      if (struct.isSetTables_updated_in()) {
        optionals.set(2);
      }
      if (struct.isSetTables_deleted_from()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTables_selected_from()) {
        {
          oprot.writeI32(struct.tables_selected_from.size());
          for (java.util.List<java.lang.String> _iter32 : struct.tables_selected_from)
          {
            {
              oprot.writeI32(_iter32.size());
              for (java.lang.String _iter33 : _iter32)
              {
                oprot.writeString(_iter33);
              }
            }
          }
        }
      }
      if (struct.isSetTables_inserted_into()) {
        {
          oprot.writeI32(struct.tables_inserted_into.size());
          for (java.util.List<java.lang.String> _iter34 : struct.tables_inserted_into)
          {
            {
              oprot.writeI32(_iter34.size());
              for (java.lang.String _iter35 : _iter34)
              {
                oprot.writeString(_iter35);
              }
            }
          }
        }
      }
      if (struct.isSetTables_updated_in()) {
        {
          oprot.writeI32(struct.tables_updated_in.size());
          for (java.util.List<java.lang.String> _iter36 : struct.tables_updated_in)
          {
            {
              oprot.writeI32(_iter36.size());
              for (java.lang.String _iter37 : _iter36)
              {
                oprot.writeString(_iter37);
              }
            }
          }
        }
      }
      if (struct.isSetTables_deleted_from()) {
        {
          oprot.writeI32(struct.tables_deleted_from.size());
          for (java.util.List<java.lang.String> _iter38 : struct.tables_deleted_from)
          {
            {
              oprot.writeI32(_iter38.size());
              for (java.lang.String _iter39 : _iter38)
              {
                oprot.writeString(_iter39);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAccessedQueryObjects struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list40 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
          struct.tables_selected_from = new java.util.ArrayList<java.util.List<java.lang.String>>(_list40.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _elem41;
          for (int _i42 = 0; _i42 < _list40.size; ++_i42)
          {
            {
              org.apache.thrift.protocol.TList _list43 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
              _elem41 = new java.util.ArrayList<java.lang.String>(_list43.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _elem44;
              for (int _i45 = 0; _i45 < _list43.size; ++_i45)
              {
                _elem44 = iprot.readString();
                _elem41.add(_elem44);
              }
            }
            struct.tables_selected_from.add(_elem41);
          }
        }
        struct.setTables_selected_fromIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list46 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
          struct.tables_inserted_into = new java.util.ArrayList<java.util.List<java.lang.String>>(_list46.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _elem47;
          for (int _i48 = 0; _i48 < _list46.size; ++_i48)
          {
            {
              org.apache.thrift.protocol.TList _list49 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
              _elem47 = new java.util.ArrayList<java.lang.String>(_list49.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _elem50;
              for (int _i51 = 0; _i51 < _list49.size; ++_i51)
              {
                _elem50 = iprot.readString();
                _elem47.add(_elem50);
              }
            }
            struct.tables_inserted_into.add(_elem47);
          }
        }
        struct.setTables_inserted_intoIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list52 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
          struct.tables_updated_in = new java.util.ArrayList<java.util.List<java.lang.String>>(_list52.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _elem53;
          for (int _i54 = 0; _i54 < _list52.size; ++_i54)
          {
            {
              org.apache.thrift.protocol.TList _list55 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
              _elem53 = new java.util.ArrayList<java.lang.String>(_list55.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _elem56;
              for (int _i57 = 0; _i57 < _list55.size; ++_i57)
              {
                _elem56 = iprot.readString();
                _elem53.add(_elem56);
              }
            }
            struct.tables_updated_in.add(_elem53);
          }
        }
        struct.setTables_updated_inIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list58 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
          struct.tables_deleted_from = new java.util.ArrayList<java.util.List<java.lang.String>>(_list58.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _elem59;
          for (int _i60 = 0; _i60 < _list58.size; ++_i60)
          {
            {
              org.apache.thrift.protocol.TList _list61 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
              _elem59 = new java.util.ArrayList<java.lang.String>(_list61.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _elem62;
              for (int _i63 = 0; _i63 < _list61.size; ++_i63)
              {
                _elem62 = iprot.readString();
                _elem59.add(_elem62);
              }
            }
            struct.tables_deleted_from.add(_elem59);
          }
        }
        struct.setTables_deleted_fromIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

