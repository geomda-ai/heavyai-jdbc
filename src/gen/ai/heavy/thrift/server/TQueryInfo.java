/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ai.heavy.thrift.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TQueryInfo implements org.apache.thrift.TBase<TQueryInfo, TQueryInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TQueryInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQueryInfo");

  private static final org.apache.thrift.protocol.TField QUERY_SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("query_session_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField QUERY_PUBLIC_SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("query_public_session_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CURRENT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("current_status", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EXECUTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("executor_id", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SUBMITTED_FIELD_DESC = new org.apache.thrift.protocol.TField("submitted", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField QUERY_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("query_str", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LOGIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("login_name", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CLIENT_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("client_address", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField EXEC_DEVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("exec_device_type", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TQueryInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TQueryInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String query_session_id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String query_public_session_id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String current_status; // required
  public int executor_id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String submitted; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String query_str; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String login_name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String client_address; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String db_name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String exec_device_type; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY_SESSION_ID((short)1, "query_session_id"),
    QUERY_PUBLIC_SESSION_ID((short)2, "query_public_session_id"),
    CURRENT_STATUS((short)3, "current_status"),
    EXECUTOR_ID((short)4, "executor_id"),
    SUBMITTED((short)5, "submitted"),
    QUERY_STR((short)6, "query_str"),
    LOGIN_NAME((short)7, "login_name"),
    CLIENT_ADDRESS((short)8, "client_address"),
    DB_NAME((short)9, "db_name"),
    EXEC_DEVICE_TYPE((short)10, "exec_device_type");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY_SESSION_ID
          return QUERY_SESSION_ID;
        case 2: // QUERY_PUBLIC_SESSION_ID
          return QUERY_PUBLIC_SESSION_ID;
        case 3: // CURRENT_STATUS
          return CURRENT_STATUS;
        case 4: // EXECUTOR_ID
          return EXECUTOR_ID;
        case 5: // SUBMITTED
          return SUBMITTED;
        case 6: // QUERY_STR
          return QUERY_STR;
        case 7: // LOGIN_NAME
          return LOGIN_NAME;
        case 8: // CLIENT_ADDRESS
          return CLIENT_ADDRESS;
        case 9: // DB_NAME
          return DB_NAME;
        case 10: // EXEC_DEVICE_TYPE
          return EXEC_DEVICE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXECUTOR_ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY_SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("query_session_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_PUBLIC_SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("query_public_session_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("current_status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("executor_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUBMITTED, new org.apache.thrift.meta_data.FieldMetaData("submitted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_STR, new org.apache.thrift.meta_data.FieldMetaData("query_str", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("login_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("client_address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXEC_DEVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("exec_device_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQueryInfo.class, metaDataMap);
  }

  public TQueryInfo() {
  }

  public TQueryInfo(
    java.lang.String query_session_id,
    java.lang.String query_public_session_id,
    java.lang.String current_status,
    int executor_id,
    java.lang.String submitted,
    java.lang.String query_str,
    java.lang.String login_name,
    java.lang.String client_address,
    java.lang.String db_name,
    java.lang.String exec_device_type)
  {
    this();
    this.query_session_id = query_session_id;
    this.query_public_session_id = query_public_session_id;
    this.current_status = current_status;
    this.executor_id = executor_id;
    setExecutor_idIsSet(true);
    this.submitted = submitted;
    this.query_str = query_str;
    this.login_name = login_name;
    this.client_address = client_address;
    this.db_name = db_name;
    this.exec_device_type = exec_device_type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQueryInfo(TQueryInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetQuery_session_id()) {
      this.query_session_id = other.query_session_id;
    }
    if (other.isSetQuery_public_session_id()) {
      this.query_public_session_id = other.query_public_session_id;
    }
    if (other.isSetCurrent_status()) {
      this.current_status = other.current_status;
    }
    this.executor_id = other.executor_id;
    if (other.isSetSubmitted()) {
      this.submitted = other.submitted;
    }
    if (other.isSetQuery_str()) {
      this.query_str = other.query_str;
    }
    if (other.isSetLogin_name()) {
      this.login_name = other.login_name;
    }
    if (other.isSetClient_address()) {
      this.client_address = other.client_address;
    }
    if (other.isSetDb_name()) {
      this.db_name = other.db_name;
    }
    if (other.isSetExec_device_type()) {
      this.exec_device_type = other.exec_device_type;
    }
  }

  public TQueryInfo deepCopy() {
    return new TQueryInfo(this);
  }

  @Override
  public void clear() {
    this.query_session_id = null;
    this.query_public_session_id = null;
    this.current_status = null;
    setExecutor_idIsSet(false);
    this.executor_id = 0;
    this.submitted = null;
    this.query_str = null;
    this.login_name = null;
    this.client_address = null;
    this.db_name = null;
    this.exec_device_type = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getQuery_session_id() {
    return this.query_session_id;
  }

  public TQueryInfo setQuery_session_id(@org.apache.thrift.annotation.Nullable java.lang.String query_session_id) {
    this.query_session_id = query_session_id;
    return this;
  }

  public void unsetQuery_session_id() {
    this.query_session_id = null;
  }

  /** Returns true if field query_session_id is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_session_id() {
    return this.query_session_id != null;
  }

  public void setQuery_session_idIsSet(boolean value) {
    if (!value) {
      this.query_session_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getQuery_public_session_id() {
    return this.query_public_session_id;
  }

  public TQueryInfo setQuery_public_session_id(@org.apache.thrift.annotation.Nullable java.lang.String query_public_session_id) {
    this.query_public_session_id = query_public_session_id;
    return this;
  }

  public void unsetQuery_public_session_id() {
    this.query_public_session_id = null;
  }

  /** Returns true if field query_public_session_id is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_public_session_id() {
    return this.query_public_session_id != null;
  }

  public void setQuery_public_session_idIsSet(boolean value) {
    if (!value) {
      this.query_public_session_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCurrent_status() {
    return this.current_status;
  }

  public TQueryInfo setCurrent_status(@org.apache.thrift.annotation.Nullable java.lang.String current_status) {
    this.current_status = current_status;
    return this;
  }

  public void unsetCurrent_status() {
    this.current_status = null;
  }

  /** Returns true if field current_status is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrent_status() {
    return this.current_status != null;
  }

  public void setCurrent_statusIsSet(boolean value) {
    if (!value) {
      this.current_status = null;
    }
  }

  public int getExecutor_id() {
    return this.executor_id;
  }

  public TQueryInfo setExecutor_id(int executor_id) {
    this.executor_id = executor_id;
    setExecutor_idIsSet(true);
    return this;
  }

  public void unsetExecutor_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXECUTOR_ID_ISSET_ID);
  }

  /** Returns true if field executor_id is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutor_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXECUTOR_ID_ISSET_ID);
  }

  public void setExecutor_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXECUTOR_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSubmitted() {
    return this.submitted;
  }

  public TQueryInfo setSubmitted(@org.apache.thrift.annotation.Nullable java.lang.String submitted) {
    this.submitted = submitted;
    return this;
  }

  public void unsetSubmitted() {
    this.submitted = null;
  }

  /** Returns true if field submitted is set (has been assigned a value) and false otherwise */
  public boolean isSetSubmitted() {
    return this.submitted != null;
  }

  public void setSubmittedIsSet(boolean value) {
    if (!value) {
      this.submitted = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getQuery_str() {
    return this.query_str;
  }

  public TQueryInfo setQuery_str(@org.apache.thrift.annotation.Nullable java.lang.String query_str) {
    this.query_str = query_str;
    return this;
  }

  public void unsetQuery_str() {
    this.query_str = null;
  }

  /** Returns true if field query_str is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_str() {
    return this.query_str != null;
  }

  public void setQuery_strIsSet(boolean value) {
    if (!value) {
      this.query_str = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLogin_name() {
    return this.login_name;
  }

  public TQueryInfo setLogin_name(@org.apache.thrift.annotation.Nullable java.lang.String login_name) {
    this.login_name = login_name;
    return this;
  }

  public void unsetLogin_name() {
    this.login_name = null;
  }

  /** Returns true if field login_name is set (has been assigned a value) and false otherwise */
  public boolean isSetLogin_name() {
    return this.login_name != null;
  }

  public void setLogin_nameIsSet(boolean value) {
    if (!value) {
      this.login_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getClient_address() {
    return this.client_address;
  }

  public TQueryInfo setClient_address(@org.apache.thrift.annotation.Nullable java.lang.String client_address) {
    this.client_address = client_address;
    return this;
  }

  public void unsetClient_address() {
    this.client_address = null;
  }

  /** Returns true if field client_address is set (has been assigned a value) and false otherwise */
  public boolean isSetClient_address() {
    return this.client_address != null;
  }

  public void setClient_addressIsSet(boolean value) {
    if (!value) {
      this.client_address = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb_name() {
    return this.db_name;
  }

  public TQueryInfo setDb_name(@org.apache.thrift.annotation.Nullable java.lang.String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDb_name() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_name() {
    return this.db_name != null;
  }

  public void setDb_nameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getExec_device_type() {
    return this.exec_device_type;
  }

  public TQueryInfo setExec_device_type(@org.apache.thrift.annotation.Nullable java.lang.String exec_device_type) {
    this.exec_device_type = exec_device_type;
    return this;
  }

  public void unsetExec_device_type() {
    this.exec_device_type = null;
  }

  /** Returns true if field exec_device_type is set (has been assigned a value) and false otherwise */
  public boolean isSetExec_device_type() {
    return this.exec_device_type != null;
  }

  public void setExec_device_typeIsSet(boolean value) {
    if (!value) {
      this.exec_device_type = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case QUERY_SESSION_ID:
      if (value == null) {
        unsetQuery_session_id();
      } else {
        setQuery_session_id((java.lang.String)value);
      }
      break;

    case QUERY_PUBLIC_SESSION_ID:
      if (value == null) {
        unsetQuery_public_session_id();
      } else {
        setQuery_public_session_id((java.lang.String)value);
      }
      break;

    case CURRENT_STATUS:
      if (value == null) {
        unsetCurrent_status();
      } else {
        setCurrent_status((java.lang.String)value);
      }
      break;

    case EXECUTOR_ID:
      if (value == null) {
        unsetExecutor_id();
      } else {
        setExecutor_id((java.lang.Integer)value);
      }
      break;

    case SUBMITTED:
      if (value == null) {
        unsetSubmitted();
      } else {
        setSubmitted((java.lang.String)value);
      }
      break;

    case QUERY_STR:
      if (value == null) {
        unsetQuery_str();
      } else {
        setQuery_str((java.lang.String)value);
      }
      break;

    case LOGIN_NAME:
      if (value == null) {
        unsetLogin_name();
      } else {
        setLogin_name((java.lang.String)value);
      }
      break;

    case CLIENT_ADDRESS:
      if (value == null) {
        unsetClient_address();
      } else {
        setClient_address((java.lang.String)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDb_name();
      } else {
        setDb_name((java.lang.String)value);
      }
      break;

    case EXEC_DEVICE_TYPE:
      if (value == null) {
        unsetExec_device_type();
      } else {
        setExec_device_type((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY_SESSION_ID:
      return getQuery_session_id();

    case QUERY_PUBLIC_SESSION_ID:
      return getQuery_public_session_id();

    case CURRENT_STATUS:
      return getCurrent_status();

    case EXECUTOR_ID:
      return getExecutor_id();

    case SUBMITTED:
      return getSubmitted();

    case QUERY_STR:
      return getQuery_str();

    case LOGIN_NAME:
      return getLogin_name();

    case CLIENT_ADDRESS:
      return getClient_address();

    case DB_NAME:
      return getDb_name();

    case EXEC_DEVICE_TYPE:
      return getExec_device_type();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case QUERY_SESSION_ID:
      return isSetQuery_session_id();
    case QUERY_PUBLIC_SESSION_ID:
      return isSetQuery_public_session_id();
    case CURRENT_STATUS:
      return isSetCurrent_status();
    case EXECUTOR_ID:
      return isSetExecutor_id();
    case SUBMITTED:
      return isSetSubmitted();
    case QUERY_STR:
      return isSetQuery_str();
    case LOGIN_NAME:
      return isSetLogin_name();
    case CLIENT_ADDRESS:
      return isSetClient_address();
    case DB_NAME:
      return isSetDb_name();
    case EXEC_DEVICE_TYPE:
      return isSetExec_device_type();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TQueryInfo)
      return this.equals((TQueryInfo)that);
    return false;
  }

  public boolean equals(TQueryInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_query_session_id = true && this.isSetQuery_session_id();
    boolean that_present_query_session_id = true && that.isSetQuery_session_id();
    if (this_present_query_session_id || that_present_query_session_id) {
      if (!(this_present_query_session_id && that_present_query_session_id))
        return false;
      if (!this.query_session_id.equals(that.query_session_id))
        return false;
    }

    boolean this_present_query_public_session_id = true && this.isSetQuery_public_session_id();
    boolean that_present_query_public_session_id = true && that.isSetQuery_public_session_id();
    if (this_present_query_public_session_id || that_present_query_public_session_id) {
      if (!(this_present_query_public_session_id && that_present_query_public_session_id))
        return false;
      if (!this.query_public_session_id.equals(that.query_public_session_id))
        return false;
    }

    boolean this_present_current_status = true && this.isSetCurrent_status();
    boolean that_present_current_status = true && that.isSetCurrent_status();
    if (this_present_current_status || that_present_current_status) {
      if (!(this_present_current_status && that_present_current_status))
        return false;
      if (!this.current_status.equals(that.current_status))
        return false;
    }

    boolean this_present_executor_id = true;
    boolean that_present_executor_id = true;
    if (this_present_executor_id || that_present_executor_id) {
      if (!(this_present_executor_id && that_present_executor_id))
        return false;
      if (this.executor_id != that.executor_id)
        return false;
    }

    boolean this_present_submitted = true && this.isSetSubmitted();
    boolean that_present_submitted = true && that.isSetSubmitted();
    if (this_present_submitted || that_present_submitted) {
      if (!(this_present_submitted && that_present_submitted))
        return false;
      if (!this.submitted.equals(that.submitted))
        return false;
    }

    boolean this_present_query_str = true && this.isSetQuery_str();
    boolean that_present_query_str = true && that.isSetQuery_str();
    if (this_present_query_str || that_present_query_str) {
      if (!(this_present_query_str && that_present_query_str))
        return false;
      if (!this.query_str.equals(that.query_str))
        return false;
    }

    boolean this_present_login_name = true && this.isSetLogin_name();
    boolean that_present_login_name = true && that.isSetLogin_name();
    if (this_present_login_name || that_present_login_name) {
      if (!(this_present_login_name && that_present_login_name))
        return false;
      if (!this.login_name.equals(that.login_name))
        return false;
    }

    boolean this_present_client_address = true && this.isSetClient_address();
    boolean that_present_client_address = true && that.isSetClient_address();
    if (this_present_client_address || that_present_client_address) {
      if (!(this_present_client_address && that_present_client_address))
        return false;
      if (!this.client_address.equals(that.client_address))
        return false;
    }

    boolean this_present_db_name = true && this.isSetDb_name();
    boolean that_present_db_name = true && that.isSetDb_name();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_exec_device_type = true && this.isSetExec_device_type();
    boolean that_present_exec_device_type = true && that.isSetExec_device_type();
    if (this_present_exec_device_type || that_present_exec_device_type) {
      if (!(this_present_exec_device_type && that_present_exec_device_type))
        return false;
      if (!this.exec_device_type.equals(that.exec_device_type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetQuery_session_id()) ? 131071 : 524287);
    if (isSetQuery_session_id())
      hashCode = hashCode * 8191 + query_session_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetQuery_public_session_id()) ? 131071 : 524287);
    if (isSetQuery_public_session_id())
      hashCode = hashCode * 8191 + query_public_session_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetCurrent_status()) ? 131071 : 524287);
    if (isSetCurrent_status())
      hashCode = hashCode * 8191 + current_status.hashCode();

    hashCode = hashCode * 8191 + executor_id;

    hashCode = hashCode * 8191 + ((isSetSubmitted()) ? 131071 : 524287);
    if (isSetSubmitted())
      hashCode = hashCode * 8191 + submitted.hashCode();

    hashCode = hashCode * 8191 + ((isSetQuery_str()) ? 131071 : 524287);
    if (isSetQuery_str())
      hashCode = hashCode * 8191 + query_str.hashCode();

    hashCode = hashCode * 8191 + ((isSetLogin_name()) ? 131071 : 524287);
    if (isSetLogin_name())
      hashCode = hashCode * 8191 + login_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetClient_address()) ? 131071 : 524287);
    if (isSetClient_address())
      hashCode = hashCode * 8191 + client_address.hashCode();

    hashCode = hashCode * 8191 + ((isSetDb_name()) ? 131071 : 524287);
    if (isSetDb_name())
      hashCode = hashCode * 8191 + db_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetExec_device_type()) ? 131071 : 524287);
    if (isSetExec_device_type())
      hashCode = hashCode * 8191 + exec_device_type.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TQueryInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetQuery_session_id(), other.isSetQuery_session_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_session_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_session_id, other.query_session_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuery_public_session_id(), other.isSetQuery_public_session_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_public_session_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_public_session_id, other.query_public_session_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCurrent_status(), other.isSetCurrent_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrent_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_status, other.current_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExecutor_id(), other.isSetExecutor_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutor_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executor_id, other.executor_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSubmitted(), other.isSetSubmitted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubmitted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.submitted, other.submitted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuery_str(), other.isSetQuery_str());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_str()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_str, other.query_str);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLogin_name(), other.isSetLogin_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogin_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.login_name, other.login_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetClient_address(), other.isSetClient_address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClient_address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.client_address, other.client_address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb_name(), other.isSetDb_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, other.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExec_device_type(), other.isSetExec_device_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExec_device_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exec_device_type, other.exec_device_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TQueryInfo(");
    boolean first = true;

    sb.append("query_session_id:");
    if (this.query_session_id == null) {
      sb.append("null");
    } else {
      sb.append(this.query_session_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("query_public_session_id:");
    if (this.query_public_session_id == null) {
      sb.append("null");
    } else {
      sb.append(this.query_public_session_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("current_status:");
    if (this.current_status == null) {
      sb.append("null");
    } else {
      sb.append(this.current_status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executor_id:");
    sb.append(this.executor_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("submitted:");
    if (this.submitted == null) {
      sb.append("null");
    } else {
      sb.append(this.submitted);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("query_str:");
    if (this.query_str == null) {
      sb.append("null");
    } else {
      sb.append(this.query_str);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("login_name:");
    if (this.login_name == null) {
      sb.append("null");
    } else {
      sb.append(this.login_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("client_address:");
    if (this.client_address == null) {
      sb.append("null");
    } else {
      sb.append(this.client_address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("db_name:");
    if (this.db_name == null) {
      sb.append("null");
    } else {
      sb.append(this.db_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exec_device_type:");
    if (this.exec_device_type == null) {
      sb.append("null");
    } else {
      sb.append(this.exec_device_type);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQueryInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TQueryInfoStandardScheme getScheme() {
      return new TQueryInfoStandardScheme();
    }
  }

  private static class TQueryInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TQueryInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TQueryInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY_SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query_session_id = iprot.readString();
              struct.setQuery_session_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUERY_PUBLIC_SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query_public_session_id = iprot.readString();
              struct.setQuery_public_session_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CURRENT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.current_status = iprot.readString();
              struct.setCurrent_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXECUTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.executor_id = iprot.readI32();
              struct.setExecutor_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUBMITTED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.submitted = iprot.readString();
              struct.setSubmittedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // QUERY_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query_str = iprot.readString();
              struct.setQuery_strIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOGIN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.login_name = iprot.readString();
              struct.setLogin_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CLIENT_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.client_address = iprot.readString();
              struct.setClient_addressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDb_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXEC_DEVICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exec_device_type = iprot.readString();
              struct.setExec_device_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TQueryInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.query_session_id != null) {
        oprot.writeFieldBegin(QUERY_SESSION_ID_FIELD_DESC);
        oprot.writeString(struct.query_session_id);
        oprot.writeFieldEnd();
      }
      if (struct.query_public_session_id != null) {
        oprot.writeFieldBegin(QUERY_PUBLIC_SESSION_ID_FIELD_DESC);
        oprot.writeString(struct.query_public_session_id);
        oprot.writeFieldEnd();
      }
      if (struct.current_status != null) {
        oprot.writeFieldBegin(CURRENT_STATUS_FIELD_DESC);
        oprot.writeString(struct.current_status);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXECUTOR_ID_FIELD_DESC);
      oprot.writeI32(struct.executor_id);
      oprot.writeFieldEnd();
      if (struct.submitted != null) {
        oprot.writeFieldBegin(SUBMITTED_FIELD_DESC);
        oprot.writeString(struct.submitted);
        oprot.writeFieldEnd();
      }
      if (struct.query_str != null) {
        oprot.writeFieldBegin(QUERY_STR_FIELD_DESC);
        oprot.writeString(struct.query_str);
        oprot.writeFieldEnd();
      }
      if (struct.login_name != null) {
        oprot.writeFieldBegin(LOGIN_NAME_FIELD_DESC);
        oprot.writeString(struct.login_name);
        oprot.writeFieldEnd();
      }
      if (struct.client_address != null) {
        oprot.writeFieldBegin(CLIENT_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.client_address);
        oprot.writeFieldEnd();
      }
      if (struct.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(struct.db_name);
        oprot.writeFieldEnd();
      }
      if (struct.exec_device_type != null) {
        oprot.writeFieldBegin(EXEC_DEVICE_TYPE_FIELD_DESC);
        oprot.writeString(struct.exec_device_type);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQueryInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TQueryInfoTupleScheme getScheme() {
      return new TQueryInfoTupleScheme();
    }
  }

  private static class TQueryInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TQueryInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQueryInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetQuery_session_id()) {
        optionals.set(0);
      }
      if (struct.isSetQuery_public_session_id()) {
        optionals.set(1);
      }
      if (struct.isSetCurrent_status()) {
        optionals.set(2);
      }
      if (struct.isSetExecutor_id()) {
        optionals.set(3);
      }
      if (struct.isSetSubmitted()) {
        optionals.set(4);
      }
      if (struct.isSetQuery_str()) {
        optionals.set(5);
      }
      if (struct.isSetLogin_name()) {
        optionals.set(6);
      }
      if (struct.isSetClient_address()) {
        optionals.set(7);
      }
      if (struct.isSetDb_name()) {
        optionals.set(8);
      }
      if (struct.isSetExec_device_type()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetQuery_session_id()) {
        oprot.writeString(struct.query_session_id);
      }
      if (struct.isSetQuery_public_session_id()) {
        oprot.writeString(struct.query_public_session_id);
      }
      if (struct.isSetCurrent_status()) {
        oprot.writeString(struct.current_status);
      }
      if (struct.isSetExecutor_id()) {
        oprot.writeI32(struct.executor_id);
      }
      if (struct.isSetSubmitted()) {
        oprot.writeString(struct.submitted);
      }
      if (struct.isSetQuery_str()) {
        oprot.writeString(struct.query_str);
      }
      if (struct.isSetLogin_name()) {
        oprot.writeString(struct.login_name);
      }
      if (struct.isSetClient_address()) {
        oprot.writeString(struct.client_address);
      }
      if (struct.isSetDb_name()) {
        oprot.writeString(struct.db_name);
      }
      if (struct.isSetExec_device_type()) {
        oprot.writeString(struct.exec_device_type);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQueryInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.query_session_id = iprot.readString();
        struct.setQuery_session_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.query_public_session_id = iprot.readString();
        struct.setQuery_public_session_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.current_status = iprot.readString();
        struct.setCurrent_statusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.executor_id = iprot.readI32();
        struct.setExecutor_idIsSet(true);
      }
      if (incoming.get(4)) {
        struct.submitted = iprot.readString();
        struct.setSubmittedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.query_str = iprot.readString();
        struct.setQuery_strIsSet(true);
      }
      if (incoming.get(6)) {
        struct.login_name = iprot.readString();
        struct.setLogin_nameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.client_address = iprot.readString();
        struct.setClient_addressIsSet(true);
      }
      if (incoming.get(8)) {
        struct.db_name = iprot.readString();
        struct.setDb_nameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.exec_device_type = iprot.readString();
        struct.setExec_device_typeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

